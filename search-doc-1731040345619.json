{"searchDocs":[{"title":"Class: TelegramClient","type":0,"sectionRef":"#","url":"/eliza/api/classes/TelegramClient/","content":"","keywords":"","version":"Next"},{"title":"Constructors​","type":1,"pageTitle":"Class: TelegramClient","url":"/eliza/api/classes/TelegramClient/#constructors","content":" ","version":"Next","tagName":"h2"},{"title":"new TelegramClient()​","type":1,"pageTitle":"Class: TelegramClient","url":"/eliza/api/classes/TelegramClient/#new-telegramclient","content":" new TelegramClient(runtime, botToken): TelegramClient  Parameters​  • runtime: IAgentRuntime  • botToken: string  Returns​  TelegramClient  Defined in​  packages/core/src/clients/telegram/src/index.ts:12  ","version":"Next","tagName":"h3"},{"title":"Methods​","type":1,"pageTitle":"Class: TelegramClient","url":"/eliza/api/classes/TelegramClient/#methods","content":" ","version":"Next","tagName":"h2"},{"title":"start()​","type":1,"pageTitle":"Class: TelegramClient","url":"/eliza/api/classes/TelegramClient/#start","content":" start(): Promise&lt;void&gt;  Returns​  Promise&lt;void&gt;  Defined in​  packages/core/src/clients/telegram/src/index.ts:54    ","version":"Next","tagName":"h3"},{"title":"stop()​","type":1,"pageTitle":"Class: TelegramClient","url":"/eliza/api/classes/TelegramClient/#stop","content":" stop(): Promise&lt;void&gt;  Returns​  Promise&lt;void&gt;  Defined in​  packages/core/src/clients/telegram/src/index.ts:91 ","version":"Next","tagName":"h3"},{"title":"Class: DirectClient","type":0,"sectionRef":"#","url":"/eliza/api/classes/DirectClient/","content":"","keywords":"","version":"Next"},{"title":"Constructors​","type":1,"pageTitle":"Class: DirectClient","url":"/eliza/api/classes/DirectClient/#constructors","content":" ","version":"Next","tagName":"h2"},{"title":"new DirectClient()​","type":1,"pageTitle":"Class: DirectClient","url":"/eliza/api/classes/DirectClient/#new-directclient","content":" new DirectClient(): DirectClient  Returns​  DirectClient  Defined in​  packages/core/src/clients/direct/index.ts:56  ","version":"Next","tagName":"h3"},{"title":"Methods​","type":1,"pageTitle":"Class: DirectClient","url":"/eliza/api/classes/DirectClient/#methods","content":" ","version":"Next","tagName":"h2"},{"title":"registerAgent()​","type":1,"pageTitle":"Class: DirectClient","url":"/eliza/api/classes/DirectClient/#registeragent","content":" registerAgent(runtime): void  Parameters​  • runtime: AgentRuntime  Returns​  void  Defined in​  packages/core/src/clients/direct/index.ts:264    ","version":"Next","tagName":"h3"},{"title":"unregisterAgent()​","type":1,"pageTitle":"Class: DirectClient","url":"/eliza/api/classes/DirectClient/#unregisteragent","content":" unregisterAgent(runtime): void  Parameters​  • runtime: AgentRuntime  Returns​  void  Defined in​  packages/core/src/clients/direct/index.ts:268    ","version":"Next","tagName":"h3"},{"title":"start()​","type":1,"pageTitle":"Class: DirectClient","url":"/eliza/api/classes/DirectClient/#start","content":" start(port): void  Parameters​  • port: number  Returns​  void  Defined in​  packages/core/src/clients/direct/index.ts:272 ","version":"Next","tagName":"h3"},{"title":"@eliza/core v1.0.0","type":0,"sectionRef":"#","url":"/eliza/api/","content":"","keywords":"","version":"Next"},{"title":"Enumerations​","type":1,"pageTitle":"@eliza/core v1.0.0","url":"/eliza/api/#enumerations","content":" ImageGenModelGoalStatusModelClassModelProviderClients  ","version":"Next","tagName":"h2"},{"title":"Classes​","type":1,"pageTitle":"@eliza/core v1.0.0","url":"/eliza/api/#classes","content":" PostgresDatabaseAdapterSqliteDatabaseAdapterDirectClientDiscordClientTelegramClientTwitterInteractionClientTwitterPostClientTwitterSearchClientDatabaseAdapterMemoryManagerAgentRuntimeTokenProviderWalletProvider  ","version":"Next","tagName":"h2"},{"title":"Interfaces​","type":1,"pageTitle":"@eliza/core v1.0.0","url":"/eliza/api/#interfaces","content":" CreateAndBuyContentContentActionExampleConversationExampleActorObjectiveGoalStateMemoryMessageExampleActionEvaluationExampleEvaluatorProviderRelationshipAccountParticipantRoomIDatabaseAdapterIMemoryManagerIAgentRuntimeIImageRecognitionServiceITranscriptionServiceIVideoServiceILlamaServiceIBrowserServiceISpeechServiceIPdfService  ","version":"Next","tagName":"h2"},{"title":"Type Aliases​","type":1,"pageTitle":"@eliza/core v1.0.0","url":"/eliza/api/#type-aliases","content":" UUIDModelModelsHandlerHandlerCallbackValidatorMediaPluginCharacter  ","version":"Next","tagName":"h2"},{"title":"Variables​","type":1,"pageTitle":"@eliza/core v1.0.0","url":"/eliza/api/#variables","content":" messageHandlerTemplateshouldContinueTemplatecontinueActionshouldFollowTemplatefollowRoomignoreimageGenerationshouldMuteTemplatemuteRoomnoneexecuteSwapunfollowRoomshouldUnmuteTemplateunmuteRoomdefaultActionsdefaultCharacterdefaultEvaluatorsevaluationTemplateimageGenModelsembeddingDimensionembeddingZeroVectordefaultProviderssettingselizaLoggerboredomProviderorderBookProvidertimeProvidertokenProviderwalletProvider  ","version":"Next","tagName":"h2"},{"title":"Functions​","type":1,"pageTitle":"@eliza/core v1.0.0","url":"/eliza/api/#functions","content":" generateImagegenerateCaptionisCreateAndBuyContentcreateAndBuyTokenbuyTokensellTokenloadActionConfigsloadCustomActionsinitializeClientsparseArgumentsloadCharactersgetTokenForProviderinitializeDatabasecreateAgentRuntimecreateDirectRuntimestartDiscordstartTelegramstartTwittercomposeActionExamplesformatActionNamesformatActionscomposeContextaddHeaderembedretrieveCachedEmbeddingformatEvaluatorNamesformatEvaluatorsformatEvaluatorExamplesformatEvaluatorExampleDescriptionsgenerateTexttrimTokensgenerateShouldRespondsplitChunksgenerateTrueOrFalsegenerateTextArraygenerateObjectgenerateObjectArraygenerateMessageResponsegetGoalsformatGoalsAsStringupdateGoalcreateGoalgetImageGenModelgetActorDetailsformatActorsformatMessagesformatTimestampgetModelgetEndpointformatPostsgetProviderscreateRelationshipgetRelationshipgetRelationshipsformatRelationships ","version":"Next","tagName":"h2"},{"title":"Class: DiscordClient","type":0,"sectionRef":"#","url":"/eliza/api/classes/DiscordClient/","content":"","keywords":"","version":"Next"},{"title":"Extends​","type":1,"pageTitle":"Class: DiscordClient","url":"/eliza/api/classes/DiscordClient/#extends","content":" EventEmitter  ","version":"Next","tagName":"h2"},{"title":"Constructors​","type":1,"pageTitle":"Class: DiscordClient","url":"/eliza/api/classes/DiscordClient/#constructors","content":" ","version":"Next","tagName":"h2"},{"title":"new DiscordClient()​","type":1,"pageTitle":"Class: DiscordClient","url":"/eliza/api/classes/DiscordClient/#new-discordclient","content":" new DiscordClient(runtime): DiscordClient  Parameters​  • runtime: IAgentRuntime  Returns​  DiscordClient  Overrides​  EventEmitter.constructor  Defined in​  packages/core/src/clients/discord/index.ts:34  ","version":"Next","tagName":"h3"},{"title":"Properties​","type":1,"pageTitle":"Class: DiscordClient","url":"/eliza/api/classes/DiscordClient/#properties","content":" ","version":"Next","tagName":"h2"},{"title":"apiToken​","type":1,"pageTitle":"Class: DiscordClient","url":"/eliza/api/classes/DiscordClient/#apitoken","content":" apiToken: string  Defined in​  packages/core/src/clients/discord/index.ts:27    ","version":"Next","tagName":"h3"},{"title":"character​","type":1,"pageTitle":"Class: DiscordClient","url":"/eliza/api/classes/DiscordClient/#character","content":" character: Character  Defined in​  packages/core/src/clients/discord/index.ts:30  ","version":"Next","tagName":"h3"},{"title":"Methods​","type":1,"pageTitle":"Class: DiscordClient","url":"/eliza/api/classes/DiscordClient/#methods","content":" ","version":"Next","tagName":"h2"},{"title":"handleReactionAdd()​","type":1,"pageTitle":"Class: DiscordClient","url":"/eliza/api/classes/DiscordClient/#handlereactionadd","content":" handleReactionAdd(reaction, user): Promise&lt;void&gt;  Parameters​  • reaction: MessageReaction  • user: User  Returns​  Promise&lt;void&gt;  Defined in​  packages/core/src/clients/discord/index.ts:121    ","version":"Next","tagName":"h3"},{"title":"handleReactionRemove()​","type":1,"pageTitle":"Class: DiscordClient","url":"/eliza/api/classes/DiscordClient/#handlereactionremove","content":" handleReactionRemove(reaction, user): Promise&lt;void&gt;  Parameters​  • reaction: MessageReaction  • user: User  Returns​  Promise&lt;void&gt;  Defined in​  packages/core/src/clients/discord/index.ts:195 ","version":"Next","tagName":"h3"},{"title":"Function: createAgentRuntime()","type":0,"sectionRef":"#","url":"/eliza/api/functions/createAgentRuntime/","content":"","keywords":"","version":"Next"},{"title":"Parameters​","type":1,"pageTitle":"Function: createAgentRuntime()","url":"/eliza/api/functions/createAgentRuntime/#parameters","content":" • character: Character  • db: any  • token: string  • configPath: string = &quot;./elizaConfig.yaml&quot;  ","version":"Next","tagName":"h2"},{"title":"Returns​","type":1,"pageTitle":"Function: createAgentRuntime()","url":"/eliza/api/functions/createAgentRuntime/#returns","content":" Promise&lt;AgentRuntime&gt;  ","version":"Next","tagName":"h2"},{"title":"Defined in​","type":1,"pageTitle":"Function: createAgentRuntime()","url":"/eliza/api/functions/createAgentRuntime/#defined-in","content":" packages/core/src/cli/index.ts:142 ","version":"Next","tagName":"h2"},{"title":"Enumeration: ImageGenModel","type":0,"sectionRef":"#","url":"/eliza/api/enumerations/ImageGenModel/","content":"","keywords":"","version":"Next"},{"title":"Enumeration Members​","type":1,"pageTitle":"Enumeration: ImageGenModel","url":"/eliza/api/enumerations/ImageGenModel/#enumeration-members","content":" ","version":"Next","tagName":"h2"},{"title":"TogetherAI​","type":1,"pageTitle":"Enumeration: ImageGenModel","url":"/eliza/api/enumerations/ImageGenModel/#togetherai","content":" TogetherAI: &quot;TogetherAI&quot;  Defined in​  packages/core/src/core/imageGenModels.ts:2    ","version":"Next","tagName":"h3"},{"title":"Dalle​","type":1,"pageTitle":"Enumeration: ImageGenModel","url":"/eliza/api/enumerations/ImageGenModel/#dalle","content":" Dalle: &quot;Dalle&quot;  Defined in​  packages/core/src/core/imageGenModels.ts:3 ","version":"Next","tagName":"h3"},{"title":"Enumeration: Clients","type":0,"sectionRef":"#","url":"/eliza/api/enumerations/Clients/","content":"","keywords":"","version":"Next"},{"title":"Enumeration Members​","type":1,"pageTitle":"Enumeration: Clients","url":"/eliza/api/enumerations/Clients/#enumeration-members","content":" ","version":"Next","tagName":"h2"},{"title":"DISCORD​","type":1,"pageTitle":"Enumeration: Clients","url":"/eliza/api/enumerations/Clients/#discord","content":" DISCORD: &quot;discord&quot;  Defined in​  packages/core/src/core/types.ts:312    ","version":"Next","tagName":"h3"},{"title":"DIRECT​","type":1,"pageTitle":"Enumeration: Clients","url":"/eliza/api/enumerations/Clients/#direct","content":" DIRECT: &quot;direct&quot;  Defined in​  packages/core/src/core/types.ts:313    ","version":"Next","tagName":"h3"},{"title":"TWITTER​","type":1,"pageTitle":"Enumeration: Clients","url":"/eliza/api/enumerations/Clients/#twitter","content":" TWITTER: &quot;twitter&quot;  Defined in​  packages/core/src/core/types.ts:314    ","version":"Next","tagName":"h3"},{"title":"TELEGRAM​","type":1,"pageTitle":"Enumeration: Clients","url":"/eliza/api/enumerations/Clients/#telegram","content":" TELEGRAM: &quot;telegram&quot;  Defined in​  packages/core/src/core/types.ts:315 ","version":"Next","tagName":"h3"},{"title":"Class: WalletProvider","type":0,"sectionRef":"#","url":"/eliza/api/classes/WalletProvider/","content":"","keywords":"","version":"Next"},{"title":"Constructors​","type":1,"pageTitle":"Class: WalletProvider","url":"/eliza/api/classes/WalletProvider/#constructors","content":" ","version":"Next","tagName":"h2"},{"title":"new WalletProvider()​","type":1,"pageTitle":"Class: WalletProvider","url":"/eliza/api/classes/WalletProvider/#new-walletprovider","content":" new WalletProvider(connection, walletPublicKey): WalletProvider  Parameters​  • connection: Connection  • walletPublicKey: PublicKey  Returns​  WalletProvider  Defined in​  packages/core/src/providers/wallet.ts:53  ","version":"Next","tagName":"h3"},{"title":"Methods​","type":1,"pageTitle":"Class: WalletProvider","url":"/eliza/api/classes/WalletProvider/#methods","content":" ","version":"Next","tagName":"h2"},{"title":"fetchPortfolioValue()​","type":1,"pageTitle":"Class: WalletProvider","url":"/eliza/api/classes/WalletProvider/#fetchportfoliovalue","content":" fetchPortfolioValue(runtime): Promise&lt;WalletPortfolio&gt;  Parameters​  • runtime: any  Returns​  Promise&lt;WalletPortfolio&gt;  Defined in​  packages/core/src/providers/wallet.ts:105    ","version":"Next","tagName":"h3"},{"title":"fetchPrices()​","type":1,"pageTitle":"Class: WalletProvider","url":"/eliza/api/classes/WalletProvider/#fetchprices","content":" fetchPrices(runtime): Promise&lt;Prices&gt;  Parameters​  • runtime: any  Returns​  Promise&lt;Prices&gt;  Defined in​  packages/core/src/providers/wallet.ts:150    ","version":"Next","tagName":"h3"},{"title":"formatPortfolio()​","type":1,"pageTitle":"Class: WalletProvider","url":"/eliza/api/classes/WalletProvider/#formatportfolio","content":" formatPortfolio(runtime, portfolio, prices): string  Parameters​  • runtime: any  • portfolio: WalletPortfolio  • prices: Prices  Returns​  string  Defined in​  packages/core/src/providers/wallet.ts:192    ","version":"Next","tagName":"h3"},{"title":"getFormattedPortfolio()​","type":1,"pageTitle":"Class: WalletProvider","url":"/eliza/api/classes/WalletProvider/#getformattedportfolio","content":" getFormattedPortfolio(runtime): Promise&lt;string&gt;  Parameters​  • runtime: any  Returns​  Promise&lt;string&gt;  Defined in​  packages/core/src/providers/wallet.ts:229 ","version":"Next","tagName":"h3"},{"title":"Function: buyToken()","type":0,"sectionRef":"#","url":"/eliza/api/functions/buyToken/","content":"","keywords":"","version":"Next"},{"title":"Parameters​","type":1,"pageTitle":"Function: buyToken()","url":"/eliza/api/functions/buyToken/#parameters","content":" • __namedParameters  • __namedParameters.sdk: PumpFunSDK  • __namedParameters.buyer: Keypair  • __namedParameters.mint: PublicKey  • __namedParameters.amount: bigint  • __namedParameters.priorityFee: PriorityFee  • __namedParameters.allowOffCurve: boolean  • __namedParameters.slippage: string  • __namedParameters.connection: Connection  ","version":"Next","tagName":"h2"},{"title":"Returns​","type":1,"pageTitle":"Function: buyToken()","url":"/eliza/api/functions/buyToken/#returns","content":" Promise&lt;void&gt;  ","version":"Next","tagName":"h2"},{"title":"Defined in​","type":1,"pageTitle":"Function: buyToken()","url":"/eliza/api/functions/buyToken/#defined-in","content":" packages/core/src/actions/pumpfun.ts:119 ","version":"Next","tagName":"h2"},{"title":"Function: addHeader()","type":0,"sectionRef":"#","url":"/eliza/api/functions/addHeader/","content":"","keywords":"","version":"Next"},{"title":"Parameters​","type":1,"pageTitle":"Function: addHeader()","url":"/eliza/api/functions/addHeader/#parameters","content":" • header: string  The header to add to the body.  • body: string  The body to which to add the header.  ","version":"Next","tagName":"h2"},{"title":"Returns​","type":1,"pageTitle":"Function: addHeader()","url":"/eliza/api/functions/addHeader/#returns","content":" string  The body with the header prepended.  ","version":"Next","tagName":"h2"},{"title":"Example​","type":1,"pageTitle":"Function: addHeader()","url":"/eliza/api/functions/addHeader/#example","content":" // Given a header and a body const header = &quot;Header&quot;; const body = &quot;Body&quot;; // Adding the header to the body will result in: // &quot;Header\\nBody&quot; const text = addHeader(header, body);   ","version":"Next","tagName":"h2"},{"title":"Defined in​","type":1,"pageTitle":"Function: addHeader()","url":"/eliza/api/functions/addHeader/#defined-in","content":" packages/core/src/core/context.ts:58 ","version":"Next","tagName":"h2"},{"title":"Function: createAndBuyToken()","type":0,"sectionRef":"#","url":"/eliza/api/functions/createAndBuyToken/","content":"","keywords":"","version":"Next"},{"title":"Parameters​","type":1,"pageTitle":"Function: createAndBuyToken()","url":"/eliza/api/functions/createAndBuyToken/#parameters","content":" • __namedParameters  • __namedParameters.deployer: Keypair  • __namedParameters.mint: Keypair  • __namedParameters.tokenMetadata: CreateTokenMetadata  • __namedParameters.buyAmountSol: bigint  • __namedParameters.priorityFee: PriorityFee  • __namedParameters.allowOffCurve: boolean  • __namedParameters.commitment?: &quot;processed&quot; | &quot;confirmed&quot; | &quot;finalized&quot; | &quot;recent&quot; | &quot;single&quot; | &quot;singleGossip&quot; | &quot;root&quot; | &quot;max&quot; = &quot;finalized&quot;  • __namedParameters.sdk: PumpFunSDK  • __namedParameters.connection: Connection  • __namedParameters.slippage: string  ","version":"Next","tagName":"h2"},{"title":"Returns​","type":1,"pageTitle":"Function: createAndBuyToken()","url":"/eliza/api/functions/createAndBuyToken/#returns","content":" Promise&lt;void&gt;  ","version":"Next","tagName":"h2"},{"title":"Defined in​","type":1,"pageTitle":"Function: createAndBuyToken()","url":"/eliza/api/functions/createAndBuyToken/#defined-in","content":" packages/core/src/actions/pumpfun.ts:51 ","version":"Next","tagName":"h2"},{"title":"Enumeration: ModelClass","type":0,"sectionRef":"#","url":"/eliza/api/enumerations/ModelClass/","content":"","keywords":"","version":"Next"},{"title":"Enumeration Members​","type":1,"pageTitle":"Enumeration: ModelClass","url":"/eliza/api/enumerations/ModelClass/#enumeration-members","content":" ","version":"Next","tagName":"h2"},{"title":"SMALL​","type":1,"pageTitle":"Enumeration: ModelClass","url":"/eliza/api/enumerations/ModelClass/#small","content":" SMALL: &quot;small&quot;  Defined in​  packages/core/src/core/types.ts:76    ","version":"Next","tagName":"h3"},{"title":"MEDIUM​","type":1,"pageTitle":"Enumeration: ModelClass","url":"/eliza/api/enumerations/ModelClass/#medium","content":" MEDIUM: &quot;medium&quot;  Defined in​  packages/core/src/core/types.ts:77    ","version":"Next","tagName":"h3"},{"title":"LARGE​","type":1,"pageTitle":"Enumeration: ModelClass","url":"/eliza/api/enumerations/ModelClass/#large","content":" LARGE: &quot;large&quot;  Defined in​  packages/core/src/core/types.ts:78    ","version":"Next","tagName":"h3"},{"title":"EMBEDDING​","type":1,"pageTitle":"Enumeration: ModelClass","url":"/eliza/api/enumerations/ModelClass/#embedding","content":" EMBEDDING: &quot;embedding&quot;  Defined in​  packages/core/src/core/types.ts:79 ","version":"Next","tagName":"h3"},{"title":"Function: composeActionExamples()","type":0,"sectionRef":"#","url":"/eliza/api/functions/composeActionExamples/","content":"","keywords":"","version":"Next"},{"title":"Parameters​","type":1,"pageTitle":"Function: composeActionExamples()","url":"/eliza/api/functions/composeActionExamples/#parameters","content":" • actionsData: Action[]  An array of Action objects from which to draw examples.  • count: number  The number of examples to generate.  ","version":"Next","tagName":"h2"},{"title":"Returns​","type":1,"pageTitle":"Function: composeActionExamples()","url":"/eliza/api/functions/composeActionExamples/#returns","content":" string  A string containing formatted examples of conversations.  ","version":"Next","tagName":"h2"},{"title":"Defined in​","type":1,"pageTitle":"Function: composeActionExamples()","url":"/eliza/api/functions/composeActionExamples/#defined-in","content":" packages/core/src/core/actions.ts:18 ","version":"Next","tagName":"h2"},{"title":"Function: composeContext()","type":0,"sectionRef":"#","url":"/eliza/api/functions/composeContext/","content":"","keywords":"","version":"Next"},{"title":"Parameters​","type":1,"pageTitle":"Function: composeContext()","url":"/eliza/api/functions/composeContext/#parameters","content":" • params  The parameters for composing the context.  • params.state: State  The state object containing values to replace the placeholders in the template.  • params.template: string  The template string containing placeholders to be replaced with state values.  ","version":"Next","tagName":"h2"},{"title":"Returns​","type":1,"pageTitle":"Function: composeContext()","url":"/eliza/api/functions/composeContext/#returns","content":" string  The composed context string with placeholders replaced by corresponding state values.  ","version":"Next","tagName":"h2"},{"title":"Example​","type":1,"pageTitle":"Function: composeContext()","url":"/eliza/api/functions/composeContext/#example","content":" // Given a state object and a template const state = { userName: &quot;Alice&quot;, userAge: 30 }; const template = &quot;Hello, {{userName}}! You are {{userAge}} years old&quot;; // Composing the context will result in: // &quot;Hello, Alice! You are 30 years old.&quot; const context = composeContext({ state, template });   ","version":"Next","tagName":"h2"},{"title":"Defined in​","type":1,"pageTitle":"Function: composeContext()","url":"/eliza/api/functions/composeContext/#defined-in","content":" packages/core/src/core/context.ts:24 ","version":"Next","tagName":"h2"},{"title":"Function: embed()","type":0,"sectionRef":"#","url":"/eliza/api/functions/embed/","content":"","keywords":"","version":"Next"},{"title":"Parameters​","type":1,"pageTitle":"Function: embed()","url":"/eliza/api/functions/embed/#parameters","content":" • runtime: IAgentRuntime  • input: string  The input to be embedded.  ","version":"Next","tagName":"h2"},{"title":"Returns​","type":1,"pageTitle":"Function: embed()","url":"/eliza/api/functions/embed/#returns","content":" Promise&lt;number[]&gt;  The embedding of the input.  ","version":"Next","tagName":"h2"},{"title":"Defined in​","type":1,"pageTitle":"Function: embed()","url":"/eliza/api/functions/embed/#defined-in","content":" packages/core/src/core/embedding.ts:9 ","version":"Next","tagName":"h2"},{"title":"Function: createGoal()","type":0,"sectionRef":"#","url":"/eliza/api/functions/createGoal/","content":"","keywords":"","version":"Next"},{"title":"Parameters​","type":1,"pageTitle":"Function: createGoal()","url":"/eliza/api/functions/createGoal/#parameters","content":" • __namedParameters  • __namedParameters.runtime: IAgentRuntime  • __namedParameters.goal: Goal  ","version":"Next","tagName":"h2"},{"title":"Returns​","type":1,"pageTitle":"Function: createGoal()","url":"/eliza/api/functions/createGoal/#returns","content":" Promise&lt;void&gt;  ","version":"Next","tagName":"h2"},{"title":"Defined in​","type":1,"pageTitle":"Function: createGoal()","url":"/eliza/api/functions/createGoal/#defined-in","content":" packages/core/src/core/goals.ts:54 ","version":"Next","tagName":"h2"},{"title":"Function: createDirectRuntime()","type":0,"sectionRef":"#","url":"/eliza/api/functions/createDirectRuntime/","content":"","keywords":"","version":"Next"},{"title":"Parameters​","type":1,"pageTitle":"Function: createDirectRuntime()","url":"/eliza/api/functions/createDirectRuntime/#parameters","content":" • character: Character  • db: any  • token: string  • configPath: string = &quot;./elizaConfig.yaml&quot;  ","version":"Next","tagName":"h2"},{"title":"Returns​","type":1,"pageTitle":"Function: createDirectRuntime()","url":"/eliza/api/functions/createDirectRuntime/#returns","content":" Promise&lt;AgentRuntime&gt;  ","version":"Next","tagName":"h2"},{"title":"Defined in​","type":1,"pageTitle":"Function: createDirectRuntime()","url":"/eliza/api/functions/createDirectRuntime/#defined-in","content":" packages/core/src/cli/index.ts:177 ","version":"Next","tagName":"h2"},{"title":"Function: createRelationship()","type":0,"sectionRef":"#","url":"/eliza/api/functions/createRelationship/","content":"","keywords":"","version":"Next"},{"title":"Parameters​","type":1,"pageTitle":"Function: createRelationship()","url":"/eliza/api/functions/createRelationship/#parameters","content":" • __namedParameters  • __namedParameters.runtime: IAgentRuntime  • __namedParameters.userA: `${string}-${string}-${string}-${string}-${string}`  • __namedParameters.userB: `${string}-${string}-${string}-${string}-${string}`  ","version":"Next","tagName":"h2"},{"title":"Returns​","type":1,"pageTitle":"Function: createRelationship()","url":"/eliza/api/functions/createRelationship/#returns","content":" Promise&lt;boolean&gt;  ","version":"Next","tagName":"h2"},{"title":"Defined in​","type":1,"pageTitle":"Function: createRelationship()","url":"/eliza/api/functions/createRelationship/#defined-in","content":" packages/core/src/core/relationships.ts:3 ","version":"Next","tagName":"h2"},{"title":"Class: MemoryManager","type":0,"sectionRef":"#","url":"/eliza/api/classes/MemoryManager/","content":"","keywords":"","version":"Next"},{"title":"Implements​","type":1,"pageTitle":"Class: MemoryManager","url":"/eliza/api/classes/MemoryManager/#implements","content":" IMemoryManager  ","version":"Next","tagName":"h2"},{"title":"Constructors​","type":1,"pageTitle":"Class: MemoryManager","url":"/eliza/api/classes/MemoryManager/#constructors","content":" ","version":"Next","tagName":"h2"},{"title":"new MemoryManager()​","type":1,"pageTitle":"Class: MemoryManager","url":"/eliza/api/classes/MemoryManager/#new-memorymanager","content":" new MemoryManager(opts): MemoryManager  Constructs a new MemoryManager instance.  Parameters​  • opts  Options for the manager.  • opts.tableName: string  The name of the table this manager will operate on.  • opts.runtime: IAgentRuntime  The AgentRuntime instance associated with this manager.  Returns​  MemoryManager  Defined in​  packages/core/src/core/memory.ts:35  ","version":"Next","tagName":"h3"},{"title":"Properties​","type":1,"pageTitle":"Class: MemoryManager","url":"/eliza/api/classes/MemoryManager/#properties","content":" ","version":"Next","tagName":"h2"},{"title":"runtime​","type":1,"pageTitle":"Class: MemoryManager","url":"/eliza/api/classes/MemoryManager/#runtime","content":" runtime: IAgentRuntime  The AgentRuntime instance associated with this manager.  Implementation of​  IMemoryManager.runtime  Defined in​  packages/core/src/core/memory.ts:22    ","version":"Next","tagName":"h3"},{"title":"tableName​","type":1,"pageTitle":"Class: MemoryManager","url":"/eliza/api/classes/MemoryManager/#tablename","content":" tableName: string  The name of the database table this manager operates on.  Implementation of​  IMemoryManager.tableName  Defined in​  packages/core/src/core/memory.ts:27  ","version":"Next","tagName":"h3"},{"title":"Methods​","type":1,"pageTitle":"Class: MemoryManager","url":"/eliza/api/classes/MemoryManager/#methods","content":" ","version":"Next","tagName":"h2"},{"title":"addEmbeddingToMemory()​","type":1,"pageTitle":"Class: MemoryManager","url":"/eliza/api/classes/MemoryManager/#addembeddingtomemory","content":" addEmbeddingToMemory(memory): Promise&lt;Memory&gt;  Adds an embedding vector to a memory object. If the memory already has an embedding, it is returned as is.  Parameters​  • memory: Memory  The memory object to add an embedding to.  Returns​  Promise&lt;Memory&gt;  A Promise resolving to the memory object, potentially updated with an embedding vector.  Implementation of​  IMemoryManager.addEmbeddingToMemory  Defined in​  packages/core/src/core/memory.ts:45    ","version":"Next","tagName":"h3"},{"title":"getMemories()​","type":1,"pageTitle":"Class: MemoryManager","url":"/eliza/api/classes/MemoryManager/#getmemories","content":" getMemories(opts): Promise&lt;Memory[]&gt;  Retrieves a list of memories by user IDs, with optional deduplication.  Parameters​  • opts  Options including user IDs, count, and uniqueness.  • opts.roomId: `${string}-${string}-${string}-${string}-${string}`  The room ID to retrieve memories for.  • opts.count?: number = 10  The number of memories to retrieve.  • opts.unique?: boolean = true  Whether to retrieve unique memories only.  • opts.agentId?: `${string}-${string}-${string}-${string}-${string}`  • opts.start?: number  • opts.end?: number  Returns​  Promise&lt;Memory[]&gt;  A Promise resolving to an array of Memory objects.  Implementation of​  IMemoryManager.getMemories  Defined in​  packages/core/src/core/memory.ts:66    ","version":"Next","tagName":"h3"},{"title":"getCachedEmbeddings()​","type":1,"pageTitle":"Class: MemoryManager","url":"/eliza/api/classes/MemoryManager/#getcachedembeddings","content":" getCachedEmbeddings(content): Promise&lt;object[]&gt;  Parameters​  • content: string  Returns​  Promise&lt;object[]&gt;  Implementation of​  IMemoryManager.getCachedEmbeddings  Defined in​  packages/core/src/core/memory.ts:93    ","version":"Next","tagName":"h3"},{"title":"searchMemoriesByEmbedding()​","type":1,"pageTitle":"Class: MemoryManager","url":"/eliza/api/classes/MemoryManager/#searchmemoriesbyembedding","content":" searchMemoriesByEmbedding(embedding, opts): Promise&lt;Memory[]&gt;  Searches for memories similar to a given embedding vector.  Parameters​  • embedding: number[]  The embedding vector to search with.  • opts  Options including match threshold, count, user IDs, and uniqueness.  • opts.match_threshold?: number  The similarity threshold for matching memories.  • opts.agentId?: `${string}-${string}-${string}-${string}-${string}`  • opts.count?: number  The maximum number of memories to retrieve.  • opts.roomId: `${string}-${string}-${string}-${string}-${string}`  The room ID to retrieve memories for.  • opts.unique?: boolean  Whether to retrieve unique memories only.  Returns​  Promise&lt;Memory[]&gt;  A Promise resolving to an array of Memory objects that match the embedding.  Implementation of​  IMemoryManager.searchMemoriesByEmbedding  Defined in​  packages/core/src/core/memory.ts:120    ","version":"Next","tagName":"h3"},{"title":"createMemory()​","type":1,"pageTitle":"Class: MemoryManager","url":"/eliza/api/classes/MemoryManager/#creatememory","content":" createMemory(memory, unique): Promise&lt;void&gt;  Creates a new memory in the database, with an option to check for similarity before insertion.  Parameters​  • memory: Memory  The memory object to create.  • unique: boolean = false  Whether to check for similarity before insertion.  Returns​  Promise&lt;void&gt;  A Promise that resolves when the operation completes.  Implementation of​  IMemoryManager.createMemory  Defined in​  packages/core/src/core/memory.ts:158    ","version":"Next","tagName":"h3"},{"title":"getMemoriesByRoomIds()​","type":1,"pageTitle":"Class: MemoryManager","url":"/eliza/api/classes/MemoryManager/#getmemoriesbyroomids","content":" getMemoriesByRoomIds(params): Promise&lt;Memory[]&gt;  Parameters​  • params  • params.agentId?: `${string}-${string}-${string}-${string}-${string}`  • params.roomIds: `${string}-${string}-${string}-${string}-${string}`[]  Returns​  Promise&lt;Memory[]&gt;  Implementation of​  IMemoryManager.getMemoriesByRoomIds  Defined in​  packages/core/src/core/memory.ts:172    ","version":"Next","tagName":"h3"},{"title":"getMemoryById()​","type":1,"pageTitle":"Class: MemoryManager","url":"/eliza/api/classes/MemoryManager/#getmemorybyid","content":" getMemoryById(id): Promise&lt;Memory&gt;  Parameters​  • id: `${string}-${string}-${string}-${string}-${string}`  Returns​  Promise&lt;Memory&gt;  Implementation of​  IMemoryManager.getMemoryById  Defined in​  packages/core/src/core/memory.ts:183    ","version":"Next","tagName":"h3"},{"title":"removeMemory()​","type":1,"pageTitle":"Class: MemoryManager","url":"/eliza/api/classes/MemoryManager/#removememory","content":" removeMemory(memoryId): Promise&lt;void&gt;  Removes a memory from the database by its ID.  Parameters​  • memoryId: `${string}-${string}-${string}-${string}-${string}`  The ID of the memory to remove.  Returns​  Promise&lt;void&gt;  A Promise that resolves when the operation completes.  Implementation of​  IMemoryManager.removeMemory  Defined in​  packages/core/src/core/memory.ts:193    ","version":"Next","tagName":"h3"},{"title":"removeAllMemories()​","type":1,"pageTitle":"Class: MemoryManager","url":"/eliza/api/classes/MemoryManager/#removeallmemories","content":" removeAllMemories(roomId): Promise&lt;void&gt;  Removes all memories associated with a set of user IDs.  Parameters​  • roomId: `${string}-${string}-${string}-${string}-${string}`  The room ID to remove memories for.  Returns​  Promise&lt;void&gt;  A Promise that resolves when the operation completes.  Implementation of​  IMemoryManager.removeAllMemories  Defined in​  packages/core/src/core/memory.ts:205    ","version":"Next","tagName":"h3"},{"title":"countMemories()​","type":1,"pageTitle":"Class: MemoryManager","url":"/eliza/api/classes/MemoryManager/#countmemories","content":" countMemories(roomId, unique): Promise&lt;number&gt;  Counts the number of memories associated with a set of user IDs, with an option for uniqueness.  Parameters​  • roomId: `${string}-${string}-${string}-${string}-${string}`  The room ID to count memories for.  • unique: boolean = true  Whether to count unique memories only.  Returns​  Promise&lt;number&gt;  A Promise resolving to the count of memories.  Implementation of​  IMemoryManager.countMemories  Defined in​  packages/core/src/core/memory.ts:218 ","version":"Next","tagName":"h3"},{"title":"Class: TokenProvider","type":0,"sectionRef":"#","url":"/eliza/api/classes/TokenProvider/","content":"","keywords":"","version":"Next"},{"title":"Constructors​","type":1,"pageTitle":"Class: TokenProvider","url":"/eliza/api/classes/TokenProvider/#constructors","content":" ","version":"Next","tagName":"h2"},{"title":"new TokenProvider()​","type":1,"pageTitle":"Class: TokenProvider","url":"/eliza/api/classes/TokenProvider/#new-tokenprovider","content":" new TokenProvider(tokenAddress): TokenProvider  Parameters​  • tokenAddress: string  Returns​  TokenProvider  Defined in​  packages/core/src/providers/token.ts:38  ","version":"Next","tagName":"h3"},{"title":"Methods​","type":1,"pageTitle":"Class: TokenProvider","url":"/eliza/api/classes/TokenProvider/#methods","content":" ","version":"Next","tagName":"h2"},{"title":"fetchTokenSecurity()​","type":1,"pageTitle":"Class: TokenProvider","url":"/eliza/api/classes/TokenProvider/#fetchtokensecurity","content":" fetchTokenSecurity(): Promise&lt;TokenSecurityData&gt;  Returns​  Promise&lt;TokenSecurityData&gt;  Defined in​  packages/core/src/providers/token.ts:166    ","version":"Next","tagName":"h3"},{"title":"fetchTokenTradeData()​","type":1,"pageTitle":"Class: TokenProvider","url":"/eliza/api/classes/TokenProvider/#fetchtokentradedata","content":" fetchTokenTradeData(): Promise&lt;TokenTradeData&gt;  Returns​  Promise&lt;TokenTradeData&gt;  Defined in​  packages/core/src/providers/token.ts:196    ","version":"Next","tagName":"h3"},{"title":"fetchDexScreenerData()​","type":1,"pageTitle":"Class: TokenProvider","url":"/eliza/api/classes/TokenProvider/#fetchdexscreenerdata","content":" fetchDexScreenerData(): Promise&lt;DexScreenerData&gt;  Returns​  Promise&lt;DexScreenerData&gt;  Defined in​  packages/core/src/providers/token.ts:431    ","version":"Next","tagName":"h3"},{"title":"analyzeHolderDistribution()​","type":1,"pageTitle":"Class: TokenProvider","url":"/eliza/api/classes/TokenProvider/#analyzeholderdistribution","content":" analyzeHolderDistribution(tradeData): Promise&lt;string&gt;  Parameters​  • tradeData: TokenTradeData  Returns​  Promise&lt;string&gt;  Defined in​  packages/core/src/providers/token.ts:472    ","version":"Next","tagName":"h3"},{"title":"fetchHolderList()​","type":1,"pageTitle":"Class: TokenProvider","url":"/eliza/api/classes/TokenProvider/#fetchholderlist","content":" fetchHolderList(): Promise&lt;HolderData[]&gt;  Returns​  Promise&lt;HolderData[]&gt;  Defined in​  packages/core/src/providers/token.ts:518    ","version":"Next","tagName":"h3"},{"title":"filterHighValueHolders()​","type":1,"pageTitle":"Class: TokenProvider","url":"/eliza/api/classes/TokenProvider/#filterhighvalueholders","content":" filterHighValueHolders(tradeData): Promise&lt;object[]&gt;  Parameters​  • tradeData: TokenTradeData  Returns​  Promise&lt;object[]&gt;  Defined in​  packages/core/src/providers/token.ts:618    ","version":"Next","tagName":"h3"},{"title":"checkRecentTrades()​","type":1,"pageTitle":"Class: TokenProvider","url":"/eliza/api/classes/TokenProvider/#checkrecenttrades","content":" checkRecentTrades(tradeData): Promise&lt;boolean&gt;  Parameters​  • tradeData: TokenTradeData  Returns​  Promise&lt;boolean&gt;  Defined in​  packages/core/src/providers/token.ts:642    ","version":"Next","tagName":"h3"},{"title":"countHighSupplyHolders()​","type":1,"pageTitle":"Class: TokenProvider","url":"/eliza/api/classes/TokenProvider/#counthighsupplyholders","content":" countHighSupplyHolders(securityData): Promise&lt;number&gt;  Parameters​  • securityData: TokenSecurityData  Returns​  Promise&lt;number&gt;  Defined in​  packages/core/src/providers/token.ts:646    ","version":"Next","tagName":"h3"},{"title":"getProcessedTokenData()​","type":1,"pageTitle":"Class: TokenProvider","url":"/eliza/api/classes/TokenProvider/#getprocessedtokendata","content":" getProcessedTokenData(): Promise&lt;ProcessedTokenData&gt;  Returns​  Promise&lt;ProcessedTokenData&gt;  Defined in​  packages/core/src/providers/token.ts:667    ","version":"Next","tagName":"h3"},{"title":"formatTokenData()​","type":1,"pageTitle":"Class: TokenProvider","url":"/eliza/api/classes/TokenProvider/#formattokendata","content":" formatTokenData(data): string  Parameters​  • data: ProcessedTokenData  Returns​  string  Defined in​  packages/core/src/providers/token.ts:733    ","version":"Next","tagName":"h3"},{"title":"getFormattedTokenReport()​","type":1,"pageTitle":"Class: TokenProvider","url":"/eliza/api/classes/TokenProvider/#getformattedtokenreport","content":" getFormattedTokenReport(): Promise&lt;string&gt;  Returns​  Promise&lt;string&gt;  Defined in​  packages/core/src/providers/token.ts:797 ","version":"Next","tagName":"h3"},{"title":"Class: TwitterPostClient","type":0,"sectionRef":"#","url":"/eliza/api/classes/TwitterPostClient/","content":"","keywords":"","version":"Next"},{"title":"Extends​","type":1,"pageTitle":"Class: TwitterPostClient","url":"/eliza/api/classes/TwitterPostClient/#extends","content":" ClientBase  ","version":"Next","tagName":"h2"},{"title":"Constructors​","type":1,"pageTitle":"Class: TwitterPostClient","url":"/eliza/api/classes/TwitterPostClient/#constructors","content":" ","version":"Next","tagName":"h2"},{"title":"new TwitterPostClient()​","type":1,"pageTitle":"Class: TwitterPostClient","url":"/eliza/api/classes/TwitterPostClient/#new-twitterpostclient","content":" new TwitterPostClient(runtime): TwitterPostClient  Parameters​  • runtime: IAgentRuntime  Returns​  TwitterPostClient  Overrides​  ClientBase.constructor  Defined in​  packages/core/src/clients/twitter/post.ts:41  ","version":"Next","tagName":"h3"},{"title":"Properties​","type":1,"pageTitle":"Class: TwitterPostClient","url":"/eliza/api/classes/TwitterPostClient/#properties","content":" ","version":"Next","tagName":"h2"},{"title":"_twitterClient​","type":1,"pageTitle":"Class: TwitterPostClient","url":"/eliza/api/classes/TwitterPostClient/#_twitterclient","content":" static _twitterClient: Scraper  Inherited from​  ClientBase._twitterClient  Defined in​  packages/core/src/clients/twitter/base.ts:86    ","version":"Next","tagName":"h3"},{"title":"twitterClient​","type":1,"pageTitle":"Class: TwitterPostClient","url":"/eliza/api/classes/TwitterPostClient/#twitterclient","content":" twitterClient: Scraper  Inherited from​  ClientBase.twitterClient  Defined in​  packages/core/src/clients/twitter/base.ts:87    ","version":"Next","tagName":"h3"},{"title":"runtime​","type":1,"pageTitle":"Class: TwitterPostClient","url":"/eliza/api/classes/TwitterPostClient/#runtime","content":" runtime: IAgentRuntime  Inherited from​  ClientBase.runtime  Defined in​  packages/core/src/clients/twitter/base.ts:88    ","version":"Next","tagName":"h3"},{"title":"directions​","type":1,"pageTitle":"Class: TwitterPostClient","url":"/eliza/api/classes/TwitterPostClient/#directions","content":" directions: string  Inherited from​  ClientBase.directions  Defined in​  packages/core/src/clients/twitter/base.ts:89    ","version":"Next","tagName":"h3"},{"title":"lastCheckedTweetId​","type":1,"pageTitle":"Class: TwitterPostClient","url":"/eliza/api/classes/TwitterPostClient/#lastcheckedtweetid","content":" lastCheckedTweetId: number = null  Inherited from​  ClientBase.lastCheckedTweetId  Defined in​  packages/core/src/clients/twitter/base.ts:90    ","version":"Next","tagName":"h3"},{"title":"tweetCacheFilePath​","type":1,"pageTitle":"Class: TwitterPostClient","url":"/eliza/api/classes/TwitterPostClient/#tweetcachefilepath","content":" tweetCacheFilePath: string = &quot;tweetcache/latest_checked_tweet_id.txt&quot;  Inherited from​  ClientBase.tweetCacheFilePath  Defined in​  packages/core/src/clients/twitter/base.ts:91    ","version":"Next","tagName":"h3"},{"title":"imageDescriptionService​","type":1,"pageTitle":"Class: TwitterPostClient","url":"/eliza/api/classes/TwitterPostClient/#imagedescriptionservice","content":" imageDescriptionService: ImageDescriptionService  Inherited from​  ClientBase.imageDescriptionService  Defined in​  packages/core/src/clients/twitter/base.ts:92    ","version":"Next","tagName":"h3"},{"title":"temperature​","type":1,"pageTitle":"Class: TwitterPostClient","url":"/eliza/api/classes/TwitterPostClient/#temperature","content":" temperature: number = 0.5  Inherited from​  ClientBase.temperature  Defined in​  packages/core/src/clients/twitter/base.ts:93    ","version":"Next","tagName":"h3"},{"title":"requestQueue​","type":1,"pageTitle":"Class: TwitterPostClient","url":"/eliza/api/classes/TwitterPostClient/#requestqueue","content":" requestQueue: RequestQueue  Inherited from​  ClientBase.requestQueue  Defined in​  packages/core/src/clients/twitter/base.ts:96    ","version":"Next","tagName":"h3"},{"title":"twitterUserId​","type":1,"pageTitle":"Class: TwitterPostClient","url":"/eliza/api/classes/TwitterPostClient/#twitteruserid","content":" twitterUserId: string  Inherited from​  ClientBase.twitterUserId  Defined in​  packages/core/src/clients/twitter/base.ts:97    ","version":"Next","tagName":"h3"},{"title":"callback()​","type":1,"pageTitle":"Class: TwitterPostClient","url":"/eliza/api/classes/TwitterPostClient/#callback","content":" callback: (self) =&gt; any = null  Parameters​  • self: ClientBase  Returns​  any  Inherited from​  ClientBase.callback  Defined in​  packages/core/src/clients/twitter/base.ts:150  ","version":"Next","tagName":"h3"},{"title":"Methods​","type":1,"pageTitle":"Class: TwitterPostClient","url":"/eliza/api/classes/TwitterPostClient/#methods","content":" ","version":"Next","tagName":"h2"},{"title":"cacheTweet()​","type":1,"pageTitle":"Class: TwitterPostClient","url":"/eliza/api/classes/TwitterPostClient/#cachetweet","content":" cacheTweet(tweet): Promise&lt;void&gt;  Parameters​  • tweet: Tweet  Returns​  Promise&lt;void&gt;  Inherited from​  ClientBase.cacheTweet  Defined in​  packages/core/src/clients/twitter/base.ts:99    ","version":"Next","tagName":"h3"},{"title":"getCachedTweet()​","type":1,"pageTitle":"Class: TwitterPostClient","url":"/eliza/api/classes/TwitterPostClient/#getcachedtweet","content":" getCachedTweet(tweetId): Promise&lt;Tweet&gt;  Parameters​  • tweetId: string  Returns​  Promise&lt;Tweet&gt;  Inherited from​  ClientBase.getCachedTweet  Defined in​  packages/core/src/clients/twitter/base.ts:115    ","version":"Next","tagName":"h3"},{"title":"getTweet()​","type":1,"pageTitle":"Class: TwitterPostClient","url":"/eliza/api/classes/TwitterPostClient/#gettweet","content":" getTweet(tweetId): Promise&lt;Tweet&gt;  Parameters​  • tweetId: string  Returns​  Promise&lt;Tweet&gt;  Inherited from​  ClientBase.getTweet  Defined in​  packages/core/src/clients/twitter/base.ts:137    ","version":"Next","tagName":"h3"},{"title":"fetchHomeTimeline()​","type":1,"pageTitle":"Class: TwitterPostClient","url":"/eliza/api/classes/TwitterPostClient/#fetchhometimeline","content":" fetchHomeTimeline(count): Promise&lt;Tweet[]&gt;  Parameters​  • count: number  Returns​  Promise&lt;Tweet[]&gt;  Inherited from​  ClientBase.fetchHomeTimeline  Defined in​  packages/core/src/clients/twitter/base.ts:278    ","version":"Next","tagName":"h3"},{"title":"fetchSearchTweets()​","type":1,"pageTitle":"Class: TwitterPostClient","url":"/eliza/api/classes/TwitterPostClient/#fetchsearchtweets","content":" fetchSearchTweets(query, maxTweets, searchMode, cursor?): Promise&lt;QueryTweetsResponse&gt;  Parameters​  • query: string  • maxTweets: number  • searchMode: SearchMode  • cursor?: string  Returns​  Promise&lt;QueryTweetsResponse&gt;  Inherited from​  ClientBase.fetchSearchTweets  Defined in​  packages/core/src/clients/twitter/base.ts:330    ","version":"Next","tagName":"h3"},{"title":"setCookiesFromArray()​","type":1,"pageTitle":"Class: TwitterPostClient","url":"/eliza/api/classes/TwitterPostClient/#setcookiesfromarray","content":" setCookiesFromArray(cookiesArray): Promise&lt;void&gt;  Parameters​  • cookiesArray: any[]  Returns​  Promise&lt;void&gt;  Inherited from​  ClientBase.setCookiesFromArray  Defined in​  packages/core/src/clients/twitter/base.ts:560    ","version":"Next","tagName":"h3"},{"title":"saveRequestMessage()​","type":1,"pageTitle":"Class: TwitterPostClient","url":"/eliza/api/classes/TwitterPostClient/#saverequestmessage","content":" saveRequestMessage(message, state): Promise&lt;void&gt;  Parameters​  • message: Memory  • state: State  Returns​  Promise&lt;void&gt;  Inherited from​  ClientBase.saveRequestMessage  Defined in​  packages/core/src/clients/twitter/base.ts:572    ","version":"Next","tagName":"h3"},{"title":"onReady()​","type":1,"pageTitle":"Class: TwitterPostClient","url":"/eliza/api/classes/TwitterPostClient/#onready","content":" onReady(): void  Returns​  void  Overrides​  ClientBase.onReady  Defined in​  packages/core/src/clients/twitter/post.ts:28 ","version":"Next","tagName":"h3"},{"title":"Function: formatActions()","type":0,"sectionRef":"#","url":"/eliza/api/functions/formatActions/","content":"","keywords":"","version":"Next"},{"title":"Parameters​","type":1,"pageTitle":"Function: formatActions()","url":"/eliza/api/functions/formatActions/#parameters","content":" • actions: Action[]  An array of Action objects to format.  ","version":"Next","tagName":"h2"},{"title":"Returns​","type":1,"pageTitle":"Function: formatActions()","url":"/eliza/api/functions/formatActions/#returns","content":" string  A detailed string of actions, including names and descriptions.  ","version":"Next","tagName":"h2"},{"title":"Defined in​","type":1,"pageTitle":"Function: formatActions()","url":"/eliza/api/functions/formatActions/#defined-in","content":" packages/core/src/core/actions.ts:66 ","version":"Next","tagName":"h2"},{"title":"Enumeration: GoalStatus","type":0,"sectionRef":"#","url":"/eliza/api/enumerations/GoalStatus/","content":"","keywords":"","version":"Next"},{"title":"Enumeration Members​","type":1,"pageTitle":"Enumeration: GoalStatus","url":"/eliza/api/enumerations/GoalStatus/#enumeration-members","content":" ","version":"Next","tagName":"h2"},{"title":"DONE​","type":1,"pageTitle":"Enumeration: GoalStatus","url":"/eliza/api/enumerations/GoalStatus/#done","content":" DONE: &quot;DONE&quot;  Defined in​  packages/core/src/core/types.ts:58    ","version":"Next","tagName":"h3"},{"title":"FAILED​","type":1,"pageTitle":"Enumeration: GoalStatus","url":"/eliza/api/enumerations/GoalStatus/#failed","content":" FAILED: &quot;FAILED&quot;  Defined in​  packages/core/src/core/types.ts:59    ","version":"Next","tagName":"h3"},{"title":"IN_PROGRESS​","type":1,"pageTitle":"Enumeration: GoalStatus","url":"/eliza/api/enumerations/GoalStatus/#in_progress","content":" IN_PROGRESS: &quot;IN_PROGRESS&quot;  Defined in​  packages/core/src/core/types.ts:60 ","version":"Next","tagName":"h3"},{"title":"Enumeration: ModelProvider","type":0,"sectionRef":"#","url":"/eliza/api/enumerations/ModelProvider/","content":"","keywords":"","version":"Next"},{"title":"Enumeration Members​","type":1,"pageTitle":"Enumeration: ModelProvider","url":"/eliza/api/enumerations/ModelProvider/#enumeration-members","content":" ","version":"Next","tagName":"h2"},{"title":"OPENAI​","type":1,"pageTitle":"Enumeration: ModelProvider","url":"/eliza/api/enumerations/ModelProvider/#openai","content":" OPENAI: &quot;openai&quot;  Defined in​  packages/core/src/core/types.ts:115    ","version":"Next","tagName":"h3"},{"title":"ANTHROPIC​","type":1,"pageTitle":"Enumeration: ModelProvider","url":"/eliza/api/enumerations/ModelProvider/#anthropic","content":" ANTHROPIC: &quot;anthropic&quot;  Defined in​  packages/core/src/core/types.ts:116    ","version":"Next","tagName":"h3"},{"title":"GROK​","type":1,"pageTitle":"Enumeration: ModelProvider","url":"/eliza/api/enumerations/ModelProvider/#grok","content":" GROK: &quot;grok&quot;  Defined in​  packages/core/src/core/types.ts:117    ","version":"Next","tagName":"h3"},{"title":"GROQ​","type":1,"pageTitle":"Enumeration: ModelProvider","url":"/eliza/api/enumerations/ModelProvider/#groq","content":" GROQ: &quot;groq&quot;  Defined in​  packages/core/src/core/types.ts:118    ","version":"Next","tagName":"h3"},{"title":"LLAMACLOUD​","type":1,"pageTitle":"Enumeration: ModelProvider","url":"/eliza/api/enumerations/ModelProvider/#llamacloud","content":" LLAMACLOUD: &quot;llama_cloud&quot;  Defined in​  packages/core/src/core/types.ts:119    ","version":"Next","tagName":"h3"},{"title":"LLAMALOCAL​","type":1,"pageTitle":"Enumeration: ModelProvider","url":"/eliza/api/enumerations/ModelProvider/#llamalocal","content":" LLAMALOCAL: &quot;llama_local&quot;  Defined in​  packages/core/src/core/types.ts:120    ","version":"Next","tagName":"h3"},{"title":"GOOGLE​","type":1,"pageTitle":"Enumeration: ModelProvider","url":"/eliza/api/enumerations/ModelProvider/#google","content":" GOOGLE: &quot;google&quot;  Defined in​  packages/core/src/core/types.ts:121    ","version":"Next","tagName":"h3"},{"title":"CLAUDE_VERTEX​","type":1,"pageTitle":"Enumeration: ModelProvider","url":"/eliza/api/enumerations/ModelProvider/#claude_vertex","content":" CLAUDE_VERTEX: &quot;claude_vertex&quot;  Defined in​  packages/core/src/core/types.ts:122    ","version":"Next","tagName":"h3"},{"title":"REDPILL​","type":1,"pageTitle":"Enumeration: ModelProvider","url":"/eliza/api/enumerations/ModelProvider/#redpill","content":" REDPILL: &quot;redpill&quot;  Defined in​  packages/core/src/core/types.ts:123    ","version":"Next","tagName":"h3"},{"title":"OLLAMA​","type":1,"pageTitle":"Enumeration: ModelProvider","url":"/eliza/api/enumerations/ModelProvider/#ollama","content":" OLLAMA: &quot;ollama&quot;  Defined in​  packages/core/src/core/types.ts:124 ","version":"Next","tagName":"h3"},{"title":"Function: formatActionNames()","type":0,"sectionRef":"#","url":"/eliza/api/functions/formatActionNames/","content":"","keywords":"","version":"Next"},{"title":"Parameters​","type":1,"pageTitle":"Function: formatActionNames()","url":"/eliza/api/functions/formatActionNames/#parameters","content":" • actions: Action[]  An array of Action objects from which to extract names.  ","version":"Next","tagName":"h2"},{"title":"Returns​","type":1,"pageTitle":"Function: formatActionNames()","url":"/eliza/api/functions/formatActionNames/#returns","content":" string  A comma-separated string of action names.  ","version":"Next","tagName":"h2"},{"title":"Defined in​","type":1,"pageTitle":"Function: formatActionNames()","url":"/eliza/api/functions/formatActionNames/#defined-in","content":" packages/core/src/core/actions.ts:54 ","version":"Next","tagName":"h2"},{"title":"Class: TwitterSearchClient","type":0,"sectionRef":"#","url":"/eliza/api/classes/TwitterSearchClient/","content":"","keywords":"","version":"Next"},{"title":"Extends​","type":1,"pageTitle":"Class: TwitterSearchClient","url":"/eliza/api/classes/TwitterSearchClient/#extends","content":" ClientBase  ","version":"Next","tagName":"h2"},{"title":"Constructors​","type":1,"pageTitle":"Class: TwitterSearchClient","url":"/eliza/api/classes/TwitterSearchClient/#constructors","content":" ","version":"Next","tagName":"h2"},{"title":"new TwitterSearchClient()​","type":1,"pageTitle":"Class: TwitterSearchClient","url":"/eliza/api/classes/TwitterSearchClient/#new-twittersearchclient","content":" new TwitterSearchClient(runtime): TwitterSearchClient  Parameters​  • runtime: IAgentRuntime  Returns​  TwitterSearchClient  Overrides​  ClientBase.constructor  Defined in​  packages/core/src/clients/twitter/search.ts:53  ","version":"Next","tagName":"h3"},{"title":"Properties​","type":1,"pageTitle":"Class: TwitterSearchClient","url":"/eliza/api/classes/TwitterSearchClient/#properties","content":" ","version":"Next","tagName":"h2"},{"title":"_twitterClient​","type":1,"pageTitle":"Class: TwitterSearchClient","url":"/eliza/api/classes/TwitterSearchClient/#_twitterclient","content":" static _twitterClient: Scraper  Inherited from​  ClientBase._twitterClient  Defined in​  packages/core/src/clients/twitter/base.ts:86    ","version":"Next","tagName":"h3"},{"title":"twitterClient​","type":1,"pageTitle":"Class: TwitterSearchClient","url":"/eliza/api/classes/TwitterSearchClient/#twitterclient","content":" twitterClient: Scraper  Inherited from​  ClientBase.twitterClient  Defined in​  packages/core/src/clients/twitter/base.ts:87    ","version":"Next","tagName":"h3"},{"title":"runtime​","type":1,"pageTitle":"Class: TwitterSearchClient","url":"/eliza/api/classes/TwitterSearchClient/#runtime","content":" runtime: IAgentRuntime  Inherited from​  ClientBase.runtime  Defined in​  packages/core/src/clients/twitter/base.ts:88    ","version":"Next","tagName":"h3"},{"title":"directions​","type":1,"pageTitle":"Class: TwitterSearchClient","url":"/eliza/api/classes/TwitterSearchClient/#directions","content":" directions: string  Inherited from​  ClientBase.directions  Defined in​  packages/core/src/clients/twitter/base.ts:89    ","version":"Next","tagName":"h3"},{"title":"lastCheckedTweetId​","type":1,"pageTitle":"Class: TwitterSearchClient","url":"/eliza/api/classes/TwitterSearchClient/#lastcheckedtweetid","content":" lastCheckedTweetId: number = null  Inherited from​  ClientBase.lastCheckedTweetId  Defined in​  packages/core/src/clients/twitter/base.ts:90    ","version":"Next","tagName":"h3"},{"title":"tweetCacheFilePath​","type":1,"pageTitle":"Class: TwitterSearchClient","url":"/eliza/api/classes/TwitterSearchClient/#tweetcachefilepath","content":" tweetCacheFilePath: string = &quot;tweetcache/latest_checked_tweet_id.txt&quot;  Inherited from​  ClientBase.tweetCacheFilePath  Defined in​  packages/core/src/clients/twitter/base.ts:91    ","version":"Next","tagName":"h3"},{"title":"imageDescriptionService​","type":1,"pageTitle":"Class: TwitterSearchClient","url":"/eliza/api/classes/TwitterSearchClient/#imagedescriptionservice","content":" imageDescriptionService: ImageDescriptionService  Inherited from​  ClientBase.imageDescriptionService  Defined in​  packages/core/src/clients/twitter/base.ts:92    ","version":"Next","tagName":"h3"},{"title":"temperature​","type":1,"pageTitle":"Class: TwitterSearchClient","url":"/eliza/api/classes/TwitterSearchClient/#temperature","content":" temperature: number = 0.5  Inherited from​  ClientBase.temperature  Defined in​  packages/core/src/clients/twitter/base.ts:93    ","version":"Next","tagName":"h3"},{"title":"requestQueue​","type":1,"pageTitle":"Class: TwitterSearchClient","url":"/eliza/api/classes/TwitterSearchClient/#requestqueue","content":" requestQueue: RequestQueue  Inherited from​  ClientBase.requestQueue  Defined in​  packages/core/src/clients/twitter/base.ts:96    ","version":"Next","tagName":"h3"},{"title":"twitterUserId​","type":1,"pageTitle":"Class: TwitterSearchClient","url":"/eliza/api/classes/TwitterSearchClient/#twitteruserid","content":" twitterUserId: string  Inherited from​  ClientBase.twitterUserId  Defined in​  packages/core/src/clients/twitter/base.ts:97    ","version":"Next","tagName":"h3"},{"title":"callback()​","type":1,"pageTitle":"Class: TwitterSearchClient","url":"/eliza/api/classes/TwitterSearchClient/#callback","content":" callback: (self) =&gt; any = null  Parameters​  • self: ClientBase  Returns​  any  Inherited from​  ClientBase.callback  Defined in​  packages/core/src/clients/twitter/base.ts:150  ","version":"Next","tagName":"h3"},{"title":"Methods​","type":1,"pageTitle":"Class: TwitterSearchClient","url":"/eliza/api/classes/TwitterSearchClient/#methods","content":" ","version":"Next","tagName":"h2"},{"title":"cacheTweet()​","type":1,"pageTitle":"Class: TwitterSearchClient","url":"/eliza/api/classes/TwitterSearchClient/#cachetweet","content":" cacheTweet(tweet): Promise&lt;void&gt;  Parameters​  • tweet: Tweet  Returns​  Promise&lt;void&gt;  Inherited from​  ClientBase.cacheTweet  Defined in​  packages/core/src/clients/twitter/base.ts:99    ","version":"Next","tagName":"h3"},{"title":"getCachedTweet()​","type":1,"pageTitle":"Class: TwitterSearchClient","url":"/eliza/api/classes/TwitterSearchClient/#getcachedtweet","content":" getCachedTweet(tweetId): Promise&lt;Tweet&gt;  Parameters​  • tweetId: string  Returns​  Promise&lt;Tweet&gt;  Inherited from​  ClientBase.getCachedTweet  Defined in​  packages/core/src/clients/twitter/base.ts:115    ","version":"Next","tagName":"h3"},{"title":"getTweet()​","type":1,"pageTitle":"Class: TwitterSearchClient","url":"/eliza/api/classes/TwitterSearchClient/#gettweet","content":" getTweet(tweetId): Promise&lt;Tweet&gt;  Parameters​  • tweetId: string  Returns​  Promise&lt;Tweet&gt;  Inherited from​  ClientBase.getTweet  Defined in​  packages/core/src/clients/twitter/base.ts:137    ","version":"Next","tagName":"h3"},{"title":"fetchHomeTimeline()​","type":1,"pageTitle":"Class: TwitterSearchClient","url":"/eliza/api/classes/TwitterSearchClient/#fetchhometimeline","content":" fetchHomeTimeline(count): Promise&lt;Tweet[]&gt;  Parameters​  • count: number  Returns​  Promise&lt;Tweet[]&gt;  Inherited from​  ClientBase.fetchHomeTimeline  Defined in​  packages/core/src/clients/twitter/base.ts:278    ","version":"Next","tagName":"h3"},{"title":"fetchSearchTweets()​","type":1,"pageTitle":"Class: TwitterSearchClient","url":"/eliza/api/classes/TwitterSearchClient/#fetchsearchtweets","content":" fetchSearchTweets(query, maxTweets, searchMode, cursor?): Promise&lt;QueryTweetsResponse&gt;  Parameters​  • query: string  • maxTweets: number  • searchMode: SearchMode  • cursor?: string  Returns​  Promise&lt;QueryTweetsResponse&gt;  Inherited from​  ClientBase.fetchSearchTweets  Defined in​  packages/core/src/clients/twitter/base.ts:330    ","version":"Next","tagName":"h3"},{"title":"setCookiesFromArray()​","type":1,"pageTitle":"Class: TwitterSearchClient","url":"/eliza/api/classes/TwitterSearchClient/#setcookiesfromarray","content":" setCookiesFromArray(cookiesArray): Promise&lt;void&gt;  Parameters​  • cookiesArray: any[]  Returns​  Promise&lt;void&gt;  Inherited from​  ClientBase.setCookiesFromArray  Defined in​  packages/core/src/clients/twitter/base.ts:560    ","version":"Next","tagName":"h3"},{"title":"saveRequestMessage()​","type":1,"pageTitle":"Class: TwitterSearchClient","url":"/eliza/api/classes/TwitterSearchClient/#saverequestmessage","content":" saveRequestMessage(message, state): Promise&lt;void&gt;  Parameters​  • message: Memory  • state: State  Returns​  Promise&lt;void&gt;  Inherited from​  ClientBase.saveRequestMessage  Defined in​  packages/core/src/clients/twitter/base.ts:572    ","version":"Next","tagName":"h3"},{"title":"onReady()​","type":1,"pageTitle":"Class: TwitterSearchClient","url":"/eliza/api/classes/TwitterSearchClient/#onready","content":" onReady(): Promise&lt;void&gt;  Returns​  Promise&lt;void&gt;  Overrides​  ClientBase.onReady  Defined in​  packages/core/src/clients/twitter/search.ts:60 ","version":"Next","tagName":"h3"},{"title":"Function: formatEvaluatorExampleDescriptions()","type":0,"sectionRef":"#","url":"/eliza/api/functions/formatEvaluatorExampleDescriptions/","content":"","keywords":"","version":"Next"},{"title":"Parameters​","type":1,"pageTitle":"Function: formatEvaluatorExampleDescriptions()","url":"/eliza/api/functions/formatEvaluatorExampleDescriptions/#parameters","content":" • evaluators: Evaluator[]  An array of evaluator objects, each containing examples.  ","version":"Next","tagName":"h2"},{"title":"Returns​","type":1,"pageTitle":"Function: formatEvaluatorExampleDescriptions()","url":"/eliza/api/functions/formatEvaluatorExampleDescriptions/#returns","content":" string  A string that summarizes the descriptions for each evaluator example, formatted with the evaluator name, example number, and description.  ","version":"Next","tagName":"h2"},{"title":"Defined in​","type":1,"pageTitle":"Function: formatEvaluatorExampleDescriptions()","url":"/eliza/api/functions/formatEvaluatorExampleDescriptions/#defined-in","content":" packages/core/src/core/evaluators.ts:114 ","version":"Next","tagName":"h2"},{"title":"Function: formatTimestamp()","type":0,"sectionRef":"#","url":"/eliza/api/functions/formatTimestamp/","content":"","keywords":"","version":"Next"},{"title":"Parameters​","type":1,"pageTitle":"Function: formatTimestamp()","url":"/eliza/api/functions/formatTimestamp/#parameters","content":" • messageDate: number  ","version":"Next","tagName":"h2"},{"title":"Returns​","type":1,"pageTitle":"Function: formatTimestamp()","url":"/eliza/api/functions/formatTimestamp/#returns","content":" string  ","version":"Next","tagName":"h2"},{"title":"Defined in​","type":1,"pageTitle":"Function: formatTimestamp()","url":"/eliza/api/functions/formatTimestamp/#defined-in","content":" packages/core/src/core/messages.ts:94 ","version":"Next","tagName":"h2"},{"title":"Function: formatEvaluatorNames()","type":0,"sectionRef":"#","url":"/eliza/api/functions/formatEvaluatorNames/","content":"","keywords":"","version":"Next"},{"title":"Parameters​","type":1,"pageTitle":"Function: formatEvaluatorNames()","url":"/eliza/api/functions/formatEvaluatorNames/#parameters","content":" • evaluators: Evaluator[]  An array of evaluator objects.  ","version":"Next","tagName":"h2"},{"title":"Returns​","type":1,"pageTitle":"Function: formatEvaluatorNames()","url":"/eliza/api/functions/formatEvaluatorNames/#returns","content":" string  A string that concatenates the names of all evaluators, each enclosed in single quotes and separated by commas.  ","version":"Next","tagName":"h2"},{"title":"Defined in​","type":1,"pageTitle":"Function: formatEvaluatorNames()","url":"/eliza/api/functions/formatEvaluatorNames/#defined-in","content":" packages/core/src/core/evaluators.ts:34 ","version":"Next","tagName":"h2"},{"title":"Function: formatActors()","type":0,"sectionRef":"#","url":"/eliza/api/functions/formatActors/","content":"","keywords":"","version":"Next"},{"title":"Parameters​","type":1,"pageTitle":"Function: formatActors()","url":"/eliza/api/functions/formatActors/#parameters","content":" • actors  list of actors  • actors.actors: Actor[]  ","version":"Next","tagName":"h2"},{"title":"Returns​","type":1,"pageTitle":"Function: formatActors()","url":"/eliza/api/functions/formatActors/#returns","content":" string  string  ","version":"Next","tagName":"h2"},{"title":"Defined in​","type":1,"pageTitle":"Function: formatActors()","url":"/eliza/api/functions/formatActors/#defined-in","content":" packages/core/src/core/messages.ts:45 ","version":"Next","tagName":"h2"},{"title":"Function: formatEvaluatorExamples()","type":0,"sectionRef":"#","url":"/eliza/api/functions/formatEvaluatorExamples/","content":"","keywords":"","version":"Next"},{"title":"Parameters​","type":1,"pageTitle":"Function: formatEvaluatorExamples()","url":"/eliza/api/functions/formatEvaluatorExamples/#parameters","content":" • evaluators: Evaluator[]  An array of evaluator objects, each containing examples to format.  ","version":"Next","tagName":"h2"},{"title":"Returns​","type":1,"pageTitle":"Function: formatEvaluatorExamples()","url":"/eliza/api/functions/formatEvaluatorExamples/#returns","content":" string  A string that presents each evaluator example in a structured format, including context, messages, and outcomes, with placeholders replaced by generated names.  ","version":"Next","tagName":"h2"},{"title":"Defined in​","type":1,"pageTitle":"Function: formatEvaluatorExamples()","url":"/eliza/api/functions/formatEvaluatorExamples/#defined-in","content":" packages/core/src/core/evaluators.ts:59 ","version":"Next","tagName":"h2"},{"title":"Function: formatGoalsAsString()","type":0,"sectionRef":"#","url":"/eliza/api/functions/formatGoalsAsString/","content":"","keywords":"","version":"Next"},{"title":"Parameters​","type":1,"pageTitle":"Function: formatGoalsAsString()","url":"/eliza/api/functions/formatGoalsAsString/#parameters","content":" • __namedParameters  • __namedParameters.goals: Goal[]  ","version":"Next","tagName":"h2"},{"title":"Returns​","type":1,"pageTitle":"Function: formatGoalsAsString()","url":"/eliza/api/functions/formatGoalsAsString/#returns","content":" string  ","version":"Next","tagName":"h2"},{"title":"Defined in​","type":1,"pageTitle":"Function: formatGoalsAsString()","url":"/eliza/api/functions/formatGoalsAsString/#defined-in","content":" packages/core/src/core/goals.ts:29 ","version":"Next","tagName":"h2"},{"title":"Function: formatMessages()","type":0,"sectionRef":"#","url":"/eliza/api/functions/formatMessages/","content":"","keywords":"","version":"Next"},{"title":"Parameters​","type":1,"pageTitle":"Function: formatMessages()","url":"/eliza/api/functions/formatMessages/#parameters","content":" • __namedParameters  • __namedParameters.messages: Memory[]  • __namedParameters.actors: Actor[]  ","version":"Next","tagName":"h2"},{"title":"Returns​","type":1,"pageTitle":"Function: formatMessages()","url":"/eliza/api/functions/formatMessages/#returns","content":" string  string  ","version":"Next","tagName":"h2"},{"title":"Defined in​","type":1,"pageTitle":"Function: formatMessages()","url":"/eliza/api/functions/formatMessages/#defined-in","content":" packages/core/src/core/messages.ts:60 ","version":"Next","tagName":"h2"},{"title":"Function: formatPosts()","type":0,"sectionRef":"#","url":"/eliza/api/functions/formatPosts/","content":"","keywords":"","version":"Next"},{"title":"Parameters​","type":1,"pageTitle":"Function: formatPosts()","url":"/eliza/api/functions/formatPosts/#parameters","content":" • __namedParameters  • __namedParameters.messages: Memory[]  • __namedParameters.actors: Actor[]  • __namedParameters.conversationHeader?: boolean = true  ","version":"Next","tagName":"h2"},{"title":"Returns​","type":1,"pageTitle":"Function: formatPosts()","url":"/eliza/api/functions/formatPosts/#returns","content":" string  ","version":"Next","tagName":"h2"},{"title":"Defined in​","type":1,"pageTitle":"Function: formatPosts()","url":"/eliza/api/functions/formatPosts/#defined-in","content":" packages/core/src/core/posts.ts:4 ","version":"Next","tagName":"h2"},{"title":"Function: formatRelationships()","type":0,"sectionRef":"#","url":"/eliza/api/functions/formatRelationships/","content":"","keywords":"","version":"Next"},{"title":"Parameters​","type":1,"pageTitle":"Function: formatRelationships()","url":"/eliza/api/functions/formatRelationships/#parameters","content":" • __namedParameters  • __namedParameters.runtime: IAgentRuntime  • __namedParameters.userId: `${string}-${string}-${string}-${string}-${string}`  ","version":"Next","tagName":"h2"},{"title":"Returns​","type":1,"pageTitle":"Function: formatRelationships()","url":"/eliza/api/functions/formatRelationships/#returns","content":" Promise&lt;`${string}-${string}-${string}-${string}-${string}`[]&gt;  ","version":"Next","tagName":"h2"},{"title":"Defined in​","type":1,"pageTitle":"Function: formatRelationships()","url":"/eliza/api/functions/formatRelationships/#defined-in","content":" packages/core/src/core/relationships.ts:43 ","version":"Next","tagName":"h2"},{"title":"Function: generateCaption()","type":0,"sectionRef":"#","url":"/eliza/api/functions/generateCaption/","content":"","keywords":"","version":"Next"},{"title":"Parameters​","type":1,"pageTitle":"Function: generateCaption()","url":"/eliza/api/functions/generateCaption/#parameters","content":" • data  • data.imageUrl: string  • runtime: IAgentRuntime  ","version":"Next","tagName":"h2"},{"title":"Returns​","type":1,"pageTitle":"Function: generateCaption()","url":"/eliza/api/functions/generateCaption/#returns","content":" Promise&lt;object&gt;  ","version":"Next","tagName":"h2"},{"title":"title​","type":1,"pageTitle":"Function: generateCaption()","url":"/eliza/api/functions/generateCaption/#title","content":" title: string  ","version":"Next","tagName":"h3"},{"title":"description​","type":1,"pageTitle":"Function: generateCaption()","url":"/eliza/api/functions/generateCaption/#description","content":" description: string  ","version":"Next","tagName":"h3"},{"title":"Defined in​","type":1,"pageTitle":"Function: generateCaption()","url":"/eliza/api/functions/generateCaption/#defined-in","content":" packages/core/src/actions/imageGenerationUtils.ts:90 ","version":"Next","tagName":"h2"},{"title":"Function: formatEvaluators()","type":0,"sectionRef":"#","url":"/eliza/api/functions/formatEvaluators/","content":"","keywords":"","version":"Next"},{"title":"Parameters​","type":1,"pageTitle":"Function: formatEvaluators()","url":"/eliza/api/functions/formatEvaluators/#parameters","content":" • evaluators: Evaluator[]  An array of evaluator objects.  ","version":"Next","tagName":"h2"},{"title":"Returns​","type":1,"pageTitle":"Function: formatEvaluators()","url":"/eliza/api/functions/formatEvaluators/#returns","content":" string  A string that concatenates the name and description of each evaluator, separated by a colon and a newline character.  ","version":"Next","tagName":"h2"},{"title":"Defined in​","type":1,"pageTitle":"Function: formatEvaluators()","url":"/eliza/api/functions/formatEvaluators/#defined-in","content":" packages/core/src/core/evaluators.ts:45 ","version":"Next","tagName":"h2"},{"title":"Function: getEndpoint()","type":0,"sectionRef":"#","url":"/eliza/api/functions/getEndpoint/","content":"","keywords":"","version":"Next"},{"title":"Parameters​","type":1,"pageTitle":"Function: getEndpoint()","url":"/eliza/api/functions/getEndpoint/#parameters","content":" • provider: ModelProvider  ","version":"Next","tagName":"h2"},{"title":"Returns​","type":1,"pageTitle":"Function: getEndpoint()","url":"/eliza/api/functions/getEndpoint/#returns","content":" string  ","version":"Next","tagName":"h2"},{"title":"Defined in​","type":1,"pageTitle":"Function: getEndpoint()","url":"/eliza/api/functions/getEndpoint/#defined-in","content":" packages/core/src/core/models.ts:183 ","version":"Next","tagName":"h2"},{"title":"Function: generateMessageResponse()","type":0,"sectionRef":"#","url":"/eliza/api/functions/generateMessageResponse/","content":"","keywords":"","version":"Next"},{"title":"Parameters​","type":1,"pageTitle":"Function: generateMessageResponse()","url":"/eliza/api/functions/generateMessageResponse/#parameters","content":" • opts  The options for the generateText request.  • opts.runtime: IAgentRuntime  • opts.context: string  The context of the message to be completed.  • opts.modelClass: string  ","version":"Next","tagName":"h2"},{"title":"Returns​","type":1,"pageTitle":"Function: generateMessageResponse()","url":"/eliza/api/functions/generateMessageResponse/#returns","content":" Promise&lt;Content&gt;  The completed message.  ","version":"Next","tagName":"h2"},{"title":"Defined in​","type":1,"pageTitle":"Function: generateMessageResponse()","url":"/eliza/api/functions/generateMessageResponse/#defined-in","content":" packages/core/src/core/generation.ts:549 ","version":"Next","tagName":"h2"},{"title":"Function: generateTextArray()","type":0,"sectionRef":"#","url":"/eliza/api/functions/generateTextArray/","content":"","keywords":"","version":"Next"},{"title":"Parameters​","type":1,"pageTitle":"Function: generateTextArray()","url":"/eliza/api/functions/generateTextArray/#parameters","content":" • opts  The options for the generateText request  • opts.runtime: IAgentRuntime  • opts.context: string  The context/prompt to send to the model  • opts.modelClass: string  ","version":"Next","tagName":"h2"},{"title":"Returns​","type":1,"pageTitle":"Function: generateTextArray()","url":"/eliza/api/functions/generateTextArray/#returns","content":" Promise&lt;string[]&gt;  Promise resolving to an array of strings parsed from the model's response  ","version":"Next","tagName":"h2"},{"title":"Defined in​","type":1,"pageTitle":"Function: generateTextArray()","url":"/eliza/api/functions/generateTextArray/#defined-in","content":" packages/core/src/core/generation.ts:429 ","version":"Next","tagName":"h2"},{"title":"Function: getActorDetails()","type":0,"sectionRef":"#","url":"/eliza/api/functions/getActorDetails/","content":"","keywords":"","version":"Next"},{"title":"Parameters​","type":1,"pageTitle":"Function: getActorDetails()","url":"/eliza/api/functions/getActorDetails/#parameters","content":" • __namedParameters  • __namedParameters.runtime: IAgentRuntime  • __namedParameters.roomId: `${string}-${string}-${string}-${string}-${string}`  ","version":"Next","tagName":"h2"},{"title":"Returns​","type":1,"pageTitle":"Function: getActorDetails()","url":"/eliza/api/functions/getActorDetails/#returns","content":" Promise&lt;Actor[]&gt;  ","version":"Next","tagName":"h2"},{"title":"Defined in​","type":1,"pageTitle":"Function: getActorDetails()","url":"/eliza/api/functions/getActorDetails/#defined-in","content":" packages/core/src/core/messages.ts:12 ","version":"Next","tagName":"h2"},{"title":"Function: generateObjectArray()","type":0,"sectionRef":"#","url":"/eliza/api/functions/generateObjectArray/","content":"","keywords":"","version":"Next"},{"title":"Parameters​","type":1,"pageTitle":"Function: generateObjectArray()","url":"/eliza/api/functions/generateObjectArray/#parameters","content":" • __namedParameters  • __namedParameters.runtime: IAgentRuntime  • __namedParameters.context: string  • __namedParameters.modelClass: string  ","version":"Next","tagName":"h2"},{"title":"Returns​","type":1,"pageTitle":"Function: generateObjectArray()","url":"/eliza/api/functions/generateObjectArray/#returns","content":" Promise&lt;any[]&gt;  ","version":"Next","tagName":"h2"},{"title":"Defined in​","type":1,"pageTitle":"Function: generateObjectArray()","url":"/eliza/api/functions/generateObjectArray/#defined-in","content":" packages/core/src/core/generation.ts:501 ","version":"Next","tagName":"h2"},{"title":"Function: getGoals()","type":0,"sectionRef":"#","url":"/eliza/api/functions/getGoals/","content":"","keywords":"","version":"Next"},{"title":"Parameters​","type":1,"pageTitle":"Function: getGoals()","url":"/eliza/api/functions/getGoals/#parameters","content":" • __namedParameters  • __namedParameters.runtime: IAgentRuntime  • __namedParameters.roomId: `${string}-${string}-${string}-${string}-${string}`  • __namedParameters.userId?: `${string}-${string}-${string}-${string}-${string}`  • __namedParameters.onlyInProgress?: boolean = true  • __namedParameters.count?: number = 5  ","version":"Next","tagName":"h2"},{"title":"Returns​","type":1,"pageTitle":"Function: getGoals()","url":"/eliza/api/functions/getGoals/#returns","content":" Promise&lt;Goal[]&gt;  ","version":"Next","tagName":"h2"},{"title":"Defined in​","type":1,"pageTitle":"Function: getGoals()","url":"/eliza/api/functions/getGoals/#defined-in","content":" packages/core/src/core/goals.ts:8 ","version":"Next","tagName":"h2"},{"title":"Function: generateImage()","type":0,"sectionRef":"#","url":"/eliza/api/functions/generateImage/","content":"","keywords":"","version":"Next"},{"title":"Parameters​","type":1,"pageTitle":"Function: generateImage()","url":"/eliza/api/functions/generateImage/#parameters","content":" • data  • data.prompt: string  • data.width: number  • data.height: number  • data.count?: number  • runtime: IAgentRuntime  ","version":"Next","tagName":"h2"},{"title":"Returns​","type":1,"pageTitle":"Function: generateImage()","url":"/eliza/api/functions/generateImage/#returns","content":" Promise&lt;object&gt;  ","version":"Next","tagName":"h2"},{"title":"success​","type":1,"pageTitle":"Function: generateImage()","url":"/eliza/api/functions/generateImage/#success","content":" success: boolean  ","version":"Next","tagName":"h3"},{"title":"data?​","type":1,"pageTitle":"Function: generateImage()","url":"/eliza/api/functions/generateImage/#data","content":" optional data: string[]  ","version":"Next","tagName":"h3"},{"title":"error?​","type":1,"pageTitle":"Function: generateImage()","url":"/eliza/api/functions/generateImage/#error","content":" optional error: any  ","version":"Next","tagName":"h3"},{"title":"Defined in​","type":1,"pageTitle":"Function: generateImage()","url":"/eliza/api/functions/generateImage/#defined-in","content":" packages/core/src/actions/imageGenerationUtils.ts:8 ","version":"Next","tagName":"h2"},{"title":"Class: AgentRuntime","type":0,"sectionRef":"#","url":"/eliza/api/classes/AgentRuntime/","content":"","keywords":"","version":"Next"},{"title":"Implements​","type":1,"pageTitle":"Class: AgentRuntime","url":"/eliza/api/classes/AgentRuntime/#implements","content":" IAgentRuntime  ","version":"Next","tagName":"h2"},{"title":"Constructors​","type":1,"pageTitle":"Class: AgentRuntime","url":"/eliza/api/classes/AgentRuntime/#constructors","content":" ","version":"Next","tagName":"h2"},{"title":"new AgentRuntime()​","type":1,"pageTitle":"Class: AgentRuntime","url":"/eliza/api/classes/AgentRuntime/#new-agentruntime","content":" new AgentRuntime(opts): AgentRuntime  Creates an instance of AgentRuntime.  Parameters​  • opts  The options for configuring the AgentRuntime.  • opts.conversationLength?: number  The number of messages to hold in the recent message cache.  • opts.agentId?: `${string}-${string}-${string}-${string}-${string}`  Optional ID of the agent.  • opts.character?: Character  • opts.token: string  The JWT token, can be a JWT token if outside worker, or an OpenAI token if inside worker.  • opts.serverUrl?: string  The URL of the worker.  • opts.actions?: Action[]  Optional custom actions.  • opts.evaluators?: Evaluator[]  Optional custom evaluators.  • opts.providers?: Provider[]  Optional context providers.  • opts.imageGenModel?: ImageGenModel  • opts.modelProvider: ModelProvider  • opts.databaseAdapter: IDatabaseAdapter  The database adapter used for interacting with the database.  • opts.fetch?: unknown  Custom fetch function to use for making requests.  • opts.speechModelPath?: string  Returns​  AgentRuntime  Defined in​  packages/core/src/core/runtime.ts:189  ","version":"Next","tagName":"h3"},{"title":"Properties​","type":1,"pageTitle":"Class: AgentRuntime","url":"/eliza/api/classes/AgentRuntime/#properties","content":" ","version":"Next","tagName":"h2"},{"title":"agentId​","type":1,"pageTitle":"Class: AgentRuntime","url":"/eliza/api/classes/AgentRuntime/#agentid","content":" agentId: `${string}-${string}-${string}-${string}-${string}`  The ID of the agent  Implementation of​  IAgentRuntime.agentId  Defined in​  packages/core/src/core/runtime.ts:73    ","version":"Next","tagName":"h3"},{"title":"serverUrl​","type":1,"pageTitle":"Class: AgentRuntime","url":"/eliza/api/classes/AgentRuntime/#serverurl","content":" serverUrl: string = &quot;http://localhost:7998&quot;  The base URL of the server where the agent's requests are processed.  Implementation of​  IAgentRuntime.serverUrl  Defined in​  packages/core/src/core/runtime.ts:77    ","version":"Next","tagName":"h3"},{"title":"databaseAdapter​","type":1,"pageTitle":"Class: AgentRuntime","url":"/eliza/api/classes/AgentRuntime/#databaseadapter","content":" databaseAdapter: IDatabaseAdapter  The database adapter used for interacting with the database.  Implementation of​  IAgentRuntime.databaseAdapter  Defined in​  packages/core/src/core/runtime.ts:82    ","version":"Next","tagName":"h3"},{"title":"token​","type":1,"pageTitle":"Class: AgentRuntime","url":"/eliza/api/classes/AgentRuntime/#token","content":" token: string  Authentication token used for securing requests.  Implementation of​  IAgentRuntime.token  Defined in​  packages/core/src/core/runtime.ts:87    ","version":"Next","tagName":"h3"},{"title":"actions​","type":1,"pageTitle":"Class: AgentRuntime","url":"/eliza/api/classes/AgentRuntime/#actions","content":" actions: Action[] = []  Custom actions that the agent can perform.  Implementation of​  IAgentRuntime.actions  Defined in​  packages/core/src/core/runtime.ts:92    ","version":"Next","tagName":"h3"},{"title":"evaluators​","type":1,"pageTitle":"Class: AgentRuntime","url":"/eliza/api/classes/AgentRuntime/#evaluators","content":" evaluators: Evaluator[] = []  Evaluators used to assess and guide the agent's responses.  Defined in​  packages/core/src/core/runtime.ts:97    ","version":"Next","tagName":"h3"},{"title":"providers​","type":1,"pageTitle":"Class: AgentRuntime","url":"/eliza/api/classes/AgentRuntime/#providers","content":" providers: Provider[] = []  Context providers used to provide context for message generation.  Implementation of​  IAgentRuntime.providers  Defined in​  packages/core/src/core/runtime.ts:102    ","version":"Next","tagName":"h3"},{"title":"modelProvider​","type":1,"pageTitle":"Class: AgentRuntime","url":"/eliza/api/classes/AgentRuntime/#modelprovider","content":" modelProvider: ModelProvider = ModelProvider.LLAMALOCAL  The model to use for generateText.  Implementation of​  IAgentRuntime.modelProvider  Defined in​  packages/core/src/core/runtime.ts:107    ","version":"Next","tagName":"h3"},{"title":"imageGenModel​","type":1,"pageTitle":"Class: AgentRuntime","url":"/eliza/api/classes/AgentRuntime/#imagegenmodel","content":" imageGenModel: ImageGenModel = ImageGenModel.TogetherAI  The model to use for image generation.  Implementation of​  IAgentRuntime.imageGenModel  Defined in​  packages/core/src/core/runtime.ts:112    ","version":"Next","tagName":"h3"},{"title":"llamaService​","type":1,"pageTitle":"Class: AgentRuntime","url":"/eliza/api/classes/AgentRuntime/#llamaservice","content":" llamaService: LlamaService = null  Local Llama if no OpenAI key is present  Implementation of​  IAgentRuntime.llamaService  Defined in​  packages/core/src/core/runtime.ts:117    ","version":"Next","tagName":"h3"},{"title":"speechService​","type":1,"pageTitle":"Class: AgentRuntime","url":"/eliza/api/classes/AgentRuntime/#speechservice","content":" speechService: ISpeechService  Implementation of​  IAgentRuntime.speechService  Defined in​  packages/core/src/core/runtime.ts:120    ","version":"Next","tagName":"h3"},{"title":"transcriptionService​","type":1,"pageTitle":"Class: AgentRuntime","url":"/eliza/api/classes/AgentRuntime/#transcriptionservice","content":" transcriptionService: ITranscriptionService  Implementation of​  IAgentRuntime.transcriptionService  Defined in​  packages/core/src/core/runtime.ts:122    ","version":"Next","tagName":"h3"},{"title":"imageDescriptionService​","type":1,"pageTitle":"Class: AgentRuntime","url":"/eliza/api/classes/AgentRuntime/#imagedescriptionservice","content":" imageDescriptionService: IImageRecognitionService  Implementation of​  IAgentRuntime.imageDescriptionService  Defined in​  packages/core/src/core/runtime.ts:124    ","version":"Next","tagName":"h3"},{"title":"browserService​","type":1,"pageTitle":"Class: AgentRuntime","url":"/eliza/api/classes/AgentRuntime/#browserservice","content":" browserService: IBrowserService  Implementation of​  IAgentRuntime.browserService  Defined in​  packages/core/src/core/runtime.ts:126    ","version":"Next","tagName":"h3"},{"title":"videoService​","type":1,"pageTitle":"Class: AgentRuntime","url":"/eliza/api/classes/AgentRuntime/#videoservice","content":" videoService: IVideoService  Implementation of​  IAgentRuntime.videoService  Defined in​  packages/core/src/core/runtime.ts:128    ","version":"Next","tagName":"h3"},{"title":"pdfService​","type":1,"pageTitle":"Class: AgentRuntime","url":"/eliza/api/classes/AgentRuntime/#pdfservice","content":" pdfService: IPdfService  Implementation of​  IAgentRuntime.pdfService  Defined in​  packages/core/src/core/runtime.ts:130    ","version":"Next","tagName":"h3"},{"title":"fetch()​","type":1,"pageTitle":"Class: AgentRuntime","url":"/eliza/api/classes/AgentRuntime/#fetch","content":" fetch: (input, init?) =&gt; Promise&lt;Response&gt;(input, init?) =&gt; Promise&lt;Response&gt;  Fetch function to use Some environments may not have access to the global fetch function and need a custom fetch override.  MDN Reference  Parameters​  • input: RequestInfo | URL  • init?: RequestInit  Returns​  Promise&lt;Response&gt;  Parameters​  • input: string | Request | URL  • init?: RequestInit  Returns​  Promise&lt;Response&gt;  Defined in​  packages/core/src/core/runtime.ts:136    ","version":"Next","tagName":"h3"},{"title":"character​","type":1,"pageTitle":"Class: AgentRuntime","url":"/eliza/api/classes/AgentRuntime/#character","content":" character: Character  The character to use for the agent  Implementation of​  IAgentRuntime.character  Defined in​  packages/core/src/core/runtime.ts:141    ","version":"Next","tagName":"h3"},{"title":"messageManager​","type":1,"pageTitle":"Class: AgentRuntime","url":"/eliza/api/classes/AgentRuntime/#messagemanager","content":" messageManager: IMemoryManager  Store messages that are sent and received by the agent.  Implementation of​  IAgentRuntime.messageManager  Defined in​  packages/core/src/core/runtime.ts:146    ","version":"Next","tagName":"h3"},{"title":"descriptionManager​","type":1,"pageTitle":"Class: AgentRuntime","url":"/eliza/api/classes/AgentRuntime/#descriptionmanager","content":" descriptionManager: IMemoryManager  Store and recall descriptions of users based on conversations.  Implementation of​  IAgentRuntime.descriptionManager  Defined in​  packages/core/src/core/runtime.ts:151    ","version":"Next","tagName":"h3"},{"title":"factManager​","type":1,"pageTitle":"Class: AgentRuntime","url":"/eliza/api/classes/AgentRuntime/#factmanager","content":" factManager: IMemoryManager  Manage the fact and recall of facts.  Implementation of​  IAgentRuntime.factManager  Defined in​  packages/core/src/core/runtime.ts:156    ","version":"Next","tagName":"h3"},{"title":"loreManager​","type":1,"pageTitle":"Class: AgentRuntime","url":"/eliza/api/classes/AgentRuntime/#loremanager","content":" loreManager: IMemoryManager  Manage the creation and recall of static information (documents, historical game lore, etc)  Implementation of​  IAgentRuntime.loreManager  Defined in​  packages/core/src/core/runtime.ts:161    ","version":"Next","tagName":"h3"},{"title":"documentsManager​","type":1,"pageTitle":"Class: AgentRuntime","url":"/eliza/api/classes/AgentRuntime/#documentsmanager","content":" documentsManager: IMemoryManager  Hold large documents that can be referenced  Defined in​  packages/core/src/core/runtime.ts:166    ","version":"Next","tagName":"h3"},{"title":"fragmentsManager​","type":1,"pageTitle":"Class: AgentRuntime","url":"/eliza/api/classes/AgentRuntime/#fragmentsmanager","content":" fragmentsManager: IMemoryManager  Searchable document fragments  Defined in​  packages/core/src/core/runtime.ts:171  ","version":"Next","tagName":"h3"},{"title":"Methods​","type":1,"pageTitle":"Class: AgentRuntime","url":"/eliza/api/classes/AgentRuntime/#methods","content":" ","version":"Next","tagName":"h2"},{"title":"getSetting()​","type":1,"pageTitle":"Class: AgentRuntime","url":"/eliza/api/classes/AgentRuntime/#getsetting","content":" getSetting(key): any  Parameters​  • key: string  Returns​  any  Implementation of​  IAgentRuntime.getSetting  Defined in​  packages/core/src/core/runtime.ts:392    ","version":"Next","tagName":"h3"},{"title":"getConversationLength()​","type":1,"pageTitle":"Class: AgentRuntime","url":"/eliza/api/classes/AgentRuntime/#getconversationlength","content":" getConversationLength(): number  Get the number of messages that are kept in the conversation buffer.  Returns​  number  The number of recent messages to be kept in memory.  Implementation of​  IAgentRuntime.getConversationLength  Defined in​  packages/core/src/core/runtime.ts:414    ","version":"Next","tagName":"h3"},{"title":"registerAction()​","type":1,"pageTitle":"Class: AgentRuntime","url":"/eliza/api/classes/AgentRuntime/#registeraction","content":" registerAction(action): void  Register an action for the agent to perform.  Parameters​  • action: Action  The action to register.  Returns​  void  Implementation of​  IAgentRuntime.registerAction  Defined in​  packages/core/src/core/runtime.ts:422    ","version":"Next","tagName":"h3"},{"title":"registerEvaluator()​","type":1,"pageTitle":"Class: AgentRuntime","url":"/eliza/api/classes/AgentRuntime/#registerevaluator","content":" registerEvaluator(evaluator): void  Register an evaluator to assess and guide the agent's responses.  Parameters​  • evaluator: Evaluator  The evaluator to register.  Returns​  void  Defined in​  packages/core/src/core/runtime.ts:431    ","version":"Next","tagName":"h3"},{"title":"registerContextProvider()​","type":1,"pageTitle":"Class: AgentRuntime","url":"/eliza/api/classes/AgentRuntime/#registercontextprovider","content":" registerContextProvider(provider): void  Register a context provider to provide context for message generation.  Parameters​  • provider: Provider  The context provider to register.  Returns​  void  Defined in​  packages/core/src/core/runtime.ts:439    ","version":"Next","tagName":"h3"},{"title":"processActions()​","type":1,"pageTitle":"Class: AgentRuntime","url":"/eliza/api/classes/AgentRuntime/#processactions","content":" processActions(message, responses, state?, callback?): Promise&lt;void&gt;  Process the actions of a message.  Parameters​  • message: Memory  The message to process.  • responses: Memory[]  • state?: State  • callback?: HandlerCallback  Returns​  Promise&lt;void&gt;  Implementation of​  IAgentRuntime.processActions  Defined in​  packages/core/src/core/runtime.ts:448    ","version":"Next","tagName":"h3"},{"title":"evaluate()​","type":1,"pageTitle":"Class: AgentRuntime","url":"/eliza/api/classes/AgentRuntime/#evaluate","content":" evaluate(message, state?): Promise&lt;string[]&gt;  Evaluate the message and state using the registered evaluators.  Parameters​  • message: Memory  The message to evaluate.  • state?: State  The state of the agent.  Returns​  Promise&lt;string[]&gt;  The results of the evaluation.  Implementation of​  IAgentRuntime.evaluate  Defined in​  packages/core/src/core/runtime.ts:520    ","version":"Next","tagName":"h3"},{"title":"ensureParticipantExists()​","type":1,"pageTitle":"Class: AgentRuntime","url":"/eliza/api/classes/AgentRuntime/#ensureparticipantexists","content":" ensureParticipantExists(userId, roomId): Promise&lt;void&gt;  Ensure the existence of a participant in the room. If the participant does not exist, they are added to the room.  Parameters​  • userId: `${string}-${string}-${string}-${string}-${string}`  The user ID to ensure the existence of.  • roomId: `${string}-${string}-${string}-${string}-${string}`  Returns​  Promise&lt;void&gt;  Throws​  An error if the participant cannot be added.  Implementation of​  IAgentRuntime.ensureParticipantExists  Defined in​  packages/core/src/core/runtime.ts:586    ","version":"Next","tagName":"h3"},{"title":"ensureUserExists()​","type":1,"pageTitle":"Class: AgentRuntime","url":"/eliza/api/classes/AgentRuntime/#ensureuserexists","content":" ensureUserExists(userId, userName, name, email?, source?): Promise&lt;void&gt;  Ensure the existence of a user in the database. If the user does not exist, they are added to the database.  Parameters​  • userId: `${string}-${string}-${string}-${string}-${string}`  The user ID to ensure the existence of.  • userName: string  The user name to ensure the existence of.  • name: string  • email?: string  • source?: string  Returns​  Promise&lt;void&gt;  Implementation of​  IAgentRuntime.ensureUserExists  Defined in​  packages/core/src/core/runtime.ts:602    ","version":"Next","tagName":"h3"},{"title":"ensureParticipantInRoom()​","type":1,"pageTitle":"Class: AgentRuntime","url":"/eliza/api/classes/AgentRuntime/#ensureparticipantinroom","content":" ensureParticipantInRoom(userId, roomId): Promise&lt;void&gt;  Parameters​  • userId: `${string}-${string}-${string}-${string}-${string}`  • roomId: `${string}-${string}-${string}-${string}-${string}`  Returns​  Promise&lt;void&gt;  Implementation of​  IAgentRuntime.ensureParticipantInRoom  Defined in​  packages/core/src/core/runtime.ts:622    ","version":"Next","tagName":"h3"},{"title":"ensureConnection()​","type":1,"pageTitle":"Class: AgentRuntime","url":"/eliza/api/classes/AgentRuntime/#ensureconnection","content":" ensureConnection(userId, roomId, userName?, userScreenName?, source?): Promise&lt;void&gt;  Parameters​  • userId: `${string}-${string}-${string}-${string}-${string}`  • roomId: `${string}-${string}-${string}-${string}-${string}`  • userName?: string  • userScreenName?: string  • source?: string  Returns​  Promise&lt;void&gt;  Implementation of​  IAgentRuntime.ensureConnection  Defined in​  packages/core/src/core/runtime.ts:633    ","version":"Next","tagName":"h3"},{"title":"ensureRoomExists()​","type":1,"pageTitle":"Class: AgentRuntime","url":"/eliza/api/classes/AgentRuntime/#ensureroomexists","content":" ensureRoomExists(roomId): Promise&lt;void&gt;  Ensure the existence of a room between the agent and a user. If no room exists, a new room is created and the user and agent are added as participants. The room ID is returned.  Parameters​  • roomId: `${string}-${string}-${string}-${string}-${string}`  Returns​  Promise&lt;void&gt;  The room ID of the room between the agent and the user.  Throws​  An error if the room cannot be created.  Implementation of​  IAgentRuntime.ensureRoomExists  Defined in​  packages/core/src/core/runtime.ts:669    ","version":"Next","tagName":"h3"},{"title":"composeState()​","type":1,"pageTitle":"Class: AgentRuntime","url":"/eliza/api/classes/AgentRuntime/#composestate","content":" composeState(message, additionalKeys): Promise&lt;State&gt;  Compose the state of the agent into an object that can be passed or used for response generation.  Parameters​  • message: Memory  The message to compose the state from.  • additionalKeys = {}  Returns​  Promise&lt;State&gt;  The state of the agent.  Implementation of​  IAgentRuntime.composeState  Defined in​  packages/core/src/core/runtime.ts:682    ","version":"Next","tagName":"h3"},{"title":"updateRecentMessageState()​","type":1,"pageTitle":"Class: AgentRuntime","url":"/eliza/api/classes/AgentRuntime/#updaterecentmessagestate","content":" updateRecentMessageState(state): Promise&lt;State&gt;  Parameters​  • state: State  Returns​  Promise&lt;State&gt;  Implementation of​  IAgentRuntime.updateRecentMessageState  Defined in​  packages/core/src/core/runtime.ts:1155 ","version":"Next","tagName":"h3"},{"title":"Function: isCreateAndBuyContent()","type":0,"sectionRef":"#","url":"/eliza/api/functions/isCreateAndBuyContent/","content":"","keywords":"","version":"Next"},{"title":"Parameters​","type":1,"pageTitle":"Function: isCreateAndBuyContent()","url":"/eliza/api/functions/isCreateAndBuyContent/#parameters","content":" • runtime: IAgentRuntime  • content: any  ","version":"Next","tagName":"h2"},{"title":"Returns​","type":1,"pageTitle":"Function: isCreateAndBuyContent()","url":"/eliza/api/functions/isCreateAndBuyContent/#returns","content":" content is CreateAndBuyContent  ","version":"Next","tagName":"h2"},{"title":"Defined in​","type":1,"pageTitle":"Function: isCreateAndBuyContent()","url":"/eliza/api/functions/isCreateAndBuyContent/#defined-in","content":" packages/core/src/actions/pumpfun.ts:33 ","version":"Next","tagName":"h2"},{"title":"Function: initializeClients()","type":0,"sectionRef":"#","url":"/eliza/api/functions/initializeClients/","content":"","keywords":"","version":"Next"},{"title":"Parameters​","type":1,"pageTitle":"Function: initializeClients()","url":"/eliza/api/functions/initializeClients/#parameters","content":" • character: Character  • runtime: IAgentRuntime  ","version":"Next","tagName":"h2"},{"title":"Returns​","type":1,"pageTitle":"Function: initializeClients()","url":"/eliza/api/functions/initializeClients/#returns","content":" Promise&lt;any[]&gt;  ","version":"Next","tagName":"h2"},{"title":"Defined in​","type":1,"pageTitle":"Function: initializeClients()","url":"/eliza/api/functions/initializeClients/#defined-in","content":" packages/core/src/cli/index.ts:21 ","version":"Next","tagName":"h2"},{"title":"Class: TwitterInteractionClient","type":0,"sectionRef":"#","url":"/eliza/api/classes/TwitterInteractionClient/","content":"","keywords":"","version":"Next"},{"title":"Extends​","type":1,"pageTitle":"Class: TwitterInteractionClient","url":"/eliza/api/classes/TwitterInteractionClient/#extends","content":" ClientBase  ","version":"Next","tagName":"h2"},{"title":"Constructors​","type":1,"pageTitle":"Class: TwitterInteractionClient","url":"/eliza/api/classes/TwitterInteractionClient/#constructors","content":" ","version":"Next","tagName":"h2"},{"title":"new TwitterInteractionClient()​","type":1,"pageTitle":"Class: TwitterInteractionClient","url":"/eliza/api/classes/TwitterInteractionClient/#new-twitterinteractionclient","content":" new TwitterInteractionClient(runtime): TwitterInteractionClient  Parameters​  • runtime: IAgentRuntime  Returns​  TwitterInteractionClient  Overrides​  ClientBase.constructor  Defined in​  packages/core/src/clients/twitter/interactions.ts:87  ","version":"Next","tagName":"h3"},{"title":"Properties​","type":1,"pageTitle":"Class: TwitterInteractionClient","url":"/eliza/api/classes/TwitterInteractionClient/#properties","content":" ","version":"Next","tagName":"h2"},{"title":"_twitterClient​","type":1,"pageTitle":"Class: TwitterInteractionClient","url":"/eliza/api/classes/TwitterInteractionClient/#_twitterclient","content":" static _twitterClient: Scraper  Inherited from​  ClientBase._twitterClient  Defined in​  packages/core/src/clients/twitter/base.ts:86    ","version":"Next","tagName":"h3"},{"title":"twitterClient​","type":1,"pageTitle":"Class: TwitterInteractionClient","url":"/eliza/api/classes/TwitterInteractionClient/#twitterclient","content":" twitterClient: Scraper  Inherited from​  ClientBase.twitterClient  Defined in​  packages/core/src/clients/twitter/base.ts:87    ","version":"Next","tagName":"h3"},{"title":"runtime​","type":1,"pageTitle":"Class: TwitterInteractionClient","url":"/eliza/api/classes/TwitterInteractionClient/#runtime","content":" runtime: IAgentRuntime  Inherited from​  ClientBase.runtime  Defined in​  packages/core/src/clients/twitter/base.ts:88    ","version":"Next","tagName":"h3"},{"title":"directions​","type":1,"pageTitle":"Class: TwitterInteractionClient","url":"/eliza/api/classes/TwitterInteractionClient/#directions","content":" directions: string  Inherited from​  ClientBase.directions  Defined in​  packages/core/src/clients/twitter/base.ts:89    ","version":"Next","tagName":"h3"},{"title":"lastCheckedTweetId​","type":1,"pageTitle":"Class: TwitterInteractionClient","url":"/eliza/api/classes/TwitterInteractionClient/#lastcheckedtweetid","content":" lastCheckedTweetId: number = null  Inherited from​  ClientBase.lastCheckedTweetId  Defined in​  packages/core/src/clients/twitter/base.ts:90    ","version":"Next","tagName":"h3"},{"title":"tweetCacheFilePath​","type":1,"pageTitle":"Class: TwitterInteractionClient","url":"/eliza/api/classes/TwitterInteractionClient/#tweetcachefilepath","content":" tweetCacheFilePath: string = &quot;tweetcache/latest_checked_tweet_id.txt&quot;  Inherited from​  ClientBase.tweetCacheFilePath  Defined in​  packages/core/src/clients/twitter/base.ts:91    ","version":"Next","tagName":"h3"},{"title":"imageDescriptionService​","type":1,"pageTitle":"Class: TwitterInteractionClient","url":"/eliza/api/classes/TwitterInteractionClient/#imagedescriptionservice","content":" imageDescriptionService: ImageDescriptionService  Inherited from​  ClientBase.imageDescriptionService  Defined in​  packages/core/src/clients/twitter/base.ts:92    ","version":"Next","tagName":"h3"},{"title":"temperature​","type":1,"pageTitle":"Class: TwitterInteractionClient","url":"/eliza/api/classes/TwitterInteractionClient/#temperature","content":" temperature: number = 0.5  Inherited from​  ClientBase.temperature  Defined in​  packages/core/src/clients/twitter/base.ts:93    ","version":"Next","tagName":"h3"},{"title":"requestQueue​","type":1,"pageTitle":"Class: TwitterInteractionClient","url":"/eliza/api/classes/TwitterInteractionClient/#requestqueue","content":" requestQueue: RequestQueue  Inherited from​  ClientBase.requestQueue  Defined in​  packages/core/src/clients/twitter/base.ts:96    ","version":"Next","tagName":"h3"},{"title":"twitterUserId​","type":1,"pageTitle":"Class: TwitterInteractionClient","url":"/eliza/api/classes/TwitterInteractionClient/#twitteruserid","content":" twitterUserId: string  Inherited from​  ClientBase.twitterUserId  Defined in​  packages/core/src/clients/twitter/base.ts:97    ","version":"Next","tagName":"h3"},{"title":"callback()​","type":1,"pageTitle":"Class: TwitterInteractionClient","url":"/eliza/api/classes/TwitterInteractionClient/#callback","content":" callback: (self) =&gt; any = null  Parameters​  • self: ClientBase  Returns​  any  Inherited from​  ClientBase.callback  Defined in​  packages/core/src/clients/twitter/base.ts:150  ","version":"Next","tagName":"h3"},{"title":"Methods​","type":1,"pageTitle":"Class: TwitterInteractionClient","url":"/eliza/api/classes/TwitterInteractionClient/#methods","content":" ","version":"Next","tagName":"h2"},{"title":"cacheTweet()​","type":1,"pageTitle":"Class: TwitterInteractionClient","url":"/eliza/api/classes/TwitterInteractionClient/#cachetweet","content":" cacheTweet(tweet): Promise&lt;void&gt;  Parameters​  • tweet: Tweet  Returns​  Promise&lt;void&gt;  Inherited from​  ClientBase.cacheTweet  Defined in​  packages/core/src/clients/twitter/base.ts:99    ","version":"Next","tagName":"h3"},{"title":"getCachedTweet()​","type":1,"pageTitle":"Class: TwitterInteractionClient","url":"/eliza/api/classes/TwitterInteractionClient/#getcachedtweet","content":" getCachedTweet(tweetId): Promise&lt;Tweet&gt;  Parameters​  • tweetId: string  Returns​  Promise&lt;Tweet&gt;  Inherited from​  ClientBase.getCachedTweet  Defined in​  packages/core/src/clients/twitter/base.ts:115    ","version":"Next","tagName":"h3"},{"title":"getTweet()​","type":1,"pageTitle":"Class: TwitterInteractionClient","url":"/eliza/api/classes/TwitterInteractionClient/#gettweet","content":" getTweet(tweetId): Promise&lt;Tweet&gt;  Parameters​  • tweetId: string  Returns​  Promise&lt;Tweet&gt;  Inherited from​  ClientBase.getTweet  Defined in​  packages/core/src/clients/twitter/base.ts:137    ","version":"Next","tagName":"h3"},{"title":"fetchHomeTimeline()​","type":1,"pageTitle":"Class: TwitterInteractionClient","url":"/eliza/api/classes/TwitterInteractionClient/#fetchhometimeline","content":" fetchHomeTimeline(count): Promise&lt;Tweet[]&gt;  Parameters​  • count: number  Returns​  Promise&lt;Tweet[]&gt;  Inherited from​  ClientBase.fetchHomeTimeline  Defined in​  packages/core/src/clients/twitter/base.ts:278    ","version":"Next","tagName":"h3"},{"title":"fetchSearchTweets()​","type":1,"pageTitle":"Class: TwitterInteractionClient","url":"/eliza/api/classes/TwitterInteractionClient/#fetchsearchtweets","content":" fetchSearchTweets(query, maxTweets, searchMode, cursor?): Promise&lt;QueryTweetsResponse&gt;  Parameters​  • query: string  • maxTweets: number  • searchMode: SearchMode  • cursor?: string  Returns​  Promise&lt;QueryTweetsResponse&gt;  Inherited from​  ClientBase.fetchSearchTweets  Defined in​  packages/core/src/clients/twitter/base.ts:330    ","version":"Next","tagName":"h3"},{"title":"setCookiesFromArray()​","type":1,"pageTitle":"Class: TwitterInteractionClient","url":"/eliza/api/classes/TwitterInteractionClient/#setcookiesfromarray","content":" setCookiesFromArray(cookiesArray): Promise&lt;void&gt;  Parameters​  • cookiesArray: any[]  Returns​  Promise&lt;void&gt;  Inherited from​  ClientBase.setCookiesFromArray  Defined in​  packages/core/src/clients/twitter/base.ts:560    ","version":"Next","tagName":"h3"},{"title":"saveRequestMessage()​","type":1,"pageTitle":"Class: TwitterInteractionClient","url":"/eliza/api/classes/TwitterInteractionClient/#saverequestmessage","content":" saveRequestMessage(message, state): Promise&lt;void&gt;  Parameters​  • message: Memory  • state: State  Returns​  Promise&lt;void&gt;  Inherited from​  ClientBase.saveRequestMessage  Defined in​  packages/core/src/clients/twitter/base.ts:572    ","version":"Next","tagName":"h3"},{"title":"onReady()​","type":1,"pageTitle":"Class: TwitterInteractionClient","url":"/eliza/api/classes/TwitterInteractionClient/#onready","content":" onReady(): void  Returns​  void  Overrides​  ClientBase.onReady  Defined in​  packages/core/src/clients/twitter/interactions.ts:76    ","version":"Next","tagName":"h3"},{"title":"handleTwitterInteractions()​","type":1,"pageTitle":"Class: TwitterInteractionClient","url":"/eliza/api/classes/TwitterInteractionClient/#handletwitterinteractions","content":" handleTwitterInteractions(): Promise&lt;void&gt;  Returns​  Promise&lt;void&gt;  Defined in​  packages/core/src/clients/twitter/interactions.ts:93 ","version":"Next","tagName":"h3"},{"title":"Function: generateObject()","type":0,"sectionRef":"#","url":"/eliza/api/functions/generateObject/","content":"","keywords":"","version":"Next"},{"title":"Parameters​","type":1,"pageTitle":"Function: generateObject()","url":"/eliza/api/functions/generateObject/#parameters","content":" • __namedParameters  • __namedParameters.runtime: IAgentRuntime  • __namedParameters.context: string  • __namedParameters.modelClass: string  ","version":"Next","tagName":"h2"},{"title":"Returns​","type":1,"pageTitle":"Function: generateObject()","url":"/eliza/api/functions/generateObject/#returns","content":" Promise&lt;any&gt;  ","version":"Next","tagName":"h2"},{"title":"Defined in​","type":1,"pageTitle":"Function: generateObject()","url":"/eliza/api/functions/generateObject/#defined-in","content":" packages/core/src/core/generation.ts:465 ","version":"Next","tagName":"h2"},{"title":"Function: generateTrueOrFalse()","type":0,"sectionRef":"#","url":"/eliza/api/functions/generateTrueOrFalse/","content":"","keywords":"","version":"Next"},{"title":"Parameters​","type":1,"pageTitle":"Function: generateTrueOrFalse()","url":"/eliza/api/functions/generateTrueOrFalse/#parameters","content":" • opts  The options for the generateText request  • opts.runtime: IAgentRuntime  • opts.context: string = &quot;&quot;  The context to evaluate for the boolean response  • opts.modelClass: string  ","version":"Next","tagName":"h2"},{"title":"Returns​","type":1,"pageTitle":"Function: generateTrueOrFalse()","url":"/eliza/api/functions/generateTrueOrFalse/#returns","content":" Promise&lt;boolean&gt;  Promise resolving to a boolean value parsed from the model's response  ","version":"Next","tagName":"h2"},{"title":"Defined in​","type":1,"pageTitle":"Function: generateTrueOrFalse()","url":"/eliza/api/functions/generateTrueOrFalse/#defined-in","content":" packages/core/src/core/generation.ts:377 ","version":"Next","tagName":"h2"},{"title":"Function: getImageGenModel()","type":0,"sectionRef":"#","url":"/eliza/api/functions/getImageGenModel/","content":"","keywords":"","version":"Next"},{"title":"Parameters​","type":1,"pageTitle":"Function: getImageGenModel()","url":"/eliza/api/functions/getImageGenModel/#parameters","content":" • model: ImageGenModel  ","version":"Next","tagName":"h2"},{"title":"Returns​","type":1,"pageTitle":"Function: getImageGenModel()","url":"/eliza/api/functions/getImageGenModel/#returns","content":" object | object  ","version":"Next","tagName":"h2"},{"title":"Defined in​","type":1,"pageTitle":"Function: getImageGenModel()","url":"/eliza/api/functions/getImageGenModel/#defined-in","content":" packages/core/src/core/imageGenModels.ts:17 ","version":"Next","tagName":"h2"},{"title":"Function: generateShouldRespond()","type":0,"sectionRef":"#","url":"/eliza/api/functions/generateShouldRespond/","content":"","keywords":"","version":"Next"},{"title":"Parameters​","type":1,"pageTitle":"Function: generateShouldRespond()","url":"/eliza/api/functions/generateShouldRespond/#parameters","content":" • opts  The options for the generateText request  • opts.runtime: IAgentRuntime  • opts.context: string  The context to evaluate for response  • opts.modelClass: string  ","version":"Next","tagName":"h2"},{"title":"Returns​","type":1,"pageTitle":"Function: generateShouldRespond()","url":"/eliza/api/functions/generateShouldRespond/#returns","content":" Promise&lt;&quot;RESPOND&quot; | &quot;IGNORE&quot; | &quot;STOP&quot; | null&gt;  Promise resolving to &quot;RESPOND&quot;, &quot;IGNORE&quot;, &quot;STOP&quot; or null  ","version":"Next","tagName":"h2"},{"title":"Defined in​","type":1,"pageTitle":"Function: generateShouldRespond()","url":"/eliza/api/functions/generateShouldRespond/#defined-in","content":" packages/core/src/core/generation.ts:273 ","version":"Next","tagName":"h2"},{"title":"Function: loadCharacters()","type":0,"sectionRef":"#","url":"/eliza/api/functions/loadCharacters/","content":"","keywords":"","version":"Next"},{"title":"Parameters​","type":1,"pageTitle":"Function: loadCharacters()","url":"/eliza/api/functions/loadCharacters/#parameters","content":" • charactersArg: string  ","version":"Next","tagName":"h2"},{"title":"Returns​","type":1,"pageTitle":"Function: loadCharacters()","url":"/eliza/api/functions/loadCharacters/#returns","content":" Character[]  ","version":"Next","tagName":"h2"},{"title":"Defined in​","type":1,"pageTitle":"Function: loadCharacters()","url":"/eliza/api/functions/loadCharacters/#defined-in","content":" packages/core/src/cli/index.ts:70 ","version":"Next","tagName":"h2"},{"title":"Function: initializeDatabase()","type":0,"sectionRef":"#","url":"/eliza/api/functions/initializeDatabase/","content":"","keywords":"","version":"Next"},{"title":"Returns​","type":1,"pageTitle":"Function: initializeDatabase()","url":"/eliza/api/functions/initializeDatabase/#returns","content":" PostgresDatabaseAdapter | SqliteDatabaseAdapter  ","version":"Next","tagName":"h2"},{"title":"Defined in​","type":1,"pageTitle":"Function: initializeDatabase()","url":"/eliza/api/functions/initializeDatabase/#defined-in","content":" packages/core/src/cli/index.ts:132 ","version":"Next","tagName":"h2"},{"title":"Function: generateText()","type":0,"sectionRef":"#","url":"/eliza/api/functions/generateText/","content":"","keywords":"","version":"Next"},{"title":"Parameters​","type":1,"pageTitle":"Function: generateText()","url":"/eliza/api/functions/generateText/#parameters","content":" • opts  The options for the generateText request.  • opts.runtime: IAgentRuntime  • opts.context: string  The context of the message to be completed.  • opts.modelClass: string  • opts.stop?: string[]  A list of strings to stop the generateText at.  ","version":"Next","tagName":"h2"},{"title":"Returns​","type":1,"pageTitle":"Function: generateText()","url":"/eliza/api/functions/generateText/#returns","content":" Promise&lt;string&gt;  The completed message.  ","version":"Next","tagName":"h2"},{"title":"Defined in​","type":1,"pageTitle":"Function: generateText()","url":"/eliza/api/functions/generateText/#defined-in","content":" packages/core/src/core/generation.ts:31 ","version":"Next","tagName":"h2"},{"title":"Function: getModel()","type":0,"sectionRef":"#","url":"/eliza/api/functions/getModel/","content":"","keywords":"","version":"Next"},{"title":"Parameters​","type":1,"pageTitle":"Function: getModel()","url":"/eliza/api/functions/getModel/#parameters","content":" • provider: ModelProvider  • type: ModelClass  ","version":"Next","tagName":"h2"},{"title":"Returns​","type":1,"pageTitle":"Function: getModel()","url":"/eliza/api/functions/getModel/#returns","content":" string  ","version":"Next","tagName":"h2"},{"title":"Defined in​","type":1,"pageTitle":"Function: getModel()","url":"/eliza/api/functions/getModel/#defined-in","content":" packages/core/src/core/models.ts:179 ","version":"Next","tagName":"h2"},{"title":"Function: loadCustomActions()","type":0,"sectionRef":"#","url":"/eliza/api/functions/loadCustomActions/","content":"","keywords":"","version":"Next"},{"title":"Parameters​","type":1,"pageTitle":"Function: loadCustomActions()","url":"/eliza/api/functions/loadCustomActions/#parameters","content":" • actionConfigs: ActionConfig[]  ","version":"Next","tagName":"h2"},{"title":"Returns​","type":1,"pageTitle":"Function: loadCustomActions()","url":"/eliza/api/functions/loadCustomActions/#returns","content":" Promise&lt;Action[]&gt;  ","version":"Next","tagName":"h2"},{"title":"Defined in​","type":1,"pageTitle":"Function: loadCustomActions()","url":"/eliza/api/functions/loadCustomActions/#defined-in","content":" packages/core/src/cli/config.ts:26 ","version":"Next","tagName":"h2"},{"title":"Function: getProviders()","type":0,"sectionRef":"#","url":"/eliza/api/functions/getProviders/","content":"","keywords":"","version":"Next"},{"title":"Parameters​","type":1,"pageTitle":"Function: getProviders()","url":"/eliza/api/functions/getProviders/#parameters","content":" • runtime: IAgentRuntime  The AgentRuntime object.  • message: Memory  The incoming message object.  • state?: State  The current state object.  ","version":"Next","tagName":"h2"},{"title":"Returns​","type":1,"pageTitle":"Function: getProviders()","url":"/eliza/api/functions/getProviders/#returns","content":" Promise&lt;string&gt;  A string that concatenates the outputs of each provider.  ","version":"Next","tagName":"h2"},{"title":"Defined in​","type":1,"pageTitle":"Function: getProviders()","url":"/eliza/api/functions/getProviders/#defined-in","content":" packages/core/src/core/providers.ts:13 ","version":"Next","tagName":"h2"},{"title":"Function: getRelationship()","type":0,"sectionRef":"#","url":"/eliza/api/functions/getRelationship/","content":"","keywords":"","version":"Next"},{"title":"Parameters​","type":1,"pageTitle":"Function: getRelationship()","url":"/eliza/api/functions/getRelationship/#parameters","content":" • __namedParameters  • __namedParameters.runtime: IAgentRuntime  • __namedParameters.userA: `${string}-${string}-${string}-${string}-${string}`  • __namedParameters.userB: `${string}-${string}-${string}-${string}-${string}`  ","version":"Next","tagName":"h2"},{"title":"Returns​","type":1,"pageTitle":"Function: getRelationship()","url":"/eliza/api/functions/getRelationship/#returns","content":" Promise&lt;Relationship&gt;  ","version":"Next","tagName":"h2"},{"title":"Defined in​","type":1,"pageTitle":"Function: getRelationship()","url":"/eliza/api/functions/getRelationship/#defined-in","content":" packages/core/src/core/relationships.ts:18 ","version":"Next","tagName":"h2"},{"title":"Function: getRelationships()","type":0,"sectionRef":"#","url":"/eliza/api/functions/getRelationships/","content":"","keywords":"","version":"Next"},{"title":"Parameters​","type":1,"pageTitle":"Function: getRelationships()","url":"/eliza/api/functions/getRelationships/#parameters","content":" • __namedParameters  • __namedParameters.runtime: IAgentRuntime  • __namedParameters.userId: `${string}-${string}-${string}-${string}-${string}`  ","version":"Next","tagName":"h2"},{"title":"Returns​","type":1,"pageTitle":"Function: getRelationships()","url":"/eliza/api/functions/getRelationships/#returns","content":" Promise&lt;Relationship[]&gt;  ","version":"Next","tagName":"h2"},{"title":"Defined in​","type":1,"pageTitle":"Function: getRelationships()","url":"/eliza/api/functions/getRelationships/#defined-in","content":" packages/core/src/core/relationships.ts:33 ","version":"Next","tagName":"h2"},{"title":"Function: getTokenForProvider()","type":0,"sectionRef":"#","url":"/eliza/api/functions/getTokenForProvider/","content":"","keywords":"","version":"Next"},{"title":"Parameters​","type":1,"pageTitle":"Function: getTokenForProvider()","url":"/eliza/api/functions/getTokenForProvider/#parameters","content":" • provider: ModelProvider  • character: Character  ","version":"Next","tagName":"h2"},{"title":"Returns​","type":1,"pageTitle":"Function: getTokenForProvider()","url":"/eliza/api/functions/getTokenForProvider/#returns","content":" string  ","version":"Next","tagName":"h2"},{"title":"Defined in​","type":1,"pageTitle":"Function: getTokenForProvider()","url":"/eliza/api/functions/getTokenForProvider/#defined-in","content":" packages/core/src/cli/index.ts:108 ","version":"Next","tagName":"h2"},{"title":"Function: startDiscord()","type":0,"sectionRef":"#","url":"/eliza/api/functions/startDiscord/","content":"","keywords":"","version":"Next"},{"title":"Parameters​","type":1,"pageTitle":"Function: startDiscord()","url":"/eliza/api/functions/startDiscord/#parameters","content":" • runtime: IAgentRuntime  ","version":"Next","tagName":"h2"},{"title":"Returns​","type":1,"pageTitle":"Function: startDiscord()","url":"/eliza/api/functions/startDiscord/#returns","content":" DiscordClient  ","version":"Next","tagName":"h2"},{"title":"Defined in​","type":1,"pageTitle":"Function: startDiscord()","url":"/eliza/api/functions/startDiscord/#defined-in","content":" packages/core/src/cli/index.ts:214 ","version":"Next","tagName":"h2"},{"title":"Function: startTelegram()","type":0,"sectionRef":"#","url":"/eliza/api/functions/startTelegram/","content":"","keywords":"","version":"Next"},{"title":"Parameters​","type":1,"pageTitle":"Function: startTelegram()","url":"/eliza/api/functions/startTelegram/#parameters","content":" • runtime: IAgentRuntime  • character: Character  ","version":"Next","tagName":"h2"},{"title":"Returns​","type":1,"pageTitle":"Function: startTelegram()","url":"/eliza/api/functions/startTelegram/#returns","content":" Promise&lt;TelegramClient&gt;  ","version":"Next","tagName":"h2"},{"title":"Defined in​","type":1,"pageTitle":"Function: startTelegram()","url":"/eliza/api/functions/startTelegram/#defined-in","content":" packages/core/src/cli/index.ts:218 ","version":"Next","tagName":"h2"},{"title":"Function: sellToken()","type":0,"sectionRef":"#","url":"/eliza/api/functions/sellToken/","content":"","keywords":"","version":"Next"},{"title":"Parameters​","type":1,"pageTitle":"Function: sellToken()","url":"/eliza/api/functions/sellToken/#parameters","content":" • __namedParameters  • __namedParameters.sdk: PumpFunSDK  • __namedParameters.seller: Keypair  • __namedParameters.mint: PublicKey  • __namedParameters.amount: bigint  • __namedParameters.priorityFee: PriorityFee  • __namedParameters.allowOffCurve: boolean  • __namedParameters.slippage: string  • __namedParameters.connection: Connection  ","version":"Next","tagName":"h2"},{"title":"Returns​","type":1,"pageTitle":"Function: sellToken()","url":"/eliza/api/functions/sellToken/#returns","content":" Promise&lt;void&gt;  ","version":"Next","tagName":"h2"},{"title":"Defined in​","type":1,"pageTitle":"Function: sellToken()","url":"/eliza/api/functions/sellToken/#defined-in","content":" packages/core/src/actions/pumpfun.ts:167 ","version":"Next","tagName":"h2"},{"title":"Class: PostgresDatabaseAdapter","type":0,"sectionRef":"#","url":"/eliza/api/classes/PostgresDatabaseAdapter/","content":"","keywords":"","version":"Next"},{"title":"Extends​","type":1,"pageTitle":"Class: PostgresDatabaseAdapter","url":"/eliza/api/classes/PostgresDatabaseAdapter/#extends","content":" DatabaseAdapter  ","version":"Next","tagName":"h2"},{"title":"Constructors​","type":1,"pageTitle":"Class: PostgresDatabaseAdapter","url":"/eliza/api/classes/PostgresDatabaseAdapter/#constructors","content":" ","version":"Next","tagName":"h2"},{"title":"new PostgresDatabaseAdapter()​","type":1,"pageTitle":"Class: PostgresDatabaseAdapter","url":"/eliza/api/classes/PostgresDatabaseAdapter/#new-postgresdatabaseadapter","content":" new PostgresDatabaseAdapter(connectionConfig): PostgresDatabaseAdapter  Parameters​  • connectionConfig: any  Returns​  PostgresDatabaseAdapter  Overrides​  DatabaseAdapter.constructor  Defined in​  packages/core/src/adapters/postgres.ts:19  ","version":"Next","tagName":"h3"},{"title":"Properties​","type":1,"pageTitle":"Class: PostgresDatabaseAdapter","url":"/eliza/api/classes/PostgresDatabaseAdapter/#properties","content":" ","version":"Next","tagName":"h2"},{"title":"db​","type":1,"pageTitle":"Class: PostgresDatabaseAdapter","url":"/eliza/api/classes/PostgresDatabaseAdapter/#db","content":" db: any  The database instance.  Inherited from​  DatabaseAdapter.db  Defined in​  packages/core/src/core/database.ts:21  ","version":"Next","tagName":"h3"},{"title":"Methods​","type":1,"pageTitle":"Class: PostgresDatabaseAdapter","url":"/eliza/api/classes/PostgresDatabaseAdapter/#methods","content":" ","version":"Next","tagName":"h2"},{"title":"testConnection()​","type":1,"pageTitle":"Class: PostgresDatabaseAdapter","url":"/eliza/api/classes/PostgresDatabaseAdapter/#testconnection","content":" testConnection(): Promise&lt;boolean&gt;  Returns​  Promise&lt;boolean&gt;  Defined in​  packages/core/src/adapters/postgres.ts:37    ","version":"Next","tagName":"h3"},{"title":"getRoom()​","type":1,"pageTitle":"Class: PostgresDatabaseAdapter","url":"/eliza/api/classes/PostgresDatabaseAdapter/#getroom","content":" getRoom(roomId): Promise&lt;`${string}-${string}-${string}-${string}-${string}`&gt;  Retrieves the room ID for a given room, if it exists.  Parameters​  • roomId: `${string}-${string}-${string}-${string}-${string}`  The UUID of the room to retrieve.  Returns​  Promise&lt;`${string}-${string}-${string}-${string}-${string}`&gt;  A Promise that resolves to the room ID or null if not found.  Overrides​  DatabaseAdapter.getRoom  Defined in​  packages/core/src/adapters/postgres.ts:59    ","version":"Next","tagName":"h3"},{"title":"getParticipantsForAccount()​","type":1,"pageTitle":"Class: PostgresDatabaseAdapter","url":"/eliza/api/classes/PostgresDatabaseAdapter/#getparticipantsforaccount","content":" getParticipantsForAccount(userId): Promise&lt;Participant[]&gt;  Retrieves participants associated with a specific account.  Parameters​  • userId: `${string}-${string}-${string}-${string}-${string}`  The UUID of the account.  Returns​  Promise&lt;Participant[]&gt;  A Promise that resolves to an array of Participant objects.  Overrides​  DatabaseAdapter.getParticipantsForAccount  Defined in​  packages/core/src/adapters/postgres.ts:72    ","version":"Next","tagName":"h3"},{"title":"getParticipantUserState()​","type":1,"pageTitle":"Class: PostgresDatabaseAdapter","url":"/eliza/api/classes/PostgresDatabaseAdapter/#getparticipantuserstate","content":" getParticipantUserState(roomId, userId): Promise&lt;&quot;FOLLOWED&quot; | &quot;MUTED&quot;&gt;  Parameters​  • roomId: `${string}-${string}-${string}-${string}-${string}`  • userId: `${string}-${string}-${string}-${string}-${string}`  Returns​  Promise&lt;&quot;FOLLOWED&quot; | &quot;MUTED&quot;&gt;  Overrides​  DatabaseAdapter.getParticipantUserState  Defined in​  packages/core/src/adapters/postgres.ts:87    ","version":"Next","tagName":"h3"},{"title":"getMemoriesByRoomIds()​","type":1,"pageTitle":"Class: PostgresDatabaseAdapter","url":"/eliza/api/classes/PostgresDatabaseAdapter/#getmemoriesbyroomids","content":" getMemoriesByRoomIds(params): Promise&lt;Memory[]&gt;  Parameters​  • params  • params.roomIds: `${string}-${string}-${string}-${string}-${string}`[]  • params.agentId?: `${string}-${string}-${string}-${string}-${string}`  • params.tableName: string  Returns​  Promise&lt;Memory[]&gt;  Overrides​  DatabaseAdapter.getMemoriesByRoomIds  Defined in​  packages/core/src/adapters/postgres.ts:103    ","version":"Next","tagName":"h3"},{"title":"setParticipantUserState()​","type":1,"pageTitle":"Class: PostgresDatabaseAdapter","url":"/eliza/api/classes/PostgresDatabaseAdapter/#setparticipantuserstate","content":" setParticipantUserState(roomId, userId, state): Promise&lt;void&gt;  Parameters​  • roomId: `${string}-${string}-${string}-${string}-${string}`  • userId: `${string}-${string}-${string}-${string}-${string}`  • state: &quot;FOLLOWED&quot; | &quot;MUTED&quot;  Returns​  Promise&lt;void&gt;  Overrides​  DatabaseAdapter.setParticipantUserState  Defined in​  packages/core/src/adapters/postgres.ts:133    ","version":"Next","tagName":"h3"},{"title":"getParticipantsForRoom()​","type":1,"pageTitle":"Class: PostgresDatabaseAdapter","url":"/eliza/api/classes/PostgresDatabaseAdapter/#getparticipantsforroom","content":" getParticipantsForRoom(roomId): Promise&lt;`${string}-${string}-${string}-${string}-${string}`[]&gt;  Retrieves participants for a specific room.  Parameters​  • roomId: `${string}-${string}-${string}-${string}-${string}`  The UUID of the room for which to retrieve participants.  Returns​  Promise&lt;`${string}-${string}-${string}-${string}-${string}`[]&gt;  A Promise that resolves to an array of UUIDs representing the participants.  Overrides​  DatabaseAdapter.getParticipantsForRoom  Defined in​  packages/core/src/adapters/postgres.ts:149    ","version":"Next","tagName":"h3"},{"title":"getAccountById()​","type":1,"pageTitle":"Class: PostgresDatabaseAdapter","url":"/eliza/api/classes/PostgresDatabaseAdapter/#getaccountbyid","content":" getAccountById(userId): Promise&lt;Account&gt;  Retrieves an account by its ID.  Parameters​  • userId: `${string}-${string}-${string}-${string}-${string}`  The UUID of the user account to retrieve.  Returns​  Promise&lt;Account&gt;  A Promise that resolves to the Account object or null if not found.  Overrides​  DatabaseAdapter.getAccountById  Defined in​  packages/core/src/adapters/postgres.ts:162    ","version":"Next","tagName":"h3"},{"title":"createAccount()​","type":1,"pageTitle":"Class: PostgresDatabaseAdapter","url":"/eliza/api/classes/PostgresDatabaseAdapter/#createaccount","content":" createAccount(account): Promise&lt;boolean&gt;  Creates a new account in the database.  Parameters​  • account: Account  The account object to create.  Returns​  Promise&lt;boolean&gt;  A Promise that resolves when the account creation is complete.  Overrides​  DatabaseAdapter.createAccount  Defined in​  packages/core/src/adapters/postgres.ts:186    ","version":"Next","tagName":"h3"},{"title":"getActorById()​","type":1,"pageTitle":"Class: PostgresDatabaseAdapter","url":"/eliza/api/classes/PostgresDatabaseAdapter/#getactorbyid","content":" getActorById(params): Promise&lt;Actor[]&gt;  Parameters​  • params  • params.roomId: `${string}-${string}-${string}-${string}-${string}`  Returns​  Promise&lt;Actor[]&gt;  Defined in​  packages/core/src/adapters/postgres.ts:210    ","version":"Next","tagName":"h3"},{"title":"getMemoryById()​","type":1,"pageTitle":"Class: PostgresDatabaseAdapter","url":"/eliza/api/classes/PostgresDatabaseAdapter/#getmemorybyid","content":" getMemoryById(id): Promise&lt;Memory&gt;  Parameters​  • id: `${string}-${string}-${string}-${string}-${string}`  Returns​  Promise&lt;Memory&gt;  Overrides​  DatabaseAdapter.getMemoryById  Defined in​  packages/core/src/adapters/postgres.ts:232    ","version":"Next","tagName":"h3"},{"title":"createMemory()​","type":1,"pageTitle":"Class: PostgresDatabaseAdapter","url":"/eliza/api/classes/PostgresDatabaseAdapter/#creatememory","content":" createMemory(memory, tableName): Promise&lt;void&gt;  Creates a new memory in the database.  Parameters​  • memory: Memory  The memory object to create.  • tableName: string  The table where the memory should be stored.  Returns​  Promise&lt;void&gt;  A Promise that resolves when the memory has been created.  Overrides​  DatabaseAdapter.createMemory  Defined in​  packages/core/src/adapters/postgres.ts:253    ","version":"Next","tagName":"h3"},{"title":"searchMemories()​","type":1,"pageTitle":"Class: PostgresDatabaseAdapter","url":"/eliza/api/classes/PostgresDatabaseAdapter/#searchmemories","content":" searchMemories(params): Promise&lt;Memory[]&gt;  Searches for memories based on embeddings and other specified parameters.  Parameters​  • params  An object containing parameters for the memory search.  • params.tableName: string  • params.roomId: `${string}-${string}-${string}-${string}-${string}`  • params.embedding: number[]  • params.match_threshold: number  • params.match_count: number  • params.unique: boolean  Returns​  Promise&lt;Memory[]&gt;  A Promise that resolves to an array of Memory objects.  Overrides​  DatabaseAdapter.searchMemories  Defined in​  packages/core/src/adapters/postgres.ts:291    ","version":"Next","tagName":"h3"},{"title":"getMemories()​","type":1,"pageTitle":"Class: PostgresDatabaseAdapter","url":"/eliza/api/classes/PostgresDatabaseAdapter/#getmemories","content":" getMemories(params): Promise&lt;Memory[]&gt;  Retrieves memories based on the specified parameters.  Parameters​  • params  An object containing parameters for the memory retrieval.  • params.roomId: `${string}-${string}-${string}-${string}-${string}`  • params.count?: number  • params.unique?: boolean  • params.tableName: string  • params.agentId?: `${string}-${string}-${string}-${string}-${string}`  • params.start?: number  • params.end?: number  Returns​  Promise&lt;Memory[]&gt;  A Promise that resolves to an array of Memory objects.  Overrides​  DatabaseAdapter.getMemories  Defined in​  packages/core/src/adapters/postgres.ts:334    ","version":"Next","tagName":"h3"},{"title":"getGoals()​","type":1,"pageTitle":"Class: PostgresDatabaseAdapter","url":"/eliza/api/classes/PostgresDatabaseAdapter/#getgoals","content":" getGoals(params): Promise&lt;Goal[]&gt;  Retrieves goals based on specified parameters.  Parameters​  • params  An object containing parameters for goal retrieval.  • params.roomId: `${string}-${string}-${string}-${string}-${string}`  • params.userId?: `${string}-${string}-${string}-${string}-${string}`  • params.onlyInProgress?: boolean  • params.count?: number  Returns​  Promise&lt;Goal[]&gt;  A Promise that resolves to an array of Goal objects.  Overrides​  DatabaseAdapter.getGoals  Defined in​  packages/core/src/adapters/postgres.ts:396    ","version":"Next","tagName":"h3"},{"title":"updateGoal()​","type":1,"pageTitle":"Class: PostgresDatabaseAdapter","url":"/eliza/api/classes/PostgresDatabaseAdapter/#updategoal","content":" updateGoal(goal): Promise&lt;void&gt;  Updates a specific goal in the database.  Parameters​  • goal: Goal  The goal object with updated properties.  Returns​  Promise&lt;void&gt;  A Promise that resolves when the goal has been updated.  Overrides​  DatabaseAdapter.updateGoal  Defined in​  packages/core/src/adapters/postgres.ts:437    ","version":"Next","tagName":"h3"},{"title":"createGoal()​","type":1,"pageTitle":"Class: PostgresDatabaseAdapter","url":"/eliza/api/classes/PostgresDatabaseAdapter/#creategoal","content":" createGoal(goal): Promise&lt;void&gt;  Creates a new goal in the database.  Parameters​  • goal: Goal  The goal object to create.  Returns​  Promise&lt;void&gt;  A Promise that resolves when the goal has been created.  Overrides​  DatabaseAdapter.createGoal  Defined in​  packages/core/src/adapters/postgres.ts:454    ","version":"Next","tagName":"h3"},{"title":"removeGoal()​","type":1,"pageTitle":"Class: PostgresDatabaseAdapter","url":"/eliza/api/classes/PostgresDatabaseAdapter/#removegoal","content":" removeGoal(goalId): Promise&lt;void&gt;  Removes a specific goal from the database.  Parameters​  • goalId: `${string}-${string}-${string}-${string}-${string}`  The UUID of the goal to remove.  Returns​  Promise&lt;void&gt;  A Promise that resolves when the goal has been removed.  Overrides​  DatabaseAdapter.removeGoal  Defined in​  packages/core/src/adapters/postgres.ts:474    ","version":"Next","tagName":"h3"},{"title":"createRoom()​","type":1,"pageTitle":"Class: PostgresDatabaseAdapter","url":"/eliza/api/classes/PostgresDatabaseAdapter/#createroom","content":" createRoom(roomId?): Promise&lt;`${string}-${string}-${string}-${string}-${string}`&gt;  Creates a new room with an optional specified ID.  Parameters​  • roomId?: `${string}-${string}-${string}-${string}-${string}`  Optional UUID to assign to the new room.  Returns​  Promise&lt;`${string}-${string}-${string}-${string}-${string}`&gt;  A Promise that resolves to the UUID of the created room.  Overrides​  DatabaseAdapter.createRoom  Defined in​  packages/core/src/adapters/postgres.ts:483    ","version":"Next","tagName":"h3"},{"title":"removeRoom()​","type":1,"pageTitle":"Class: PostgresDatabaseAdapter","url":"/eliza/api/classes/PostgresDatabaseAdapter/#removeroom","content":" removeRoom(roomId): Promise&lt;void&gt;  Removes a specific room from the database.  Parameters​  • roomId: `${string}-${string}-${string}-${string}-${string}`  The UUID of the room to remove.  Returns​  Promise&lt;void&gt;  A Promise that resolves when the room has been removed.  Overrides​  DatabaseAdapter.removeRoom  Defined in​  packages/core/src/adapters/postgres.ts:496    ","version":"Next","tagName":"h3"},{"title":"createRelationship()​","type":1,"pageTitle":"Class: PostgresDatabaseAdapter","url":"/eliza/api/classes/PostgresDatabaseAdapter/#createrelationship","content":" createRelationship(params): Promise&lt;boolean&gt;  Creates a new relationship between two users.  Parameters​  • params  An object containing the UUIDs of the two users (userA and userB).  • params.userA: `${string}-${string}-${string}-${string}-${string}`  • params.userB: `${string}-${string}-${string}-${string}-${string}`  Returns​  Promise&lt;boolean&gt;  A Promise that resolves to a boolean indicating success or failure of the creation.  Overrides​  DatabaseAdapter.createRelationship  Defined in​  packages/core/src/adapters/postgres.ts:505    ","version":"Next","tagName":"h3"},{"title":"getRelationship()​","type":1,"pageTitle":"Class: PostgresDatabaseAdapter","url":"/eliza/api/classes/PostgresDatabaseAdapter/#getrelationship","content":" getRelationship(params): Promise&lt;Relationship&gt;  Retrieves a relationship between two users if it exists.  Parameters​  • params  An object containing the UUIDs of the two users (userA and userB).  • params.userA: `${string}-${string}-${string}-${string}-${string}`  • params.userB: `${string}-${string}-${string}-${string}-${string}`  Returns​  Promise&lt;Relationship&gt;  A Promise that resolves to the Relationship object or null if not found.  Overrides​  DatabaseAdapter.getRelationship  Defined in​  packages/core/src/adapters/postgres.ts:529    ","version":"Next","tagName":"h3"},{"title":"getRelationships()​","type":1,"pageTitle":"Class: PostgresDatabaseAdapter","url":"/eliza/api/classes/PostgresDatabaseAdapter/#getrelationships","content":" getRelationships(params): Promise&lt;Relationship[]&gt;  Retrieves all relationships for a specific user.  Parameters​  • params  An object containing the UUID of the user.  • params.userId: `${string}-${string}-${string}-${string}-${string}`  Returns​  Promise&lt;Relationship[]&gt;  A Promise that resolves to an array of Relationship objects.  Overrides​  DatabaseAdapter.getRelationships  Defined in​  packages/core/src/adapters/postgres.ts:546    ","version":"Next","tagName":"h3"},{"title":"getCachedEmbeddings()​","type":1,"pageTitle":"Class: PostgresDatabaseAdapter","url":"/eliza/api/classes/PostgresDatabaseAdapter/#getcachedembeddings","content":" getCachedEmbeddings(opts): Promise&lt;object[]&gt;  Retrieves cached embeddings based on the specified query parameters.  Parameters​  • opts  • opts.query_table_name: string  • opts.query_threshold: number  • opts.query_input: string  • opts.query_field_name: string  • opts.query_field_sub_name: string  • opts.query_match_count: number  Returns​  Promise&lt;object[]&gt;  A Promise that resolves to an array of objects containing embeddings and levenshtein scores.  Overrides​  DatabaseAdapter.getCachedEmbeddings  Defined in​  packages/core/src/adapters/postgres.ts:559    ","version":"Next","tagName":"h3"},{"title":"log()​","type":1,"pageTitle":"Class: PostgresDatabaseAdapter","url":"/eliza/api/classes/PostgresDatabaseAdapter/#log","content":" log(params): Promise&lt;void&gt;  Logs an event or action with the specified details.  Parameters​  • params  An object containing parameters for the log entry.  • params.body  • params.userId: `${string}-${string}-${string}-${string}-${string}`  • params.roomId: `${string}-${string}-${string}-${string}-${string}`  • params.type: string  Returns​  Promise&lt;void&gt;  A Promise that resolves when the log entry has been saved.  Overrides​  DatabaseAdapter.log  Defined in​  packages/core/src/adapters/postgres.ts:595    ","version":"Next","tagName":"h3"},{"title":"searchMemoriesByEmbedding()​","type":1,"pageTitle":"Class: PostgresDatabaseAdapter","url":"/eliza/api/classes/PostgresDatabaseAdapter/#searchmemoriesbyembedding","content":" searchMemoriesByEmbedding(embedding, params): Promise&lt;Memory[]&gt;  Searches for memories by embedding and other specified parameters.  Parameters​  • embedding: number[]  The embedding vector to search with.  • params  Additional parameters for the search.  • params.match_threshold?: number  • params.count?: number  • params.agentId?: `${string}-${string}-${string}-${string}-${string}`  • params.roomId?: `${string}-${string}-${string}-${string}-${string}`  • params.unique?: boolean  • params.tableName: string  Returns​  Promise&lt;Memory[]&gt;  A Promise that resolves to an array of Memory objects.  Overrides​  DatabaseAdapter.searchMemoriesByEmbedding  Defined in​  packages/core/src/adapters/postgres.ts:612    ","version":"Next","tagName":"h3"},{"title":"addParticipant()​","type":1,"pageTitle":"Class: PostgresDatabaseAdapter","url":"/eliza/api/classes/PostgresDatabaseAdapter/#addparticipant","content":" addParticipant(userId, roomId): Promise&lt;boolean&gt;  Adds a user as a participant to a specific room.  Parameters​  • userId: `${string}-${string}-${string}-${string}-${string}`  The UUID of the user to add as a participant.  • roomId: `${string}-${string}-${string}-${string}-${string}`  The UUID of the room to which the user will be added.  Returns​  Promise&lt;boolean&gt;  A Promise that resolves to a boolean indicating success or failure.  Overrides​  DatabaseAdapter.addParticipant  Defined in​  packages/core/src/adapters/postgres.ts:681    ","version":"Next","tagName":"h3"},{"title":"removeParticipant()​","type":1,"pageTitle":"Class: PostgresDatabaseAdapter","url":"/eliza/api/classes/PostgresDatabaseAdapter/#removeparticipant","content":" removeParticipant(userId, roomId): Promise&lt;boolean&gt;  Removes a user as a participant from a specific room.  Parameters​  • userId: `${string}-${string}-${string}-${string}-${string}`  The UUID of the user to remove as a participant.  • roomId: `${string}-${string}-${string}-${string}-${string}`  The UUID of the room from which the user will be removed.  Returns​  Promise&lt;boolean&gt;  A Promise that resolves to a boolean indicating success or failure.  Overrides​  DatabaseAdapter.removeParticipant  Defined in​  packages/core/src/adapters/postgres.ts:697    ","version":"Next","tagName":"h3"},{"title":"updateGoalStatus()​","type":1,"pageTitle":"Class: PostgresDatabaseAdapter","url":"/eliza/api/classes/PostgresDatabaseAdapter/#updategoalstatus","content":" updateGoalStatus(params): Promise&lt;void&gt;  Updates the status of a specific goal.  Parameters​  • params  An object containing the goalId and the new status.  • params.goalId: `${string}-${string}-${string}-${string}-${string}`  • params.status: GoalStatus  Returns​  Promise&lt;void&gt;  A Promise that resolves when the goal status has been updated.  Overrides​  DatabaseAdapter.updateGoalStatus  Defined in​  packages/core/src/adapters/postgres.ts:713    ","version":"Next","tagName":"h3"},{"title":"removeMemory()​","type":1,"pageTitle":"Class: PostgresDatabaseAdapter","url":"/eliza/api/classes/PostgresDatabaseAdapter/#removememory","content":" removeMemory(memoryId, tableName): Promise&lt;void&gt;  Removes a specific memory from the database.  Parameters​  • memoryId: `${string}-${string}-${string}-${string}-${string}`  The UUID of the memory to remove.  • tableName: string  The table from which the memory should be removed.  Returns​  Promise&lt;void&gt;  A Promise that resolves when the memory has been removed.  Overrides​  DatabaseAdapter.removeMemory  Defined in​  packages/core/src/adapters/postgres.ts:728    ","version":"Next","tagName":"h3"},{"title":"removeAllMemories()​","type":1,"pageTitle":"Class: PostgresDatabaseAdapter","url":"/eliza/api/classes/PostgresDatabaseAdapter/#removeallmemories","content":" removeAllMemories(roomId, tableName): Promise&lt;void&gt;  Removes all memories associated with a specific room.  Parameters​  • roomId: `${string}-${string}-${string}-${string}-${string}`  The UUID of the room whose memories should be removed.  • tableName: string  The table from which the memories should be removed.  Returns​  Promise&lt;void&gt;  A Promise that resolves when all memories have been removed.  Overrides​  DatabaseAdapter.removeAllMemories  Defined in​  packages/core/src/adapters/postgres.ts:740    ","version":"Next","tagName":"h3"},{"title":"countMemories()​","type":1,"pageTitle":"Class: PostgresDatabaseAdapter","url":"/eliza/api/classes/PostgresDatabaseAdapter/#countmemories","content":" countMemories(roomId, unique, tableName): Promise&lt;number&gt;  Counts the number of memories in a specific room.  Parameters​  • roomId: `${string}-${string}-${string}-${string}-${string}`  The UUID of the room for which to count memories.  • unique: boolean = true  Specifies whether to count only unique memories.  • tableName: string = &quot;&quot;  Optional table name to count memories from.  Returns​  Promise&lt;number&gt;  A Promise that resolves to the number of memories.  Overrides​  DatabaseAdapter.countMemories  Defined in​  packages/core/src/adapters/postgres.ts:752    ","version":"Next","tagName":"h3"},{"title":"removeAllGoals()​","type":1,"pageTitle":"Class: PostgresDatabaseAdapter","url":"/eliza/api/classes/PostgresDatabaseAdapter/#removeallgoals","content":" removeAllGoals(roomId): Promise&lt;void&gt;  Removes all goals associated with a specific room.  Parameters​  • roomId: `${string}-${string}-${string}-${string}-${string}`  The UUID of the room whose goals should be removed.  Returns​  Promise&lt;void&gt;  A Promise that resolves when all goals have been removed.  Overrides​  DatabaseAdapter.removeAllGoals  Defined in​  packages/core/src/adapters/postgres.ts:773    ","version":"Next","tagName":"h3"},{"title":"getRoomsForParticipant()​","type":1,"pageTitle":"Class: PostgresDatabaseAdapter","url":"/eliza/api/classes/PostgresDatabaseAdapter/#getroomsforparticipant","content":" getRoomsForParticipant(userId): Promise&lt;`${string}-${string}-${string}-${string}-${string}`[]&gt;  Retrieves room IDs for which a specific user is a participant.  Parameters​  • userId: `${string}-${string}-${string}-${string}-${string}`  The UUID of the user.  Returns​  Promise&lt;`${string}-${string}-${string}-${string}-${string}`[]&gt;  A Promise that resolves to an array of room IDs.  Overrides​  DatabaseAdapter.getRoomsForParticipant  Defined in​  packages/core/src/adapters/postgres.ts:784    ","version":"Next","tagName":"h3"},{"title":"getRoomsForParticipants()​","type":1,"pageTitle":"Class: PostgresDatabaseAdapter","url":"/eliza/api/classes/PostgresDatabaseAdapter/#getroomsforparticipants","content":" getRoomsForParticipants(userIds): Promise&lt;`${string}-${string}-${string}-${string}-${string}`[]&gt;  Retrieves room IDs for which specific users are participants.  Parameters​  • userIds: `${string}-${string}-${string}-${string}-${string}`[]  An array of UUIDs of the users.  Returns​  Promise&lt;`${string}-${string}-${string}-${string}-${string}`[]&gt;  A Promise that resolves to an array of room IDs.  Overrides​  DatabaseAdapter.getRoomsForParticipants  Defined in​  packages/core/src/adapters/postgres.ts:797    ","version":"Next","tagName":"h3"},{"title":"getActorDetails()​","type":1,"pageTitle":"Class: PostgresDatabaseAdapter","url":"/eliza/api/classes/PostgresDatabaseAdapter/#getactordetails","content":" getActorDetails(params): Promise&lt;Actor[]&gt;  Retrieves details of actors in a given room.  Parameters​  • params  An object containing the roomId to search for actors.  • params.roomId: string  Returns​  Promise&lt;Actor[]&gt;  A Promise that resolves to an array of Actor objects.  Overrides​  DatabaseAdapter.getActorDetails  Defined in​  packages/core/src/adapters/postgres.ts:810 ","version":"Next","tagName":"h3"},{"title":"Class: SqliteDatabaseAdapter","type":0,"sectionRef":"#","url":"/eliza/api/classes/SqliteDatabaseAdapter/","content":"","keywords":"","version":"Next"},{"title":"Extends​","type":1,"pageTitle":"Class: SqliteDatabaseAdapter","url":"/eliza/api/classes/SqliteDatabaseAdapter/#extends","content":" DatabaseAdapter  ","version":"Next","tagName":"h2"},{"title":"Constructors​","type":1,"pageTitle":"Class: SqliteDatabaseAdapter","url":"/eliza/api/classes/SqliteDatabaseAdapter/#constructors","content":" ","version":"Next","tagName":"h2"},{"title":"new SqliteDatabaseAdapter()​","type":1,"pageTitle":"Class: SqliteDatabaseAdapter","url":"/eliza/api/classes/SqliteDatabaseAdapter/#new-sqlitedatabaseadapter","content":" new SqliteDatabaseAdapter(db): SqliteDatabaseAdapter  Parameters​  • db: Database  Returns​  SqliteDatabaseAdapter  Overrides​  DatabaseAdapter.constructor  Defined in​  packages/core/src/adapters/sqlite.ts:70  ","version":"Next","tagName":"h3"},{"title":"Properties​","type":1,"pageTitle":"Class: SqliteDatabaseAdapter","url":"/eliza/api/classes/SqliteDatabaseAdapter/#properties","content":" ","version":"Next","tagName":"h2"},{"title":"db​","type":1,"pageTitle":"Class: SqliteDatabaseAdapter","url":"/eliza/api/classes/SqliteDatabaseAdapter/#db","content":" db: any  The database instance.  Inherited from​  DatabaseAdapter.db  Defined in​  packages/core/src/core/database.ts:21  ","version":"Next","tagName":"h3"},{"title":"Methods​","type":1,"pageTitle":"Class: SqliteDatabaseAdapter","url":"/eliza/api/classes/SqliteDatabaseAdapter/#methods","content":" ","version":"Next","tagName":"h2"},{"title":"getRoom()​","type":1,"pageTitle":"Class: SqliteDatabaseAdapter","url":"/eliza/api/classes/SqliteDatabaseAdapter/#getroom","content":" getRoom(roomId): Promise&lt;`${string}-${string}-${string}-${string}-${string}`&gt;  Retrieves the room ID for a given room, if it exists.  Parameters​  • roomId: `${string}-${string}-${string}-${string}-${string}`  The UUID of the room to retrieve.  Returns​  Promise&lt;`${string}-${string}-${string}-${string}-${string}`&gt;  A Promise that resolves to the room ID or null if not found.  Overrides​  DatabaseAdapter.getRoom  Defined in​  packages/core/src/adapters/sqlite.ts:22    ","version":"Next","tagName":"h3"},{"title":"getParticipantsForAccount()​","type":1,"pageTitle":"Class: SqliteDatabaseAdapter","url":"/eliza/api/classes/SqliteDatabaseAdapter/#getparticipantsforaccount","content":" getParticipantsForAccount(userId): Promise&lt;Participant[]&gt;  Retrieves participants associated with a specific account.  Parameters​  • userId: `${string}-${string}-${string}-${string}-${string}`  The UUID of the account.  Returns​  Promise&lt;Participant[]&gt;  A Promise that resolves to an array of Participant objects.  Overrides​  DatabaseAdapter.getParticipantsForAccount  Defined in​  packages/core/src/adapters/sqlite.ts:30    ","version":"Next","tagName":"h3"},{"title":"getParticipantsForRoom()​","type":1,"pageTitle":"Class: SqliteDatabaseAdapter","url":"/eliza/api/classes/SqliteDatabaseAdapter/#getparticipantsforroom","content":" getParticipantsForRoom(roomId): Promise&lt;`${string}-${string}-${string}-${string}-${string}`[]&gt;  Retrieves participants for a specific room.  Parameters​  • roomId: `${string}-${string}-${string}-${string}-${string}`  The UUID of the room for which to retrieve participants.  Returns​  Promise&lt;`${string}-${string}-${string}-${string}-${string}`[]&gt;  A Promise that resolves to an array of UUIDs representing the participants.  Overrides​  DatabaseAdapter.getParticipantsForRoom  Defined in​  packages/core/src/adapters/sqlite.ts:40    ","version":"Next","tagName":"h3"},{"title":"getParticipantUserState()​","type":1,"pageTitle":"Class: SqliteDatabaseAdapter","url":"/eliza/api/classes/SqliteDatabaseAdapter/#getparticipantuserstate","content":" getParticipantUserState(roomId, userId): Promise&lt;&quot;FOLLOWED&quot; | &quot;MUTED&quot;&gt;  Parameters​  • roomId: `${string}-${string}-${string}-${string}-${string}`  • userId: `${string}-${string}-${string}-${string}-${string}`  Returns​  Promise&lt;&quot;FOLLOWED&quot; | &quot;MUTED&quot;&gt;  Overrides​  DatabaseAdapter.getParticipantUserState  Defined in​  packages/core/src/adapters/sqlite.ts:46    ","version":"Next","tagName":"h3"},{"title":"setParticipantUserState()​","type":1,"pageTitle":"Class: SqliteDatabaseAdapter","url":"/eliza/api/classes/SqliteDatabaseAdapter/#setparticipantuserstate","content":" setParticipantUserState(roomId, userId, state): Promise&lt;void&gt;  Parameters​  • roomId: `${string}-${string}-${string}-${string}-${string}`  • userId: `${string}-${string}-${string}-${string}-${string}`  • state: &quot;FOLLOWED&quot; | &quot;MUTED&quot;  Returns​  Promise&lt;void&gt;  Overrides​  DatabaseAdapter.setParticipantUserState  Defined in​  packages/core/src/adapters/sqlite.ts:59    ","version":"Next","tagName":"h3"},{"title":"getAccountById()​","type":1,"pageTitle":"Class: SqliteDatabaseAdapter","url":"/eliza/api/classes/SqliteDatabaseAdapter/#getaccountbyid","content":" getAccountById(userId): Promise&lt;Account&gt;  Retrieves an account by its ID.  Parameters​  • userId: `${string}-${string}-${string}-${string}-${string}`  The UUID of the user account to retrieve.  Returns​  Promise&lt;Account&gt;  A Promise that resolves to the Account object or null if not found.  Overrides​  DatabaseAdapter.getAccountById  Defined in​  packages/core/src/adapters/sqlite.ts:88    ","version":"Next","tagName":"h3"},{"title":"createAccount()​","type":1,"pageTitle":"Class: SqliteDatabaseAdapter","url":"/eliza/api/classes/SqliteDatabaseAdapter/#createaccount","content":" createAccount(account): Promise&lt;boolean&gt;  Creates a new account in the database.  Parameters​  • account: Account  The account object to create.  Returns​  Promise&lt;boolean&gt;  A Promise that resolves when the account creation is complete.  Overrides​  DatabaseAdapter.createAccount  Defined in​  packages/core/src/adapters/sqlite.ts:102    ","version":"Next","tagName":"h3"},{"title":"getActorDetails()​","type":1,"pageTitle":"Class: SqliteDatabaseAdapter","url":"/eliza/api/classes/SqliteDatabaseAdapter/#getactordetails","content":" getActorDetails(params): Promise&lt;Actor[]&gt;  Retrieves details of actors in a given room.  Parameters​  • params  An object containing the roomId to search for actors.  • params.roomId: `${string}-${string}-${string}-${string}-${string}`  Returns​  Promise&lt;Actor[]&gt;  A Promise that resolves to an array of Actor objects.  Overrides​  DatabaseAdapter.getActorDetails  Defined in​  packages/core/src/adapters/sqlite.ts:123    ","version":"Next","tagName":"h3"},{"title":"getMemoriesByRoomIds()​","type":1,"pageTitle":"Class: SqliteDatabaseAdapter","url":"/eliza/api/classes/SqliteDatabaseAdapter/#getmemoriesbyroomids","content":" getMemoriesByRoomIds(params): Promise&lt;Memory[]&gt;  Parameters​  • params  • params.roomIds: `${string}-${string}-${string}-${string}-${string}`[]  • params.tableName: string  • params.agentId?: `${string}-${string}-${string}-${string}-${string}`  Returns​  Promise&lt;Memory[]&gt;  Overrides​  DatabaseAdapter.getMemoriesByRoomIds  Defined in​  packages/core/src/adapters/sqlite.ts:150    ","version":"Next","tagName":"h3"},{"title":"getMemoryById()​","type":1,"pageTitle":"Class: SqliteDatabaseAdapter","url":"/eliza/api/classes/SqliteDatabaseAdapter/#getmemorybyid","content":" getMemoryById(memoryId): Promise&lt;Memory&gt;  Parameters​  • memoryId: `${string}-${string}-${string}-${string}-${string}`  Returns​  Promise&lt;Memory&gt;  Overrides​  DatabaseAdapter.getMemoryById  Defined in​  packages/core/src/adapters/sqlite.ts:179    ","version":"Next","tagName":"h3"},{"title":"createMemory()​","type":1,"pageTitle":"Class: SqliteDatabaseAdapter","url":"/eliza/api/classes/SqliteDatabaseAdapter/#creatememory","content":" createMemory(memory, tableName): Promise&lt;void&gt;  Creates a new memory in the database.  Parameters​  • memory: Memory  The memory object to create.  • tableName: string  The table where the memory should be stored.  Returns​  Promise&lt;void&gt;  A Promise that resolves when the memory has been created.  Overrides​  DatabaseAdapter.createMemory  Defined in​  packages/core/src/adapters/sqlite.ts:195    ","version":"Next","tagName":"h3"},{"title":"searchMemories()​","type":1,"pageTitle":"Class: SqliteDatabaseAdapter","url":"/eliza/api/classes/SqliteDatabaseAdapter/#searchmemories","content":" searchMemories(params): Promise&lt;Memory[]&gt;  Searches for memories based on embeddings and other specified parameters.  Parameters​  • params  An object containing parameters for the memory search.  • params.tableName: string  • params.roomId: `${string}-${string}-${string}-${string}-${string}`  • params.agentId?: `${string}-${string}-${string}-${string}-${string}`  • params.embedding: number[]  • params.match_threshold: number  • params.match_count: number  • params.unique: boolean  Returns​  Promise&lt;Memory[]&gt;  A Promise that resolves to an array of Memory objects.  Overrides​  DatabaseAdapter.searchMemories  Defined in​  packages/core/src/adapters/sqlite.ts:235    ","version":"Next","tagName":"h3"},{"title":"searchMemoriesByEmbedding()​","type":1,"pageTitle":"Class: SqliteDatabaseAdapter","url":"/eliza/api/classes/SqliteDatabaseAdapter/#searchmemoriesbyembedding","content":" searchMemoriesByEmbedding(embedding, params): Promise&lt;Memory[]&gt;  Searches for memories by embedding and other specified parameters.  Parameters​  • embedding: number[]  The embedding vector to search with.  • params  Additional parameters for the search.  • params.match_threshold?: number  • params.count?: number  • params.roomId?: `${string}-${string}-${string}-${string}-${string}`  • params.agentId?: `${string}-${string}-${string}-${string}-${string}`  • params.unique?: boolean  • params.tableName: string  Returns​  Promise&lt;Memory[]&gt;  A Promise that resolves to an array of Memory objects.  Overrides​  DatabaseAdapter.searchMemoriesByEmbedding  Defined in​  packages/core/src/adapters/sqlite.ts:281    ","version":"Next","tagName":"h3"},{"title":"getCachedEmbeddings()​","type":1,"pageTitle":"Class: SqliteDatabaseAdapter","url":"/eliza/api/classes/SqliteDatabaseAdapter/#getcachedembeddings","content":" getCachedEmbeddings(opts): Promise&lt;object[]&gt;  Retrieves cached embeddings based on the specified query parameters.  Parameters​  • opts  • opts.query_table_name: string  • opts.query_threshold: number  • opts.query_input: string  • opts.query_field_name: string  • opts.query_field_sub_name: string  • opts.query_match_count: number  Returns​  Promise&lt;object[]&gt;  A Promise that resolves to an array of objects containing embeddings and levenshtein scores.  Overrides​  DatabaseAdapter.getCachedEmbeddings  Defined in​  packages/core/src/adapters/sqlite.ts:335    ","version":"Next","tagName":"h3"},{"title":"updateGoalStatus()​","type":1,"pageTitle":"Class: SqliteDatabaseAdapter","url":"/eliza/api/classes/SqliteDatabaseAdapter/#updategoalstatus","content":" updateGoalStatus(params): Promise&lt;void&gt;  Updates the status of a specific goal.  Parameters​  • params  An object containing the goalId and the new status.  • params.goalId: `${string}-${string}-${string}-${string}-${string}`  • params.status: GoalStatus  Returns​  Promise&lt;void&gt;  A Promise that resolves when the goal status has been updated.  Overrides​  DatabaseAdapter.updateGoalStatus  Defined in​  packages/core/src/adapters/sqlite.ts:371    ","version":"Next","tagName":"h3"},{"title":"log()​","type":1,"pageTitle":"Class: SqliteDatabaseAdapter","url":"/eliza/api/classes/SqliteDatabaseAdapter/#log","content":" log(params): Promise&lt;void&gt;  Logs an event or action with the specified details.  Parameters​  • params  An object containing parameters for the log entry.  • params.body  • params.userId: `${string}-${string}-${string}-${string}-${string}`  • params.roomId: `${string}-${string}-${string}-${string}-${string}`  • params.type: string  Returns​  Promise&lt;void&gt;  A Promise that resolves when the log entry has been saved.  Overrides​  DatabaseAdapter.log  Defined in​  packages/core/src/adapters/sqlite.ts:379    ","version":"Next","tagName":"h3"},{"title":"getMemories()​","type":1,"pageTitle":"Class: SqliteDatabaseAdapter","url":"/eliza/api/classes/SqliteDatabaseAdapter/#getmemories","content":" getMemories(params): Promise&lt;Memory[]&gt;  Retrieves memories based on the specified parameters.  Parameters​  • params  An object containing parameters for the memory retrieval.  • params.roomId: `${string}-${string}-${string}-${string}-${string}`  • params.count?: number  • params.unique?: boolean  • params.tableName: string  • params.agentId?: `${string}-${string}-${string}-${string}-${string}`  • params.start?: number  • params.end?: number  Returns​  Promise&lt;Memory[]&gt;  A Promise that resolves to an array of Memory objects.  Overrides​  DatabaseAdapter.getMemories  Defined in​  packages/core/src/adapters/sqlite.ts:397    ","version":"Next","tagName":"h3"},{"title":"removeMemory()​","type":1,"pageTitle":"Class: SqliteDatabaseAdapter","url":"/eliza/api/classes/SqliteDatabaseAdapter/#removememory","content":" removeMemory(memoryId, tableName): Promise&lt;void&gt;  Removes a specific memory from the database.  Parameters​  • memoryId: `${string}-${string}-${string}-${string}-${string}`  The UUID of the memory to remove.  • tableName: string  The table from which the memory should be removed.  Returns​  Promise&lt;void&gt;  A Promise that resolves when the memory has been removed.  Overrides​  DatabaseAdapter.removeMemory  Defined in​  packages/core/src/adapters/sqlite.ts:454    ","version":"Next","tagName":"h3"},{"title":"removeAllMemories()​","type":1,"pageTitle":"Class: SqliteDatabaseAdapter","url":"/eliza/api/classes/SqliteDatabaseAdapter/#removeallmemories","content":" removeAllMemories(roomId, tableName): Promise&lt;void&gt;  Removes all memories associated with a specific room.  Parameters​  • roomId: `${string}-${string}-${string}-${string}-${string}`  The UUID of the room whose memories should be removed.  • tableName: string  The table from which the memories should be removed.  Returns​  Promise&lt;void&gt;  A Promise that resolves when all memories have been removed.  Overrides​  DatabaseAdapter.removeAllMemories  Defined in​  packages/core/src/adapters/sqlite.ts:459    ","version":"Next","tagName":"h3"},{"title":"countMemories()​","type":1,"pageTitle":"Class: SqliteDatabaseAdapter","url":"/eliza/api/classes/SqliteDatabaseAdapter/#countmemories","content":" countMemories(roomId, unique, tableName): Promise&lt;number&gt;  Counts the number of memories in a specific room.  Parameters​  • roomId: `${string}-${string}-${string}-${string}-${string}`  The UUID of the room for which to count memories.  • unique: boolean = true  Specifies whether to count only unique memories.  • tableName: string = &quot;&quot;  Optional table name to count memories from.  Returns​  Promise&lt;number&gt;  A Promise that resolves to the number of memories.  Overrides​  DatabaseAdapter.countMemories  Defined in​  packages/core/src/adapters/sqlite.ts:464    ","version":"Next","tagName":"h3"},{"title":"getGoals()​","type":1,"pageTitle":"Class: SqliteDatabaseAdapter","url":"/eliza/api/classes/SqliteDatabaseAdapter/#getgoals","content":" getGoals(params): Promise&lt;Goal[]&gt;  Retrieves goals based on specified parameters.  Parameters​  • params  An object containing parameters for goal retrieval.  • params.roomId: `${string}-${string}-${string}-${string}-${string}`  • params.userId?: `${string}-${string}-${string}-${string}-${string}`  • params.onlyInProgress?: boolean  • params.count?: number  Returns​  Promise&lt;Goal[]&gt;  A Promise that resolves to an array of Goal objects.  Overrides​  DatabaseAdapter.getGoals  Defined in​  packages/core/src/adapters/sqlite.ts:484    ","version":"Next","tagName":"h3"},{"title":"updateGoal()​","type":1,"pageTitle":"Class: SqliteDatabaseAdapter","url":"/eliza/api/classes/SqliteDatabaseAdapter/#updategoal","content":" updateGoal(goal): Promise&lt;void&gt;  Updates a specific goal in the database.  Parameters​  • goal: Goal  The goal object with updated properties.  Returns​  Promise&lt;void&gt;  A Promise that resolves when the goal has been updated.  Overrides​  DatabaseAdapter.updateGoal  Defined in​  packages/core/src/adapters/sqlite.ts:518    ","version":"Next","tagName":"h3"},{"title":"createGoal()​","type":1,"pageTitle":"Class: SqliteDatabaseAdapter","url":"/eliza/api/classes/SqliteDatabaseAdapter/#creategoal","content":" createGoal(goal): Promise&lt;void&gt;  Creates a new goal in the database.  Parameters​  • goal: Goal  The goal object to create.  Returns​  Promise&lt;void&gt;  A Promise that resolves when the goal has been created.  Overrides​  DatabaseAdapter.createGoal  Defined in​  packages/core/src/adapters/sqlite.ts:531    ","version":"Next","tagName":"h3"},{"title":"removeGoal()​","type":1,"pageTitle":"Class: SqliteDatabaseAdapter","url":"/eliza/api/classes/SqliteDatabaseAdapter/#removegoal","content":" removeGoal(goalId): Promise&lt;void&gt;  Removes a specific goal from the database.  Parameters​  • goalId: `${string}-${string}-${string}-${string}-${string}`  The UUID of the goal to remove.  Returns​  Promise&lt;void&gt;  A Promise that resolves when the goal has been removed.  Overrides​  DatabaseAdapter.removeGoal  Defined in​  packages/core/src/adapters/sqlite.ts:546    ","version":"Next","tagName":"h3"},{"title":"removeAllGoals()​","type":1,"pageTitle":"Class: SqliteDatabaseAdapter","url":"/eliza/api/classes/SqliteDatabaseAdapter/#removeallgoals","content":" removeAllGoals(roomId): Promise&lt;void&gt;  Removes all goals associated with a specific room.  Parameters​  • roomId: `${string}-${string}-${string}-${string}-${string}`  The UUID of the room whose goals should be removed.  Returns​  Promise&lt;void&gt;  A Promise that resolves when all goals have been removed.  Overrides​  DatabaseAdapter.removeAllGoals  Defined in​  packages/core/src/adapters/sqlite.ts:551    ","version":"Next","tagName":"h3"},{"title":"createRoom()​","type":1,"pageTitle":"Class: SqliteDatabaseAdapter","url":"/eliza/api/classes/SqliteDatabaseAdapter/#createroom","content":" createRoom(roomId?): Promise&lt;`${string}-${string}-${string}-${string}-${string}`&gt;  Creates a new room with an optional specified ID.  Parameters​  • roomId?: `${string}-${string}-${string}-${string}-${string}`  Optional UUID to assign to the new room.  Returns​  Promise&lt;`${string}-${string}-${string}-${string}-${string}`&gt;  A Promise that resolves to the UUID of the created room.  Overrides​  DatabaseAdapter.createRoom  Defined in​  packages/core/src/adapters/sqlite.ts:556    ","version":"Next","tagName":"h3"},{"title":"removeRoom()​","type":1,"pageTitle":"Class: SqliteDatabaseAdapter","url":"/eliza/api/classes/SqliteDatabaseAdapter/#removeroom","content":" removeRoom(roomId): Promise&lt;void&gt;  Removes a specific room from the database.  Parameters​  • roomId: `${string}-${string}-${string}-${string}-${string}`  The UUID of the room to remove.  Returns​  Promise&lt;void&gt;  A Promise that resolves when the room has been removed.  Overrides​  DatabaseAdapter.removeRoom  Defined in​  packages/core/src/adapters/sqlite.ts:567    ","version":"Next","tagName":"h3"},{"title":"getRoomsForParticipant()​","type":1,"pageTitle":"Class: SqliteDatabaseAdapter","url":"/eliza/api/classes/SqliteDatabaseAdapter/#getroomsforparticipant","content":" getRoomsForParticipant(userId): Promise&lt;`${string}-${string}-${string}-${string}-${string}`[]&gt;  Retrieves room IDs for which a specific user is a participant.  Parameters​  • userId: `${string}-${string}-${string}-${string}-${string}`  The UUID of the user.  Returns​  Promise&lt;`${string}-${string}-${string}-${string}-${string}`[]&gt;  A Promise that resolves to an array of room IDs.  Overrides​  DatabaseAdapter.getRoomsForParticipant  Defined in​  packages/core/src/adapters/sqlite.ts:572    ","version":"Next","tagName":"h3"},{"title":"getRoomsForParticipants()​","type":1,"pageTitle":"Class: SqliteDatabaseAdapter","url":"/eliza/api/classes/SqliteDatabaseAdapter/#getroomsforparticipants","content":" getRoomsForParticipants(userIds): Promise&lt;`${string}-${string}-${string}-${string}-${string}`[]&gt;  Retrieves room IDs for which specific users are participants.  Parameters​  • userIds: `${string}-${string}-${string}-${string}-${string}`[]  An array of UUIDs of the users.  Returns​  Promise&lt;`${string}-${string}-${string}-${string}-${string}`[]&gt;  A Promise that resolves to an array of room IDs.  Overrides​  DatabaseAdapter.getRoomsForParticipants  Defined in​  packages/core/src/adapters/sqlite.ts:578    ","version":"Next","tagName":"h3"},{"title":"addParticipant()​","type":1,"pageTitle":"Class: SqliteDatabaseAdapter","url":"/eliza/api/classes/SqliteDatabaseAdapter/#addparticipant","content":" addParticipant(userId, roomId): Promise&lt;boolean&gt;  Adds a user as a participant to a specific room.  Parameters​  • userId: `${string}-${string}-${string}-${string}-${string}`  The UUID of the user to add as a participant.  • roomId: `${string}-${string}-${string}-${string}-${string}`  The UUID of the room to which the user will be added.  Returns​  Promise&lt;boolean&gt;  A Promise that resolves to a boolean indicating success or failure.  Overrides​  DatabaseAdapter.addParticipant  Defined in​  packages/core/src/adapters/sqlite.ts:591    ","version":"Next","tagName":"h3"},{"title":"removeParticipant()​","type":1,"pageTitle":"Class: SqliteDatabaseAdapter","url":"/eliza/api/classes/SqliteDatabaseAdapter/#removeparticipant","content":" removeParticipant(userId, roomId): Promise&lt;boolean&gt;  Removes a user as a participant from a specific room.  Parameters​  • userId: `${string}-${string}-${string}-${string}-${string}`  The UUID of the user to remove as a participant.  • roomId: `${string}-${string}-${string}-${string}-${string}`  The UUID of the room from which the user will be removed.  Returns​  Promise&lt;boolean&gt;  A Promise that resolves to a boolean indicating success or failure.  Overrides​  DatabaseAdapter.removeParticipant  Defined in​  packages/core/src/adapters/sqlite.ts:603    ","version":"Next","tagName":"h3"},{"title":"createRelationship()​","type":1,"pageTitle":"Class: SqliteDatabaseAdapter","url":"/eliza/api/classes/SqliteDatabaseAdapter/#createrelationship","content":" createRelationship(params): Promise&lt;boolean&gt;  Creates a new relationship between two users.  Parameters​  • params  An object containing the UUIDs of the two users (userA and userB).  • params.userA: `${string}-${string}-${string}-${string}-${string}`  • params.userB: `${string}-${string}-${string}-${string}-${string}`  Returns​  Promise&lt;boolean&gt;  A Promise that resolves to a boolean indicating success or failure of the creation.  Overrides​  DatabaseAdapter.createRelationship  Defined in​  packages/core/src/adapters/sqlite.ts:615    ","version":"Next","tagName":"h3"},{"title":"getRelationship()​","type":1,"pageTitle":"Class: SqliteDatabaseAdapter","url":"/eliza/api/classes/SqliteDatabaseAdapter/#getrelationship","content":" getRelationship(params): Promise&lt;Relationship&gt;  Retrieves a relationship between two users if it exists.  Parameters​  • params  An object containing the UUIDs of the two users (userA and userB).  • params.userA: `${string}-${string}-${string}-${string}-${string}`  • params.userB: `${string}-${string}-${string}-${string}-${string}`  Returns​  Promise&lt;Relationship&gt;  A Promise that resolves to the Relationship object or null if not found.  Overrides​  DatabaseAdapter.getRelationship  Defined in​  packages/core/src/adapters/sqlite.ts:630    ","version":"Next","tagName":"h3"},{"title":"getRelationships()​","type":1,"pageTitle":"Class: SqliteDatabaseAdapter","url":"/eliza/api/classes/SqliteDatabaseAdapter/#getrelationships","content":" getRelationships(params): Promise&lt;Relationship[]&gt;  Retrieves all relationships for a specific user.  Parameters​  • params  An object containing the UUID of the user.  • params.userId: `${string}-${string}-${string}-${string}-${string}`  Returns​  Promise&lt;Relationship[]&gt;  A Promise that resolves to an array of Relationship objects.  Overrides​  DatabaseAdapter.getRelationships  Defined in​  packages/core/src/adapters/sqlite.ts:648 ","version":"Next","tagName":"h3"},{"title":"Function: retrieveCachedEmbedding()","type":0,"sectionRef":"#","url":"/eliza/api/functions/retrieveCachedEmbedding/","content":"","keywords":"","version":"Next"},{"title":"Parameters​","type":1,"pageTitle":"Function: retrieveCachedEmbedding()","url":"/eliza/api/functions/retrieveCachedEmbedding/#parameters","content":" • runtime: IAgentRuntime  • input: string  ","version":"Next","tagName":"h2"},{"title":"Returns​","type":1,"pageTitle":"Function: retrieveCachedEmbedding()","url":"/eliza/api/functions/retrieveCachedEmbedding/#returns","content":" Promise&lt;number[]&gt;  ","version":"Next","tagName":"h2"},{"title":"Defined in​","type":1,"pageTitle":"Function: retrieveCachedEmbedding()","url":"/eliza/api/functions/retrieveCachedEmbedding/#defined-in","content":" packages/core/src/core/embedding.ts:68 ","version":"Next","tagName":"h2"},{"title":"Function: loadActionConfigs()","type":0,"sectionRef":"#","url":"/eliza/api/functions/loadActionConfigs/","content":"","keywords":"","version":"Next"},{"title":"Parameters​","type":1,"pageTitle":"Function: loadActionConfigs()","url":"/eliza/api/functions/loadActionConfigs/#parameters","content":" • configPath: string  ","version":"Next","tagName":"h2"},{"title":"Returns​","type":1,"pageTitle":"Function: loadActionConfigs()","url":"/eliza/api/functions/loadActionConfigs/#returns","content":" ActionConfig[]  ","version":"Next","tagName":"h2"},{"title":"Defined in​","type":1,"pageTitle":"Function: loadActionConfigs()","url":"/eliza/api/functions/loadActionConfigs/#defined-in","content":" packages/core/src/cli/config.ts:15 ","version":"Next","tagName":"h2"},{"title":"Function: startTwitter()","type":0,"sectionRef":"#","url":"/eliza/api/functions/startTwitter/","content":"","keywords":"","version":"Next"},{"title":"Parameters​","type":1,"pageTitle":"Function: startTwitter()","url":"/eliza/api/functions/startTwitter/#parameters","content":" • runtime: IAgentRuntime  ","version":"Next","tagName":"h2"},{"title":"Returns​","type":1,"pageTitle":"Function: startTwitter()","url":"/eliza/api/functions/startTwitter/#returns","content":" Promise&lt;(TwitterPostClient | TwitterInteractionClient | TwitterSearchClient)[]&gt;  ","version":"Next","tagName":"h2"},{"title":"Defined in​","type":1,"pageTitle":"Function: startTwitter()","url":"/eliza/api/functions/startTwitter/#defined-in","content":" packages/core/src/cli/index.ts:248 ","version":"Next","tagName":"h2"},{"title":"Function: trimTokens()","type":0,"sectionRef":"#","url":"/eliza/api/functions/trimTokens/","content":"","keywords":"","version":"Next"},{"title":"Parameters​","type":1,"pageTitle":"Function: trimTokens()","url":"/eliza/api/functions/trimTokens/#parameters","content":" • context: any  The context of the message to be completed.  • maxTokens: any  • model: any  The model to use for generateText.  ","version":"Next","tagName":"h2"},{"title":"Returns​","type":1,"pageTitle":"Function: trimTokens()","url":"/eliza/api/functions/trimTokens/#returns","content":" any  ","version":"Next","tagName":"h2"},{"title":"Defined in​","type":1,"pageTitle":"Function: trimTokens()","url":"/eliza/api/functions/trimTokens/#defined-in","content":" packages/core/src/core/generation.ts:247 ","version":"Next","tagName":"h2"},{"title":"Function: updateGoal()","type":0,"sectionRef":"#","url":"/eliza/api/functions/updateGoal/","content":"","keywords":"","version":"Next"},{"title":"Parameters​","type":1,"pageTitle":"Function: updateGoal()","url":"/eliza/api/functions/updateGoal/#parameters","content":" • __namedParameters  • __namedParameters.runtime: IAgentRuntime  • __namedParameters.goal: Goal  ","version":"Next","tagName":"h2"},{"title":"Returns​","type":1,"pageTitle":"Function: updateGoal()","url":"/eliza/api/functions/updateGoal/#returns","content":" Promise&lt;void&gt;  ","version":"Next","tagName":"h2"},{"title":"Defined in​","type":1,"pageTitle":"Function: updateGoal()","url":"/eliza/api/functions/updateGoal/#defined-in","content":" packages/core/src/core/goals.ts:44 ","version":"Next","tagName":"h2"},{"title":"Interface: Account","type":0,"sectionRef":"#","url":"/eliza/api/interfaces/Account/","content":"","keywords":"","version":"Next"},{"title":"Properties​","type":1,"pageTitle":"Interface: Account","url":"/eliza/api/interfaces/Account/#properties","content":" ","version":"Next","tagName":"h2"},{"title":"id​","type":1,"pageTitle":"Interface: Account","url":"/eliza/api/interfaces/Account/#id","content":" id: `${string}-${string}-${string}-${string}-${string}`  Defined in​  packages/core/src/core/types.ts:270    ","version":"Next","tagName":"h3"},{"title":"name​","type":1,"pageTitle":"Interface: Account","url":"/eliza/api/interfaces/Account/#name","content":" name: string  Defined in​  packages/core/src/core/types.ts:271    ","version":"Next","tagName":"h3"},{"title":"username​","type":1,"pageTitle":"Interface: Account","url":"/eliza/api/interfaces/Account/#username","content":" username: string  Defined in​  packages/core/src/core/types.ts:272    ","version":"Next","tagName":"h3"},{"title":"details?​","type":1,"pageTitle":"Interface: Account","url":"/eliza/api/interfaces/Account/#details","content":" optional details: object  Index Signature​  [key: string]: any  Defined in​  packages/core/src/core/types.ts:273    ","version":"Next","tagName":"h3"},{"title":"email?​","type":1,"pageTitle":"Interface: Account","url":"/eliza/api/interfaces/Account/#email","content":" optional email: string  Defined in​  packages/core/src/core/types.ts:274    ","version":"Next","tagName":"h3"},{"title":"avatarUrl?​","type":1,"pageTitle":"Interface: Account","url":"/eliza/api/interfaces/Account/#avatarurl","content":" optional avatarUrl: string  Defined in​  packages/core/src/core/types.ts:275 ","version":"Next","tagName":"h3"},{"title":"Function: parseArguments()","type":0,"sectionRef":"#","url":"/eliza/api/functions/parseArguments/","content":"","keywords":"","version":"Next"},{"title":"Returns​","type":1,"pageTitle":"Function: parseArguments()","url":"/eliza/api/functions/parseArguments/#returns","content":" Arguments  ","version":"Next","tagName":"h2"},{"title":"Defined in​","type":1,"pageTitle":"Function: parseArguments()","url":"/eliza/api/functions/parseArguments/#defined-in","content":" packages/core/src/cli/index.ts:46 ","version":"Next","tagName":"h2"},{"title":"Interface: Action","type":0,"sectionRef":"#","url":"/eliza/api/interfaces/Action/","content":"","keywords":"","version":"Next"},{"title":"Properties​","type":1,"pageTitle":"Interface: Action","url":"/eliza/api/interfaces/Action/#properties","content":" ","version":"Next","tagName":"h2"},{"title":"similes​","type":1,"pageTitle":"Interface: Action","url":"/eliza/api/interfaces/Action/#similes","content":" similes: string[]  Defined in​  packages/core/src/core/types.ts:213    ","version":"Next","tagName":"h3"},{"title":"description​","type":1,"pageTitle":"Interface: Action","url":"/eliza/api/interfaces/Action/#description","content":" description: string  Defined in​  packages/core/src/core/types.ts:214    ","version":"Next","tagName":"h3"},{"title":"examples​","type":1,"pageTitle":"Interface: Action","url":"/eliza/api/interfaces/Action/#examples","content":" examples: ActionExample[][]  Defined in​  packages/core/src/core/types.ts:215    ","version":"Next","tagName":"h3"},{"title":"handler​","type":1,"pageTitle":"Interface: Action","url":"/eliza/api/interfaces/Action/#handler","content":" handler: Handler  Defined in​  packages/core/src/core/types.ts:216    ","version":"Next","tagName":"h3"},{"title":"name​","type":1,"pageTitle":"Interface: Action","url":"/eliza/api/interfaces/Action/#name","content":" name: string  Defined in​  packages/core/src/core/types.ts:217    ","version":"Next","tagName":"h3"},{"title":"validate​","type":1,"pageTitle":"Interface: Action","url":"/eliza/api/interfaces/Action/#validate","content":" validate: Validator  Defined in​  packages/core/src/core/types.ts:218 ","version":"Next","tagName":"h3"},{"title":"Interface: ActionExample","type":0,"sectionRef":"#","url":"/eliza/api/interfaces/ActionExample/","content":"","keywords":"","version":"Next"},{"title":"Properties​","type":1,"pageTitle":"Interface: ActionExample","url":"/eliza/api/interfaces/ActionExample/#properties","content":" ","version":"Next","tagName":"h2"},{"title":"user​","type":1,"pageTitle":"Interface: ActionExample","url":"/eliza/api/interfaces/ActionExample/#user","content":" user: string  Defined in​  packages/core/src/core/types.ts:26    ","version":"Next","tagName":"h3"},{"title":"content​","type":1,"pageTitle":"Interface: ActionExample","url":"/eliza/api/interfaces/ActionExample/#content","content":" content: Content  Defined in​  packages/core/src/core/types.ts:27 ","version":"Next","tagName":"h3"},{"title":"Interface: Actor","type":0,"sectionRef":"#","url":"/eliza/api/interfaces/Actor/","content":"","keywords":"","version":"Next"},{"title":"Properties​","type":1,"pageTitle":"Interface: Actor","url":"/eliza/api/interfaces/Actor/#properties","content":" ","version":"Next","tagName":"h2"},{"title":"name​","type":1,"pageTitle":"Interface: Actor","url":"/eliza/api/interfaces/Actor/#name","content":" name: string  Defined in​  packages/core/src/core/types.ts:42    ","version":"Next","tagName":"h3"},{"title":"username​","type":1,"pageTitle":"Interface: Actor","url":"/eliza/api/interfaces/Actor/#username","content":" username: string  Defined in​  packages/core/src/core/types.ts:43    ","version":"Next","tagName":"h3"},{"title":"details​","type":1,"pageTitle":"Interface: Actor","url":"/eliza/api/interfaces/Actor/#details","content":" details: object  tagline​  tagline: string  summary​  summary: string  quote​  quote: string  Defined in​  packages/core/src/core/types.ts:44    ","version":"Next","tagName":"h3"},{"title":"id​","type":1,"pageTitle":"Interface: Actor","url":"/eliza/api/interfaces/Actor/#id","content":" id: `${string}-${string}-${string}-${string}-${string}`  Defined in​  packages/core/src/core/types.ts:45 ","version":"Next","tagName":"h3"},{"title":"Interface: Content","type":0,"sectionRef":"#","url":"/eliza/api/interfaces/Content/","content":"","keywords":"","version":"Next"},{"title":"Extended by​","type":1,"pageTitle":"Interface: Content","url":"/eliza/api/interfaces/Content/#extended-by","content":" CreateAndBuyContent  ","version":"Next","tagName":"h2"},{"title":"Indexable​","type":1,"pageTitle":"Interface: Content","url":"/eliza/api/interfaces/Content/#indexable","content":" [key: string]: unknown  ","version":"Next","tagName":"h2"},{"title":"Properties​","type":1,"pageTitle":"Interface: Content","url":"/eliza/api/interfaces/Content/#properties","content":" ","version":"Next","tagName":"h2"},{"title":"text​","type":1,"pageTitle":"Interface: Content","url":"/eliza/api/interfaces/Content/#text","content":" text: string  Defined in​  packages/core/src/core/types.ts:13    ","version":"Next","tagName":"h3"},{"title":"action?​","type":1,"pageTitle":"Interface: Content","url":"/eliza/api/interfaces/Content/#action","content":" optional action: string  Defined in​  packages/core/src/core/types.ts:14    ","version":"Next","tagName":"h3"},{"title":"source?​","type":1,"pageTitle":"Interface: Content","url":"/eliza/api/interfaces/Content/#source","content":" optional source: string  Defined in​  packages/core/src/core/types.ts:15    ","version":"Next","tagName":"h3"},{"title":"url?​","type":1,"pageTitle":"Interface: Content","url":"/eliza/api/interfaces/Content/#url","content":" optional url: string  Defined in​  packages/core/src/core/types.ts:16    ","version":"Next","tagName":"h3"},{"title":"inReplyTo?​","type":1,"pageTitle":"Interface: Content","url":"/eliza/api/interfaces/Content/#inreplyto","content":" optional inReplyTo: `${string}-${string}-${string}-${string}-${string}`  Defined in​  packages/core/src/core/types.ts:17    ","version":"Next","tagName":"h3"},{"title":"attachments?​","type":1,"pageTitle":"Interface: Content","url":"/eliza/api/interfaces/Content/#attachments","content":" optional attachments: Media[]  Defined in​  packages/core/src/core/types.ts:18 ","version":"Next","tagName":"h3"},{"title":"Interface: ConversationExample","type":0,"sectionRef":"#","url":"/eliza/api/interfaces/ConversationExample/","content":"","keywords":"","version":"Next"},{"title":"Properties​","type":1,"pageTitle":"Interface: ConversationExample","url":"/eliza/api/interfaces/ConversationExample/#properties","content":" ","version":"Next","tagName":"h2"},{"title":"userId​","type":1,"pageTitle":"Interface: ConversationExample","url":"/eliza/api/interfaces/ConversationExample/#userid","content":" userId: `${string}-${string}-${string}-${string}-${string}`  Defined in​  packages/core/src/core/types.ts:34    ","version":"Next","tagName":"h3"},{"title":"content​","type":1,"pageTitle":"Interface: ConversationExample","url":"/eliza/api/interfaces/ConversationExample/#content","content":" content: Content  Defined in​  packages/core/src/core/types.ts:35 ","version":"Next","tagName":"h3"},{"title":"Interface: CreateAndBuyContent","type":0,"sectionRef":"#","url":"/eliza/api/interfaces/CreateAndBuyContent/","content":"","keywords":"","version":"Next"},{"title":"Extends​","type":1,"pageTitle":"Interface: CreateAndBuyContent","url":"/eliza/api/interfaces/CreateAndBuyContent/#extends","content":" Content  ","version":"Next","tagName":"h2"},{"title":"Properties​","type":1,"pageTitle":"Interface: CreateAndBuyContent","url":"/eliza/api/interfaces/CreateAndBuyContent/#properties","content":" ","version":"Next","tagName":"h2"},{"title":"deployerPrivateKey​","type":1,"pageTitle":"Interface: CreateAndBuyContent","url":"/eliza/api/interfaces/CreateAndBuyContent/#deployerprivatekey","content":" deployerPrivateKey: string  Defined in​  packages/core/src/actions/pumpfun.ts:23    ","version":"Next","tagName":"h3"},{"title":"tokenMetadata​","type":1,"pageTitle":"Interface: CreateAndBuyContent","url":"/eliza/api/interfaces/CreateAndBuyContent/#tokenmetadata","content":" tokenMetadata: CreateTokenMetadata  Defined in​  packages/core/src/actions/pumpfun.ts:24    ","version":"Next","tagName":"h3"},{"title":"buyAmountSol​","type":1,"pageTitle":"Interface: CreateAndBuyContent","url":"/eliza/api/interfaces/CreateAndBuyContent/#buyamountsol","content":" buyAmountSol: string | number  Defined in​  packages/core/src/actions/pumpfun.ts:25    ","version":"Next","tagName":"h3"},{"title":"priorityFee​","type":1,"pageTitle":"Interface: CreateAndBuyContent","url":"/eliza/api/interfaces/CreateAndBuyContent/#priorityfee","content":" priorityFee: object  unitLimit​  unitLimit: number  unitPrice​  unitPrice: number  Defined in​  packages/core/src/actions/pumpfun.ts:26    ","version":"Next","tagName":"h3"},{"title":"allowOffCurve​","type":1,"pageTitle":"Interface: CreateAndBuyContent","url":"/eliza/api/interfaces/CreateAndBuyContent/#allowoffcurve","content":" allowOffCurve: boolean  Defined in​  packages/core/src/actions/pumpfun.ts:30    ","version":"Next","tagName":"h3"},{"title":"text​","type":1,"pageTitle":"Interface: CreateAndBuyContent","url":"/eliza/api/interfaces/CreateAndBuyContent/#text","content":" text: string  Inherited from​  Content.text  Defined in​  packages/core/src/core/types.ts:13    ","version":"Next","tagName":"h3"},{"title":"action?​","type":1,"pageTitle":"Interface: CreateAndBuyContent","url":"/eliza/api/interfaces/CreateAndBuyContent/#action","content":" optional action: string  Inherited from​  Content.action  Defined in​  packages/core/src/core/types.ts:14    ","version":"Next","tagName":"h3"},{"title":"source?​","type":1,"pageTitle":"Interface: CreateAndBuyContent","url":"/eliza/api/interfaces/CreateAndBuyContent/#source","content":" optional source: string  Inherited from​  Content.source  Defined in​  packages/core/src/core/types.ts:15    ","version":"Next","tagName":"h3"},{"title":"url?​","type":1,"pageTitle":"Interface: CreateAndBuyContent","url":"/eliza/api/interfaces/CreateAndBuyContent/#url","content":" optional url: string  Inherited from​  Content.url  Defined in​  packages/core/src/core/types.ts:16    ","version":"Next","tagName":"h3"},{"title":"inReplyTo?​","type":1,"pageTitle":"Interface: CreateAndBuyContent","url":"/eliza/api/interfaces/CreateAndBuyContent/#inreplyto","content":" optional inReplyTo: `${string}-${string}-${string}-${string}-${string}`  Inherited from​  Content.inReplyTo  Defined in​  packages/core/src/core/types.ts:17    ","version":"Next","tagName":"h3"},{"title":"attachments?​","type":1,"pageTitle":"Interface: CreateAndBuyContent","url":"/eliza/api/interfaces/CreateAndBuyContent/#attachments","content":" optional attachments: Media[]  Inherited from​  Content.attachments  Defined in​  packages/core/src/core/types.ts:18 ","version":"Next","tagName":"h3"},{"title":"Interface: EvaluationExample","type":0,"sectionRef":"#","url":"/eliza/api/interfaces/EvaluationExample/","content":"","keywords":"","version":"Next"},{"title":"Properties​","type":1,"pageTitle":"Interface: EvaluationExample","url":"/eliza/api/interfaces/EvaluationExample/#properties","content":" ","version":"Next","tagName":"h2"},{"title":"context​","type":1,"pageTitle":"Interface: EvaluationExample","url":"/eliza/api/interfaces/EvaluationExample/#context","content":" context: string  Defined in​  packages/core/src/core/types.ts:225    ","version":"Next","tagName":"h3"},{"title":"messages​","type":1,"pageTitle":"Interface: EvaluationExample","url":"/eliza/api/interfaces/EvaluationExample/#messages","content":" messages: ActionExample[]  Defined in​  packages/core/src/core/types.ts:226    ","version":"Next","tagName":"h3"},{"title":"outcome​","type":1,"pageTitle":"Interface: EvaluationExample","url":"/eliza/api/interfaces/EvaluationExample/#outcome","content":" outcome: string  Defined in​  packages/core/src/core/types.ts:227 ","version":"Next","tagName":"h3"},{"title":"Interface: Evaluator","type":0,"sectionRef":"#","url":"/eliza/api/interfaces/Evaluator/","content":"","keywords":"","version":"Next"},{"title":"Properties​","type":1,"pageTitle":"Interface: Evaluator","url":"/eliza/api/interfaces/Evaluator/#properties","content":" ","version":"Next","tagName":"h2"},{"title":"description​","type":1,"pageTitle":"Interface: Evaluator","url":"/eliza/api/interfaces/Evaluator/#description","content":" description: string  Defined in​  packages/core/src/core/types.ts:234    ","version":"Next","tagName":"h3"},{"title":"similes​","type":1,"pageTitle":"Interface: Evaluator","url":"/eliza/api/interfaces/Evaluator/#similes","content":" similes: string[]  Defined in​  packages/core/src/core/types.ts:235    ","version":"Next","tagName":"h3"},{"title":"examples​","type":1,"pageTitle":"Interface: Evaluator","url":"/eliza/api/interfaces/Evaluator/#examples","content":" examples: EvaluationExample[]  Defined in​  packages/core/src/core/types.ts:236    ","version":"Next","tagName":"h3"},{"title":"handler​","type":1,"pageTitle":"Interface: Evaluator","url":"/eliza/api/interfaces/Evaluator/#handler","content":" handler: Handler  Defined in​  packages/core/src/core/types.ts:237    ","version":"Next","tagName":"h3"},{"title":"name​","type":1,"pageTitle":"Interface: Evaluator","url":"/eliza/api/interfaces/Evaluator/#name","content":" name: string  Defined in​  packages/core/src/core/types.ts:238    ","version":"Next","tagName":"h3"},{"title":"validate​","type":1,"pageTitle":"Interface: Evaluator","url":"/eliza/api/interfaces/Evaluator/#validate","content":" validate: Validator  Defined in​  packages/core/src/core/types.ts:239 ","version":"Next","tagName":"h3"},{"title":"Interface: Goal","type":0,"sectionRef":"#","url":"/eliza/api/interfaces/Goal/","content":"","keywords":"","version":"Next"},{"title":"Properties​","type":1,"pageTitle":"Interface: Goal","url":"/eliza/api/interfaces/Goal/#properties","content":" ","version":"Next","tagName":"h2"},{"title":"id?​","type":1,"pageTitle":"Interface: Goal","url":"/eliza/api/interfaces/Goal/#id","content":" optional id: `${string}-${string}-${string}-${string}-${string}`  Defined in​  packages/core/src/core/types.ts:67    ","version":"Next","tagName":"h3"},{"title":"roomId​","type":1,"pageTitle":"Interface: Goal","url":"/eliza/api/interfaces/Goal/#roomid","content":" roomId: `${string}-${string}-${string}-${string}-${string}`  Defined in​  packages/core/src/core/types.ts:68    ","version":"Next","tagName":"h3"},{"title":"userId​","type":1,"pageTitle":"Interface: Goal","url":"/eliza/api/interfaces/Goal/#userid","content":" userId: `${string}-${string}-${string}-${string}-${string}`  Defined in​  packages/core/src/core/types.ts:69    ","version":"Next","tagName":"h3"},{"title":"name​","type":1,"pageTitle":"Interface: Goal","url":"/eliza/api/interfaces/Goal/#name","content":" name: string  Defined in​  packages/core/src/core/types.ts:70    ","version":"Next","tagName":"h3"},{"title":"status​","type":1,"pageTitle":"Interface: Goal","url":"/eliza/api/interfaces/Goal/#status","content":" status: GoalStatus  Defined in​  packages/core/src/core/types.ts:71    ","version":"Next","tagName":"h3"},{"title":"objectives​","type":1,"pageTitle":"Interface: Goal","url":"/eliza/api/interfaces/Goal/#objectives","content":" objectives: Objective[]  Defined in​  packages/core/src/core/types.ts:72 ","version":"Next","tagName":"h3"},{"title":"Interface: IAgentRuntime","type":0,"sectionRef":"#","url":"/eliza/api/interfaces/IAgentRuntime/","content":"","keywords":"","version":"Next"},{"title":"Properties​","type":1,"pageTitle":"Interface: IAgentRuntime","url":"/eliza/api/interfaces/IAgentRuntime/#properties","content":" ","version":"Next","tagName":"h2"},{"title":"agentId​","type":1,"pageTitle":"Interface: IAgentRuntime","url":"/eliza/api/interfaces/IAgentRuntime/#agentid","content":" agentId: `${string}-${string}-${string}-${string}-${string}`  Defined in​  packages/core/src/core/types.ts:499    ","version":"Next","tagName":"h3"},{"title":"serverUrl​","type":1,"pageTitle":"Interface: IAgentRuntime","url":"/eliza/api/interfaces/IAgentRuntime/#serverurl","content":" serverUrl: string  Defined in​  packages/core/src/core/types.ts:500    ","version":"Next","tagName":"h3"},{"title":"databaseAdapter​","type":1,"pageTitle":"Interface: IAgentRuntime","url":"/eliza/api/interfaces/IAgentRuntime/#databaseadapter","content":" databaseAdapter: IDatabaseAdapter  Defined in​  packages/core/src/core/types.ts:501    ","version":"Next","tagName":"h3"},{"title":"token​","type":1,"pageTitle":"Interface: IAgentRuntime","url":"/eliza/api/interfaces/IAgentRuntime/#token","content":" token: string  Defined in​  packages/core/src/core/types.ts:502    ","version":"Next","tagName":"h3"},{"title":"modelProvider​","type":1,"pageTitle":"Interface: IAgentRuntime","url":"/eliza/api/interfaces/IAgentRuntime/#modelprovider","content":" modelProvider: ModelProvider  Defined in​  packages/core/src/core/types.ts:503    ","version":"Next","tagName":"h3"},{"title":"imageGenModel​","type":1,"pageTitle":"Interface: IAgentRuntime","url":"/eliza/api/interfaces/IAgentRuntime/#imagegenmodel","content":" imageGenModel: ImageGenModel  Defined in​  packages/core/src/core/types.ts:504    ","version":"Next","tagName":"h3"},{"title":"character​","type":1,"pageTitle":"Interface: IAgentRuntime","url":"/eliza/api/interfaces/IAgentRuntime/#character","content":" character: Character  Defined in​  packages/core/src/core/types.ts:505    ","version":"Next","tagName":"h3"},{"title":"providers​","type":1,"pageTitle":"Interface: IAgentRuntime","url":"/eliza/api/interfaces/IAgentRuntime/#providers","content":" providers: Provider[]  Defined in​  packages/core/src/core/types.ts:506    ","version":"Next","tagName":"h3"},{"title":"actions​","type":1,"pageTitle":"Interface: IAgentRuntime","url":"/eliza/api/interfaces/IAgentRuntime/#actions","content":" actions: Action[]  Defined in​  packages/core/src/core/types.ts:507    ","version":"Next","tagName":"h3"},{"title":"messageManager​","type":1,"pageTitle":"Interface: IAgentRuntime","url":"/eliza/api/interfaces/IAgentRuntime/#messagemanager","content":" messageManager: IMemoryManager  Defined in​  packages/core/src/core/types.ts:509    ","version":"Next","tagName":"h3"},{"title":"descriptionManager​","type":1,"pageTitle":"Interface: IAgentRuntime","url":"/eliza/api/interfaces/IAgentRuntime/#descriptionmanager","content":" descriptionManager: IMemoryManager  Defined in​  packages/core/src/core/types.ts:510    ","version":"Next","tagName":"h3"},{"title":"factManager​","type":1,"pageTitle":"Interface: IAgentRuntime","url":"/eliza/api/interfaces/IAgentRuntime/#factmanager","content":" factManager: IMemoryManager  Defined in​  packages/core/src/core/types.ts:511    ","version":"Next","tagName":"h3"},{"title":"loreManager​","type":1,"pageTitle":"Interface: IAgentRuntime","url":"/eliza/api/interfaces/IAgentRuntime/#loremanager","content":" loreManager: IMemoryManager  Defined in​  packages/core/src/core/types.ts:512    ","version":"Next","tagName":"h3"},{"title":"imageDescriptionService​","type":1,"pageTitle":"Interface: IAgentRuntime","url":"/eliza/api/interfaces/IAgentRuntime/#imagedescriptionservice","content":" imageDescriptionService: IImageRecognitionService  Defined in​  packages/core/src/core/types.ts:513    ","version":"Next","tagName":"h3"},{"title":"transcriptionService​","type":1,"pageTitle":"Interface: IAgentRuntime","url":"/eliza/api/interfaces/IAgentRuntime/#transcriptionservice","content":" transcriptionService: ITranscriptionService  Defined in​  packages/core/src/core/types.ts:514    ","version":"Next","tagName":"h3"},{"title":"videoService​","type":1,"pageTitle":"Interface: IAgentRuntime","url":"/eliza/api/interfaces/IAgentRuntime/#videoservice","content":" videoService: IVideoService  Defined in​  packages/core/src/core/types.ts:515    ","version":"Next","tagName":"h3"},{"title":"llamaService​","type":1,"pageTitle":"Interface: IAgentRuntime","url":"/eliza/api/interfaces/IAgentRuntime/#llamaservice","content":" llamaService: ILlamaService  Defined in​  packages/core/src/core/types.ts:516    ","version":"Next","tagName":"h3"},{"title":"browserService​","type":1,"pageTitle":"Interface: IAgentRuntime","url":"/eliza/api/interfaces/IAgentRuntime/#browserservice","content":" browserService: IBrowserService  Defined in​  packages/core/src/core/types.ts:517    ","version":"Next","tagName":"h3"},{"title":"speechService​","type":1,"pageTitle":"Interface: IAgentRuntime","url":"/eliza/api/interfaces/IAgentRuntime/#speechservice","content":" speechService: ISpeechService  Defined in​  packages/core/src/core/types.ts:518    ","version":"Next","tagName":"h3"},{"title":"pdfService​","type":1,"pageTitle":"Interface: IAgentRuntime","url":"/eliza/api/interfaces/IAgentRuntime/#pdfservice","content":" pdfService: IPdfService  Defined in​  packages/core/src/core/types.ts:519  ","version":"Next","tagName":"h3"},{"title":"Methods​","type":1,"pageTitle":"Interface: IAgentRuntime","url":"/eliza/api/interfaces/IAgentRuntime/#methods","content":" ","version":"Next","tagName":"h2"},{"title":"getSetting()​","type":1,"pageTitle":"Interface: IAgentRuntime","url":"/eliza/api/interfaces/IAgentRuntime/#getsetting","content":" getSetting(key): string  Parameters​  • key: string  Returns​  string  Defined in​  packages/core/src/core/types.ts:521    ","version":"Next","tagName":"h3"},{"title":"getConversationLength()​","type":1,"pageTitle":"Interface: IAgentRuntime","url":"/eliza/api/interfaces/IAgentRuntime/#getconversationlength","content":" getConversationLength(): number  Returns​  number  Defined in​  packages/core/src/core/types.ts:524    ","version":"Next","tagName":"h3"},{"title":"processActions()​","type":1,"pageTitle":"Interface: IAgentRuntime","url":"/eliza/api/interfaces/IAgentRuntime/#processactions","content":" processActions(message, responses, state?, callback?): Promise&lt;void&gt;  Parameters​  • message: Memory  • responses: Memory[]  • state?: State  • callback?: HandlerCallback  Returns​  Promise&lt;void&gt;  Defined in​  packages/core/src/core/types.ts:525    ","version":"Next","tagName":"h3"},{"title":"evaluate()​","type":1,"pageTitle":"Interface: IAgentRuntime","url":"/eliza/api/interfaces/IAgentRuntime/#evaluate","content":" evaluate(message, state?): Promise&lt;string[]&gt;  Parameters​  • message: Memory  • state?: State  Returns​  Promise&lt;string[]&gt;  Defined in​  packages/core/src/core/types.ts:531    ","version":"Next","tagName":"h3"},{"title":"ensureParticipantExists()​","type":1,"pageTitle":"Interface: IAgentRuntime","url":"/eliza/api/interfaces/IAgentRuntime/#ensureparticipantexists","content":" ensureParticipantExists(userId, roomId): Promise&lt;void&gt;  Parameters​  • userId: `${string}-${string}-${string}-${string}-${string}`  • roomId: `${string}-${string}-${string}-${string}-${string}`  Returns​  Promise&lt;void&gt;  Defined in​  packages/core/src/core/types.ts:532    ","version":"Next","tagName":"h3"},{"title":"ensureUserExists()​","type":1,"pageTitle":"Interface: IAgentRuntime","url":"/eliza/api/interfaces/IAgentRuntime/#ensureuserexists","content":" ensureUserExists(userId, userName, name, source): Promise&lt;void&gt;  Parameters​  • userId: `${string}-${string}-${string}-${string}-${string}`  • userName: string  • name: string  • source: string  Returns​  Promise&lt;void&gt;  Defined in​  packages/core/src/core/types.ts:533    ","version":"Next","tagName":"h3"},{"title":"registerAction()​","type":1,"pageTitle":"Interface: IAgentRuntime","url":"/eliza/api/interfaces/IAgentRuntime/#registeraction","content":" registerAction(action): void  Parameters​  • action: Action  Returns​  void  Defined in​  packages/core/src/core/types.ts:539    ","version":"Next","tagName":"h3"},{"title":"ensureConnection()​","type":1,"pageTitle":"Interface: IAgentRuntime","url":"/eliza/api/interfaces/IAgentRuntime/#ensureconnection","content":" ensureConnection(userId, roomId, userName?, userScreenName?, source?): Promise&lt;void&gt;  Parameters​  • userId: `${string}-${string}-${string}-${string}-${string}`  • roomId: `${string}-${string}-${string}-${string}-${string}`  • userName?: string  • userScreenName?: string  • source?: string  Returns​  Promise&lt;void&gt;  Defined in​  packages/core/src/core/types.ts:540    ","version":"Next","tagName":"h3"},{"title":"ensureParticipantInRoom()​","type":1,"pageTitle":"Interface: IAgentRuntime","url":"/eliza/api/interfaces/IAgentRuntime/#ensureparticipantinroom","content":" ensureParticipantInRoom(userId, roomId): Promise&lt;void&gt;  Parameters​  • userId: `${string}-${string}-${string}-${string}-${string}`  • roomId: `${string}-${string}-${string}-${string}-${string}`  Returns​  Promise&lt;void&gt;  Defined in​  packages/core/src/core/types.ts:547    ","version":"Next","tagName":"h3"},{"title":"ensureRoomExists()​","type":1,"pageTitle":"Interface: IAgentRuntime","url":"/eliza/api/interfaces/IAgentRuntime/#ensureroomexists","content":" ensureRoomExists(roomId): Promise&lt;void&gt;  Parameters​  • roomId: `${string}-${string}-${string}-${string}-${string}`  Returns​  Promise&lt;void&gt;  Defined in​  packages/core/src/core/types.ts:548    ","version":"Next","tagName":"h3"},{"title":"composeState()​","type":1,"pageTitle":"Interface: IAgentRuntime","url":"/eliza/api/interfaces/IAgentRuntime/#composestate","content":" composeState(message, additionalKeys?): Promise&lt;State&gt;  Parameters​  • message: Memory  • additionalKeys?  Returns​  Promise&lt;State&gt;  Defined in​  packages/core/src/core/types.ts:549    ","version":"Next","tagName":"h3"},{"title":"updateRecentMessageState()​","type":1,"pageTitle":"Interface: IAgentRuntime","url":"/eliza/api/interfaces/IAgentRuntime/#updaterecentmessagestate","content":" updateRecentMessageState(state): Promise&lt;State&gt;  Parameters​  • state: State  Returns​  Promise&lt;State&gt;  Defined in​  packages/core/src/core/types.ts:553 ","version":"Next","tagName":"h3"},{"title":"Function: splitChunks()","type":0,"sectionRef":"#","url":"/eliza/api/functions/splitChunks/","content":"","keywords":"","version":"Next"},{"title":"Parameters​","type":1,"pageTitle":"Function: splitChunks()","url":"/eliza/api/functions/splitChunks/#parameters","content":" • runtime: any  • content: string  The text content to split into chunks  • chunkSize: number  The maximum size of each chunk in tokens  • bleed: number = 100  Number of characters to overlap between chunks (default: 100)  • modelClass: string  ","version":"Next","tagName":"h2"},{"title":"Returns​","type":1,"pageTitle":"Function: splitChunks()","url":"/eliza/api/functions/splitChunks/#returns","content":" Promise&lt;string[]&gt;  Promise resolving to array of text chunks with bleed sections  ","version":"Next","tagName":"h2"},{"title":"Defined in​","type":1,"pageTitle":"Function: splitChunks()","url":"/eliza/api/functions/splitChunks/#defined-in","content":" packages/core/src/core/generation.ts:329 ","version":"Next","tagName":"h2"},{"title":"Class: abstract DatabaseAdapter","type":0,"sectionRef":"#","url":"/eliza/api/classes/DatabaseAdapter/","content":"","keywords":"","version":"Next"},{"title":"Extended by​","type":1,"pageTitle":"Class: abstract DatabaseAdapter","url":"/eliza/api/classes/DatabaseAdapter/#extended-by","content":" PostgresDatabaseAdapterSqliteDatabaseAdapter  ","version":"Next","tagName":"h2"},{"title":"Implements​","type":1,"pageTitle":"Class: abstract DatabaseAdapter","url":"/eliza/api/classes/DatabaseAdapter/#implements","content":" IDatabaseAdapter  ","version":"Next","tagName":"h2"},{"title":"Constructors​","type":1,"pageTitle":"Class: abstract DatabaseAdapter","url":"/eliza/api/classes/DatabaseAdapter/#constructors","content":" ","version":"Next","tagName":"h2"},{"title":"new DatabaseAdapter()​","type":1,"pageTitle":"Class: abstract DatabaseAdapter","url":"/eliza/api/classes/DatabaseAdapter/#new-databaseadapter","content":" new DatabaseAdapter(): DatabaseAdapter  Returns​  DatabaseAdapter  ","version":"Next","tagName":"h3"},{"title":"Properties​","type":1,"pageTitle":"Class: abstract DatabaseAdapter","url":"/eliza/api/classes/DatabaseAdapter/#properties","content":" ","version":"Next","tagName":"h2"},{"title":"db​","type":1,"pageTitle":"Class: abstract DatabaseAdapter","url":"/eliza/api/classes/DatabaseAdapter/#db","content":" db: any  The database instance.  Implementation of​  IDatabaseAdapter.db  Defined in​  packages/core/src/core/database.ts:21  ","version":"Next","tagName":"h3"},{"title":"Methods​","type":1,"pageTitle":"Class: abstract DatabaseAdapter","url":"/eliza/api/classes/DatabaseAdapter/#methods","content":" ","version":"Next","tagName":"h2"},{"title":"getAccountById()​","type":1,"pageTitle":"Class: abstract DatabaseAdapter","url":"/eliza/api/classes/DatabaseAdapter/#getaccountbyid","content":" abstract getAccountById(userId): Promise&lt;Account&gt;  Retrieves an account by its ID.  Parameters​  • userId: `${string}-${string}-${string}-${string}-${string}`  The UUID of the user account to retrieve.  Returns​  Promise&lt;Account&gt;  A Promise that resolves to the Account object or null if not found.  Implementation of​  IDatabaseAdapter.getAccountById  Defined in​  packages/core/src/core/database.ts:27    ","version":"Next","tagName":"h3"},{"title":"createAccount()​","type":1,"pageTitle":"Class: abstract DatabaseAdapter","url":"/eliza/api/classes/DatabaseAdapter/#createaccount","content":" abstract createAccount(account): Promise&lt;boolean&gt;  Creates a new account in the database.  Parameters​  • account: Account  The account object to create.  Returns​  Promise&lt;boolean&gt;  A Promise that resolves when the account creation is complete.  Implementation of​  IDatabaseAdapter.createAccount  Defined in​  packages/core/src/core/database.ts:34    ","version":"Next","tagName":"h3"},{"title":"getMemories()​","type":1,"pageTitle":"Class: abstract DatabaseAdapter","url":"/eliza/api/classes/DatabaseAdapter/#getmemories","content":" abstract getMemories(params): Promise&lt;Memory[]&gt;  Retrieves memories based on the specified parameters.  Parameters​  • params  An object containing parameters for the memory retrieval.  • params.roomId: `${string}-${string}-${string}-${string}-${string}`  • params.count?: number  • params.unique?: boolean  • params.tableName: string  Returns​  Promise&lt;Memory[]&gt;  A Promise that resolves to an array of Memory objects.  Implementation of​  IDatabaseAdapter.getMemories  Defined in​  packages/core/src/core/database.ts:41    ","version":"Next","tagName":"h3"},{"title":"getMemoriesByRoomIds()​","type":1,"pageTitle":"Class: abstract DatabaseAdapter","url":"/eliza/api/classes/DatabaseAdapter/#getmemoriesbyroomids","content":" abstract getMemoriesByRoomIds(params): Promise&lt;Memory[]&gt;  Parameters​  • params  • params.agentId?: `${string}-${string}-${string}-${string}-${string}`  • params.roomIds: `${string}-${string}-${string}-${string}-${string}`[]  • params.tableName: string  Returns​  Promise&lt;Memory[]&gt;  Implementation of​  IDatabaseAdapter.getMemoriesByRoomIds  Defined in​  packages/core/src/core/database.ts:48    ","version":"Next","tagName":"h3"},{"title":"getMemoryById()​","type":1,"pageTitle":"Class: abstract DatabaseAdapter","url":"/eliza/api/classes/DatabaseAdapter/#getmemorybyid","content":" abstract getMemoryById(id): Promise&lt;Memory&gt;  Parameters​  • id: `${string}-${string}-${string}-${string}-${string}`  Returns​  Promise&lt;Memory&gt;  Implementation of​  IDatabaseAdapter.getMemoryById  Defined in​  packages/core/src/core/database.ts:54    ","version":"Next","tagName":"h3"},{"title":"getCachedEmbeddings()​","type":1,"pageTitle":"Class: abstract DatabaseAdapter","url":"/eliza/api/classes/DatabaseAdapter/#getcachedembeddings","content":" abstract getCachedEmbeddings(params): Promise&lt;object[]&gt;  Retrieves cached embeddings based on the specified query parameters.  Parameters​  • params  An object containing parameters for the embedding retrieval.  • params.query_table_name: string  • params.query_threshold: number  • params.query_input: string  • params.query_field_name: string  • params.query_field_sub_name: string  • params.query_match_count: number  Returns​  Promise&lt;object[]&gt;  A Promise that resolves to an array of objects containing embeddings and levenshtein scores.  Implementation of​  IDatabaseAdapter.getCachedEmbeddings  Defined in​  packages/core/src/core/database.ts:61    ","version":"Next","tagName":"h3"},{"title":"log()​","type":1,"pageTitle":"Class: abstract DatabaseAdapter","url":"/eliza/api/classes/DatabaseAdapter/#log","content":" abstract log(params): Promise&lt;void&gt;  Logs an event or action with the specified details.  Parameters​  • params  An object containing parameters for the log entry.  • params.body  • params.userId: `${string}-${string}-${string}-${string}-${string}`  • params.roomId: `${string}-${string}-${string}-${string}-${string}`  • params.type: string  Returns​  Promise&lt;void&gt;  A Promise that resolves when the log entry has been saved.  Implementation of​  IDatabaseAdapter.log  Defined in​  packages/core/src/core/database.ts:87    ","version":"Next","tagName":"h3"},{"title":"getActorDetails()​","type":1,"pageTitle":"Class: abstract DatabaseAdapter","url":"/eliza/api/classes/DatabaseAdapter/#getactordetails","content":" abstract getActorDetails(params): Promise&lt;Actor[]&gt;  Retrieves details of actors in a given room.  Parameters​  • params  An object containing the roomId to search for actors.  • params.roomId: `${string}-${string}-${string}-${string}-${string}`  Returns​  Promise&lt;Actor[]&gt;  A Promise that resolves to an array of Actor objects.  Implementation of​  IDatabaseAdapter.getActorDetails  Defined in​  packages/core/src/core/database.ts:99    ","version":"Next","tagName":"h3"},{"title":"searchMemories()​","type":1,"pageTitle":"Class: abstract DatabaseAdapter","url":"/eliza/api/classes/DatabaseAdapter/#searchmemories","content":" abstract searchMemories(params): Promise&lt;Memory[]&gt;  Searches for memories based on embeddings and other specified parameters.  Parameters​  • params  An object containing parameters for the memory search.  • params.tableName: string  • params.roomId: `${string}-${string}-${string}-${string}-${string}`  • params.embedding: number[]  • params.match_threshold: number  • params.match_count: number  • params.unique: boolean  Returns​  Promise&lt;Memory[]&gt;  A Promise that resolves to an array of Memory objects.  Implementation of​  IDatabaseAdapter.searchMemories  Defined in​  packages/core/src/core/database.ts:106    ","version":"Next","tagName":"h3"},{"title":"updateGoalStatus()​","type":1,"pageTitle":"Class: abstract DatabaseAdapter","url":"/eliza/api/classes/DatabaseAdapter/#updategoalstatus","content":" abstract updateGoalStatus(params): Promise&lt;void&gt;  Updates the status of a specific goal.  Parameters​  • params  An object containing the goalId and the new status.  • params.goalId: `${string}-${string}-${string}-${string}-${string}`  • params.status: GoalStatus  Returns​  Promise&lt;void&gt;  A Promise that resolves when the goal status has been updated.  Implementation of​  IDatabaseAdapter.updateGoalStatus  Defined in​  packages/core/src/core/database.ts:120    ","version":"Next","tagName":"h3"},{"title":"searchMemoriesByEmbedding()​","type":1,"pageTitle":"Class: abstract DatabaseAdapter","url":"/eliza/api/classes/DatabaseAdapter/#searchmemoriesbyembedding","content":" abstract searchMemoriesByEmbedding(embedding, params): Promise&lt;Memory[]&gt;  Searches for memories by embedding and other specified parameters.  Parameters​  • embedding: number[]  The embedding vector to search with.  • params  Additional parameters for the search.  • params.match_threshold?: number  • params.count?: number  • params.roomId?: `${string}-${string}-${string}-${string}-${string}`  • params.agentId?: `${string}-${string}-${string}-${string}-${string}`  • params.unique?: boolean  • params.tableName: string  Returns​  Promise&lt;Memory[]&gt;  A Promise that resolves to an array of Memory objects.  Implementation of​  IDatabaseAdapter.searchMemoriesByEmbedding  Defined in​  packages/core/src/core/database.ts:131    ","version":"Next","tagName":"h3"},{"title":"createMemory()​","type":1,"pageTitle":"Class: abstract DatabaseAdapter","url":"/eliza/api/classes/DatabaseAdapter/#creatememory","content":" abstract createMemory(memory, tableName, unique?): Promise&lt;void&gt;  Creates a new memory in the database.  Parameters​  • memory: Memory  The memory object to create.  • tableName: string  The table where the memory should be stored.  • unique?: boolean  Indicates if the memory should be unique.  Returns​  Promise&lt;void&gt;  A Promise that resolves when the memory has been created.  Implementation of​  IDatabaseAdapter.createMemory  Defined in​  packages/core/src/core/database.ts:150    ","version":"Next","tagName":"h3"},{"title":"removeMemory()​","type":1,"pageTitle":"Class: abstract DatabaseAdapter","url":"/eliza/api/classes/DatabaseAdapter/#removememory","content":" abstract removeMemory(memoryId, tableName): Promise&lt;void&gt;  Removes a specific memory from the database.  Parameters​  • memoryId: `${string}-${string}-${string}-${string}-${string}`  The UUID of the memory to remove.  • tableName: string  The table from which the memory should be removed.  Returns​  Promise&lt;void&gt;  A Promise that resolves when the memory has been removed.  Implementation of​  IDatabaseAdapter.removeMemory  Defined in​  packages/core/src/core/database.ts:162    ","version":"Next","tagName":"h3"},{"title":"removeAllMemories()​","type":1,"pageTitle":"Class: abstract DatabaseAdapter","url":"/eliza/api/classes/DatabaseAdapter/#removeallmemories","content":" abstract removeAllMemories(roomId, tableName): Promise&lt;void&gt;  Removes all memories associated with a specific room.  Parameters​  • roomId: `${string}-${string}-${string}-${string}-${string}`  The UUID of the room whose memories should be removed.  • tableName: string  The table from which the memories should be removed.  Returns​  Promise&lt;void&gt;  A Promise that resolves when all memories have been removed.  Implementation of​  IDatabaseAdapter.removeAllMemories  Defined in​  packages/core/src/core/database.ts:170    ","version":"Next","tagName":"h3"},{"title":"countMemories()​","type":1,"pageTitle":"Class: abstract DatabaseAdapter","url":"/eliza/api/classes/DatabaseAdapter/#countmemories","content":" abstract countMemories(roomId, unique?, tableName?): Promise&lt;number&gt;  Counts the number of memories in a specific room.  Parameters​  • roomId: `${string}-${string}-${string}-${string}-${string}`  The UUID of the room for which to count memories.  • unique?: boolean  Specifies whether to count only unique memories.  • tableName?: string  Optional table name to count memories from.  Returns​  Promise&lt;number&gt;  A Promise that resolves to the number of memories.  Implementation of​  IDatabaseAdapter.countMemories  Defined in​  packages/core/src/core/database.ts:179    ","version":"Next","tagName":"h3"},{"title":"getGoals()​","type":1,"pageTitle":"Class: abstract DatabaseAdapter","url":"/eliza/api/classes/DatabaseAdapter/#getgoals","content":" abstract getGoals(params): Promise&lt;Goal[]&gt;  Retrieves goals based on specified parameters.  Parameters​  • params  An object containing parameters for goal retrieval.  • params.roomId: `${string}-${string}-${string}-${string}-${string}`  • params.userId?: `${string}-${string}-${string}-${string}-${string}`  • params.onlyInProgress?: boolean  • params.count?: number  Returns​  Promise&lt;Goal[]&gt;  A Promise that resolves to an array of Goal objects.  Implementation of​  IDatabaseAdapter.getGoals  Defined in​  packages/core/src/core/database.ts:190    ","version":"Next","tagName":"h3"},{"title":"updateGoal()​","type":1,"pageTitle":"Class: abstract DatabaseAdapter","url":"/eliza/api/classes/DatabaseAdapter/#updategoal","content":" abstract updateGoal(goal): Promise&lt;void&gt;  Updates a specific goal in the database.  Parameters​  • goal: Goal  The goal object with updated properties.  Returns​  Promise&lt;void&gt;  A Promise that resolves when the goal has been updated.  Implementation of​  IDatabaseAdapter.updateGoal  Defined in​  packages/core/src/core/database.ts:202    ","version":"Next","tagName":"h3"},{"title":"createGoal()​","type":1,"pageTitle":"Class: abstract DatabaseAdapter","url":"/eliza/api/classes/DatabaseAdapter/#creategoal","content":" abstract createGoal(goal): Promise&lt;void&gt;  Creates a new goal in the database.  Parameters​  • goal: Goal  The goal object to create.  Returns​  Promise&lt;void&gt;  A Promise that resolves when the goal has been created.  Implementation of​  IDatabaseAdapter.createGoal  Defined in​  packages/core/src/core/database.ts:209    ","version":"Next","tagName":"h3"},{"title":"removeGoal()​","type":1,"pageTitle":"Class: abstract DatabaseAdapter","url":"/eliza/api/classes/DatabaseAdapter/#removegoal","content":" abstract removeGoal(goalId): Promise&lt;void&gt;  Removes a specific goal from the database.  Parameters​  • goalId: `${string}-${string}-${string}-${string}-${string}`  The UUID of the goal to remove.  Returns​  Promise&lt;void&gt;  A Promise that resolves when the goal has been removed.  Implementation of​  IDatabaseAdapter.removeGoal  Defined in​  packages/core/src/core/database.ts:216    ","version":"Next","tagName":"h3"},{"title":"removeAllGoals()​","type":1,"pageTitle":"Class: abstract DatabaseAdapter","url":"/eliza/api/classes/DatabaseAdapter/#removeallgoals","content":" abstract removeAllGoals(roomId): Promise&lt;void&gt;  Removes all goals associated with a specific room.  Parameters​  • roomId: `${string}-${string}-${string}-${string}-${string}`  The UUID of the room whose goals should be removed.  Returns​  Promise&lt;void&gt;  A Promise that resolves when all goals have been removed.  Implementation of​  IDatabaseAdapter.removeAllGoals  Defined in​  packages/core/src/core/database.ts:223    ","version":"Next","tagName":"h3"},{"title":"getRoom()​","type":1,"pageTitle":"Class: abstract DatabaseAdapter","url":"/eliza/api/classes/DatabaseAdapter/#getroom","content":" abstract getRoom(roomId): Promise&lt;`${string}-${string}-${string}-${string}-${string}`&gt;  Retrieves the room ID for a given room, if it exists.  Parameters​  • roomId: `${string}-${string}-${string}-${string}-${string}`  The UUID of the room to retrieve.  Returns​  Promise&lt;`${string}-${string}-${string}-${string}-${string}`&gt;  A Promise that resolves to the room ID or null if not found.  Implementation of​  IDatabaseAdapter.getRoom  Defined in​  packages/core/src/core/database.ts:230    ","version":"Next","tagName":"h3"},{"title":"createRoom()​","type":1,"pageTitle":"Class: abstract DatabaseAdapter","url":"/eliza/api/classes/DatabaseAdapter/#createroom","content":" abstract createRoom(roomId?): Promise&lt;`${string}-${string}-${string}-${string}-${string}`&gt;  Creates a new room with an optional specified ID.  Parameters​  • roomId?: `${string}-${string}-${string}-${string}-${string}`  Optional UUID to assign to the new room.  Returns​  Promise&lt;`${string}-${string}-${string}-${string}-${string}`&gt;  A Promise that resolves to the UUID of the created room.  Implementation of​  IDatabaseAdapter.createRoom  Defined in​  packages/core/src/core/database.ts:237    ","version":"Next","tagName":"h3"},{"title":"removeRoom()​","type":1,"pageTitle":"Class: abstract DatabaseAdapter","url":"/eliza/api/classes/DatabaseAdapter/#removeroom","content":" abstract removeRoom(roomId): Promise&lt;void&gt;  Removes a specific room from the database.  Parameters​  • roomId: `${string}-${string}-${string}-${string}-${string}`  The UUID of the room to remove.  Returns​  Promise&lt;void&gt;  A Promise that resolves when the room has been removed.  Implementation of​  IDatabaseAdapter.removeRoom  Defined in​  packages/core/src/core/database.ts:244    ","version":"Next","tagName":"h3"},{"title":"getRoomsForParticipant()​","type":1,"pageTitle":"Class: abstract DatabaseAdapter","url":"/eliza/api/classes/DatabaseAdapter/#getroomsforparticipant","content":" abstract getRoomsForParticipant(userId): Promise&lt;`${string}-${string}-${string}-${string}-${string}`[]&gt;  Retrieves room IDs for which a specific user is a participant.  Parameters​  • userId: `${string}-${string}-${string}-${string}-${string}`  The UUID of the user.  Returns​  Promise&lt;`${string}-${string}-${string}-${string}-${string}`[]&gt;  A Promise that resolves to an array of room IDs.  Implementation of​  IDatabaseAdapter.getRoomsForParticipant  Defined in​  packages/core/src/core/database.ts:251    ","version":"Next","tagName":"h3"},{"title":"getRoomsForParticipants()​","type":1,"pageTitle":"Class: abstract DatabaseAdapter","url":"/eliza/api/classes/DatabaseAdapter/#getroomsforparticipants","content":" abstract getRoomsForParticipants(userIds): Promise&lt;`${string}-${string}-${string}-${string}-${string}`[]&gt;  Retrieves room IDs for which specific users are participants.  Parameters​  • userIds: `${string}-${string}-${string}-${string}-${string}`[]  An array of UUIDs of the users.  Returns​  Promise&lt;`${string}-${string}-${string}-${string}-${string}`[]&gt;  A Promise that resolves to an array of room IDs.  Implementation of​  IDatabaseAdapter.getRoomsForParticipants  Defined in​  packages/core/src/core/database.ts:258    ","version":"Next","tagName":"h3"},{"title":"addParticipant()​","type":1,"pageTitle":"Class: abstract DatabaseAdapter","url":"/eliza/api/classes/DatabaseAdapter/#addparticipant","content":" abstract addParticipant(userId, roomId): Promise&lt;boolean&gt;  Adds a user as a participant to a specific room.  Parameters​  • userId: `${string}-${string}-${string}-${string}-${string}`  The UUID of the user to add as a participant.  • roomId: `${string}-${string}-${string}-${string}-${string}`  The UUID of the room to which the user will be added.  Returns​  Promise&lt;boolean&gt;  A Promise that resolves to a boolean indicating success or failure.  Implementation of​  IDatabaseAdapter.addParticipant  Defined in​  packages/core/src/core/database.ts:266    ","version":"Next","tagName":"h3"},{"title":"removeParticipant()​","type":1,"pageTitle":"Class: abstract DatabaseAdapter","url":"/eliza/api/classes/DatabaseAdapter/#removeparticipant","content":" abstract removeParticipant(userId, roomId): Promise&lt;boolean&gt;  Removes a user as a participant from a specific room.  Parameters​  • userId: `${string}-${string}-${string}-${string}-${string}`  The UUID of the user to remove as a participant.  • roomId: `${string}-${string}-${string}-${string}-${string}`  The UUID of the room from which the user will be removed.  Returns​  Promise&lt;boolean&gt;  A Promise that resolves to a boolean indicating success or failure.  Implementation of​  IDatabaseAdapter.removeParticipant  Defined in​  packages/core/src/core/database.ts:274    ","version":"Next","tagName":"h3"},{"title":"getParticipantsForAccount()​","type":1,"pageTitle":"Class: abstract DatabaseAdapter","url":"/eliza/api/classes/DatabaseAdapter/#getparticipantsforaccount","content":" getParticipantsForAccount(userId)​  abstract getParticipantsForAccount(userId): Promise&lt;Participant[]&gt;  Retrieves participants associated with a specific account.  Parameters​  • userId: `${string}-${string}-${string}-${string}-${string}`  The UUID of the account.  Returns​  Promise&lt;Participant[]&gt;  A Promise that resolves to an array of Participant objects.  Implementation of​  IDatabaseAdapter.getParticipantsForAccount  Defined in​  packages/core/src/core/database.ts:281  getParticipantsForAccount(userId)​  abstract getParticipantsForAccount(userId): Promise&lt;Participant[]&gt;  Retrieves participants associated with a specific account.  Parameters​  • userId: `${string}-${string}-${string}-${string}-${string}`  The UUID of the account.  Returns​  Promise&lt;Participant[]&gt;  A Promise that resolves to an array of Participant objects.  Implementation of​  IDatabaseAdapter.getParticipantsForAccount  Defined in​  packages/core/src/core/database.ts:288    ","version":"Next","tagName":"h3"},{"title":"getParticipantsForRoom()​","type":1,"pageTitle":"Class: abstract DatabaseAdapter","url":"/eliza/api/classes/DatabaseAdapter/#getparticipantsforroom","content":" abstract getParticipantsForRoom(roomId): Promise&lt;`${string}-${string}-${string}-${string}-${string}`[]&gt;  Retrieves participants for a specific room.  Parameters​  • roomId: `${string}-${string}-${string}-${string}-${string}`  The UUID of the room for which to retrieve participants.  Returns​  Promise&lt;`${string}-${string}-${string}-${string}-${string}`[]&gt;  A Promise that resolves to an array of UUIDs representing the participants.  Implementation of​  IDatabaseAdapter.getParticipantsForRoom  Defined in​  packages/core/src/core/database.ts:295    ","version":"Next","tagName":"h3"},{"title":"getParticipantUserState()​","type":1,"pageTitle":"Class: abstract DatabaseAdapter","url":"/eliza/api/classes/DatabaseAdapter/#getparticipantuserstate","content":" abstract getParticipantUserState(roomId, userId): Promise&lt;&quot;FOLLOWED&quot; | &quot;MUTED&quot;&gt;  Parameters​  • roomId: `${string}-${string}-${string}-${string}-${string}`  • userId: `${string}-${string}-${string}-${string}-${string}`  Returns​  Promise&lt;&quot;FOLLOWED&quot; | &quot;MUTED&quot;&gt;  Implementation of​  IDatabaseAdapter.getParticipantUserState  Defined in​  packages/core/src/core/database.ts:297    ","version":"Next","tagName":"h3"},{"title":"setParticipantUserState()​","type":1,"pageTitle":"Class: abstract DatabaseAdapter","url":"/eliza/api/classes/DatabaseAdapter/#setparticipantuserstate","content":" abstract setParticipantUserState(roomId, userId, state): Promise&lt;void&gt;  Parameters​  • roomId: `${string}-${string}-${string}-${string}-${string}`  • userId: `${string}-${string}-${string}-${string}-${string}`  • state: &quot;FOLLOWED&quot; | &quot;MUTED&quot;  Returns​  Promise&lt;void&gt;  Implementation of​  IDatabaseAdapter.setParticipantUserState  Defined in​  packages/core/src/core/database.ts:301    ","version":"Next","tagName":"h3"},{"title":"createRelationship()​","type":1,"pageTitle":"Class: abstract DatabaseAdapter","url":"/eliza/api/classes/DatabaseAdapter/#createrelationship","content":" abstract createRelationship(params): Promise&lt;boolean&gt;  Creates a new relationship between two users.  Parameters​  • params  An object containing the UUIDs of the two users (userA and userB).  • params.userA: `${string}-${string}-${string}-${string}-${string}`  • params.userB: `${string}-${string}-${string}-${string}-${string}`  Returns​  Promise&lt;boolean&gt;  A Promise that resolves to a boolean indicating success or failure of the creation.  Implementation of​  IDatabaseAdapter.createRelationship  Defined in​  packages/core/src/core/database.ts:312    ","version":"Next","tagName":"h3"},{"title":"getRelationship()​","type":1,"pageTitle":"Class: abstract DatabaseAdapter","url":"/eliza/api/classes/DatabaseAdapter/#getrelationship","content":" abstract getRelationship(params): Promise&lt;Relationship&gt;  Retrieves a relationship between two users if it exists.  Parameters​  • params  An object containing the UUIDs of the two users (userA and userB).  • params.userA: `${string}-${string}-${string}-${string}-${string}`  • params.userB: `${string}-${string}-${string}-${string}-${string}`  Returns​  Promise&lt;Relationship&gt;  A Promise that resolves to the Relationship object or null if not found.  Implementation of​  IDatabaseAdapter.getRelationship  Defined in​  packages/core/src/core/database.ts:322    ","version":"Next","tagName":"h3"},{"title":"getRelationships()​","type":1,"pageTitle":"Class: abstract DatabaseAdapter","url":"/eliza/api/classes/DatabaseAdapter/#getrelationships","content":" abstract getRelationships(params): Promise&lt;Relationship[]&gt;  Retrieves all relationships for a specific user.  Parameters​  • params  An object containing the UUID of the user.  • params.userId: `${string}-${string}-${string}-${string}-${string}`  Returns​  Promise&lt;Relationship[]&gt;  A Promise that resolves to an array of Relationship objects.  Implementation of​  IDatabaseAdapter.getRelationships  Defined in​  packages/core/src/core/database.ts:332 ","version":"Next","tagName":"h3"},{"title":"Interface: IBrowserService","type":0,"sectionRef":"#","url":"/eliza/api/interfaces/IBrowserService/","content":"","keywords":"","version":"Next"},{"title":"Methods​","type":1,"pageTitle":"Interface: IBrowserService","url":"/eliza/api/interfaces/IBrowserService/#methods","content":" ","version":"Next","tagName":"h2"},{"title":"initialize()​","type":1,"pageTitle":"Interface: IBrowserService","url":"/eliza/api/interfaces/IBrowserService/#initialize","content":" initialize(): Promise&lt;void&gt;  Returns​  Promise&lt;void&gt;  Defined in​  packages/core/src/core/types.ts:599    ","version":"Next","tagName":"h3"},{"title":"closeBrowser()​","type":1,"pageTitle":"Interface: IBrowserService","url":"/eliza/api/interfaces/IBrowserService/#closebrowser","content":" closeBrowser(): Promise&lt;void&gt;  Returns​  Promise&lt;void&gt;  Defined in​  packages/core/src/core/types.ts:600    ","version":"Next","tagName":"h3"},{"title":"getPageContent()​","type":1,"pageTitle":"Interface: IBrowserService","url":"/eliza/api/interfaces/IBrowserService/#getpagecontent","content":" getPageContent(url): Promise&lt;object&gt;  Parameters​  • url: string  Returns​  Promise&lt;object&gt;  title​  title: string  description​  description: string  bodyContent​  bodyContent: string  Defined in​  packages/core/src/core/types.ts:601 ","version":"Next","tagName":"h3"},{"title":"Interface: IImageRecognitionService","type":0,"sectionRef":"#","url":"/eliza/api/interfaces/IImageRecognitionService/","content":"","keywords":"","version":"Next"},{"title":"Methods​","type":1,"pageTitle":"Interface: IImageRecognitionService","url":"/eliza/api/interfaces/IImageRecognitionService/#methods","content":" ","version":"Next","tagName":"h2"},{"title":"initialize()​","type":1,"pageTitle":"Interface: IImageRecognitionService","url":"/eliza/api/interfaces/IImageRecognitionService/#initialize","content":" initialize(modelId?, device?): Promise&lt;void&gt;  Parameters​  • modelId?: string  • device?: string  Returns​  Promise&lt;void&gt;  Defined in​  packages/core/src/core/types.ts:557    ","version":"Next","tagName":"h3"},{"title":"describeImage()​","type":1,"pageTitle":"Interface: IImageRecognitionService","url":"/eliza/api/interfaces/IImageRecognitionService/#describeimage","content":" describeImage(imageUrl): Promise&lt;object&gt;  Parameters​  • imageUrl: string  Returns​  Promise&lt;object&gt;  title​  title: string  description​  description: string  Defined in​  packages/core/src/core/types.ts:558 ","version":"Next","tagName":"h3"},{"title":"Interface: ILlamaService","type":0,"sectionRef":"#","url":"/eliza/api/interfaces/ILlamaService/","content":"","keywords":"","version":"Next"},{"title":"Methods​","type":1,"pageTitle":"Interface: ILlamaService","url":"/eliza/api/interfaces/ILlamaService/#methods","content":" ","version":"Next","tagName":"h2"},{"title":"initializeModel()​","type":1,"pageTitle":"Interface: ILlamaService","url":"/eliza/api/interfaces/ILlamaService/#initializemodel","content":" initializeModel(): Promise&lt;void&gt;  Returns​  Promise&lt;void&gt;  Defined in​  packages/core/src/core/types.ts:578    ","version":"Next","tagName":"h3"},{"title":"queueMessageCompletion()​","type":1,"pageTitle":"Interface: ILlamaService","url":"/eliza/api/interfaces/ILlamaService/#queuemessagecompletion","content":" queueMessageCompletion(context, temperature, stop, frequency_penalty, presence_penalty, max_tokens): Promise&lt;any&gt;  Parameters​  • context: string  • temperature: number  • stop: string[]  • frequency_penalty: number  • presence_penalty: number  • max_tokens: number  Returns​  Promise&lt;any&gt;  Defined in​  packages/core/src/core/types.ts:579    ","version":"Next","tagName":"h3"},{"title":"queueTextCompletion()​","type":1,"pageTitle":"Interface: ILlamaService","url":"/eliza/api/interfaces/ILlamaService/#queuetextcompletion","content":" queueTextCompletion(context, temperature, stop, frequency_penalty, presence_penalty, max_tokens): Promise&lt;string&gt;  Parameters​  • context: string  • temperature: number  • stop: string[]  • frequency_penalty: number  • presence_penalty: number  • max_tokens: number  Returns​  Promise&lt;string&gt;  Defined in​  packages/core/src/core/types.ts:587    ","version":"Next","tagName":"h3"},{"title":"getEmbeddingResponse()​","type":1,"pageTitle":"Interface: ILlamaService","url":"/eliza/api/interfaces/ILlamaService/#getembeddingresponse","content":" getEmbeddingResponse(input): Promise&lt;number[]&gt;  Parameters​  • input: string  Returns​  Promise&lt;number[]&gt;  Defined in​  packages/core/src/core/types.ts:595 ","version":"Next","tagName":"h3"},{"title":"Interface: IMemoryManager","type":0,"sectionRef":"#","url":"/eliza/api/interfaces/IMemoryManager/","content":"","keywords":"","version":"Next"},{"title":"Properties​","type":1,"pageTitle":"Interface: IMemoryManager","url":"/eliza/api/interfaces/IMemoryManager/#properties","content":" ","version":"Next","tagName":"h2"},{"title":"runtime​","type":1,"pageTitle":"Interface: IMemoryManager","url":"/eliza/api/interfaces/IMemoryManager/#runtime","content":" runtime: IAgentRuntime  Defined in​  packages/core/src/core/types.ts:459    ","version":"Next","tagName":"h3"},{"title":"tableName​","type":1,"pageTitle":"Interface: IMemoryManager","url":"/eliza/api/interfaces/IMemoryManager/#tablename","content":" tableName: string  Defined in​  packages/core/src/core/types.ts:460    ","version":"Next","tagName":"h3"},{"title":"constructor​","type":1,"pageTitle":"Interface: IMemoryManager","url":"/eliza/api/interfaces/IMemoryManager/#constructor","content":" constructor: Function  Defined in​  packages/core/src/core/types.ts:462  ","version":"Next","tagName":"h3"},{"title":"Methods​","type":1,"pageTitle":"Interface: IMemoryManager","url":"/eliza/api/interfaces/IMemoryManager/#methods","content":" ","version":"Next","tagName":"h2"},{"title":"addEmbeddingToMemory()​","type":1,"pageTitle":"Interface: IMemoryManager","url":"/eliza/api/interfaces/IMemoryManager/#addembeddingtomemory","content":" addEmbeddingToMemory(memory): Promise&lt;Memory&gt;  Parameters​  • memory: Memory  Returns​  Promise&lt;Memory&gt;  Defined in​  packages/core/src/core/types.ts:464    ","version":"Next","tagName":"h3"},{"title":"getMemories()​","type":1,"pageTitle":"Interface: IMemoryManager","url":"/eliza/api/interfaces/IMemoryManager/#getmemories","content":" getMemories(opts): Promise&lt;Memory[]&gt;  Parameters​  • opts  • opts.roomId: `${string}-${string}-${string}-${string}-${string}`  • opts.count?: number  • opts.unique?: boolean  • opts.agentId?: `${string}-${string}-${string}-${string}-${string}`  • opts.start?: number  • opts.end?: number  Returns​  Promise&lt;Memory[]&gt;  Defined in​  packages/core/src/core/types.ts:465    ","version":"Next","tagName":"h3"},{"title":"getCachedEmbeddings()​","type":1,"pageTitle":"Interface: IMemoryManager","url":"/eliza/api/interfaces/IMemoryManager/#getcachedembeddings","content":" getCachedEmbeddings(content): Promise&lt;object[]&gt;  Parameters​  • content: string  Returns​  Promise&lt;object[]&gt;  Defined in​  packages/core/src/core/types.ts:473    ","version":"Next","tagName":"h3"},{"title":"getMemoryById()​","type":1,"pageTitle":"Interface: IMemoryManager","url":"/eliza/api/interfaces/IMemoryManager/#getmemorybyid","content":" getMemoryById(id): Promise&lt;Memory&gt;  Parameters​  • id: `${string}-${string}-${string}-${string}-${string}`  Returns​  Promise&lt;Memory&gt;  Defined in​  packages/core/src/core/types.ts:476    ","version":"Next","tagName":"h3"},{"title":"getMemoriesByRoomIds()​","type":1,"pageTitle":"Interface: IMemoryManager","url":"/eliza/api/interfaces/IMemoryManager/#getmemoriesbyroomids","content":" getMemoriesByRoomIds(params): Promise&lt;Memory[]&gt;  Parameters​  • params  • params.roomIds: `${string}-${string}-${string}-${string}-${string}`[]  • params.agentId?: `${string}-${string}-${string}-${string}-${string}`  Returns​  Promise&lt;Memory[]&gt;  Defined in​  packages/core/src/core/types.ts:477    ","version":"Next","tagName":"h3"},{"title":"searchMemoriesByEmbedding()​","type":1,"pageTitle":"Interface: IMemoryManager","url":"/eliza/api/interfaces/IMemoryManager/#searchmemoriesbyembedding","content":" searchMemoriesByEmbedding(embedding, opts): Promise&lt;Memory[]&gt;  Parameters​  • embedding: number[]  • opts  • opts.match_threshold?: number  • opts.count?: number  • opts.roomId: `${string}-${string}-${string}-${string}-${string}`  • opts.unique?: boolean  • opts.agentId?: `${string}-${string}-${string}-${string}-${string}`  Returns​  Promise&lt;Memory[]&gt;  Defined in​  packages/core/src/core/types.ts:481    ","version":"Next","tagName":"h3"},{"title":"createMemory()​","type":1,"pageTitle":"Interface: IMemoryManager","url":"/eliza/api/interfaces/IMemoryManager/#creatememory","content":" createMemory(memory, unique?): Promise&lt;void&gt;  Parameters​  • memory: Memory  • unique?: boolean  Returns​  Promise&lt;void&gt;  Defined in​  packages/core/src/core/types.ts:491    ","version":"Next","tagName":"h3"},{"title":"removeMemory()​","type":1,"pageTitle":"Interface: IMemoryManager","url":"/eliza/api/interfaces/IMemoryManager/#removememory","content":" removeMemory(memoryId): Promise&lt;void&gt;  Parameters​  • memoryId: `${string}-${string}-${string}-${string}-${string}`  Returns​  Promise&lt;void&gt;  Defined in​  packages/core/src/core/types.ts:492    ","version":"Next","tagName":"h3"},{"title":"removeAllMemories()​","type":1,"pageTitle":"Interface: IMemoryManager","url":"/eliza/api/interfaces/IMemoryManager/#removeallmemories","content":" removeAllMemories(roomId): Promise&lt;void&gt;  Parameters​  • roomId: `${string}-${string}-${string}-${string}-${string}`  Returns​  Promise&lt;void&gt;  Defined in​  packages/core/src/core/types.ts:493    ","version":"Next","tagName":"h3"},{"title":"countMemories()​","type":1,"pageTitle":"Interface: IMemoryManager","url":"/eliza/api/interfaces/IMemoryManager/#countmemories","content":" countMemories(roomId, unique?): Promise&lt;number&gt;  Parameters​  • roomId: `${string}-${string}-${string}-${string}-${string}`  • unique?: boolean  Returns​  Promise&lt;number&gt;  Defined in​  packages/core/src/core/types.ts:494 ","version":"Next","tagName":"h3"},{"title":"Interface: IPdfService","type":0,"sectionRef":"#","url":"/eliza/api/interfaces/IPdfService/","content":"","keywords":"","version":"Next"},{"title":"Methods​","type":1,"pageTitle":"Interface: IPdfService","url":"/eliza/api/interfaces/IPdfService/#methods","content":" ","version":"Next","tagName":"h2"},{"title":"convertPdfToText()​","type":1,"pageTitle":"Interface: IPdfService","url":"/eliza/api/interfaces/IPdfService/#convertpdftotext","content":" convertPdfToText(pdfBuffer): Promise&lt;string&gt;  Parameters​  • pdfBuffer: Buffer  Returns​  Promise&lt;string&gt;  Defined in​  packages/core/src/core/types.ts:611 ","version":"Next","tagName":"h3"},{"title":"Interface: ISpeechService","type":0,"sectionRef":"#","url":"/eliza/api/interfaces/ISpeechService/","content":"","keywords":"","version":"Next"},{"title":"Methods​","type":1,"pageTitle":"Interface: ISpeechService","url":"/eliza/api/interfaces/ISpeechService/#methods","content":" ","version":"Next","tagName":"h2"},{"title":"generate()​","type":1,"pageTitle":"Interface: ISpeechService","url":"/eliza/api/interfaces/ISpeechService/#generate","content":" generate(runtime, text): Promise&lt;Readable&gt;  Parameters​  • runtime: IAgentRuntime  • text: string  Returns​  Promise&lt;Readable&gt;  Defined in​  packages/core/src/core/types.ts:607 ","version":"Next","tagName":"h3"},{"title":"Interface: ITranscriptionService","type":0,"sectionRef":"#","url":"/eliza/api/interfaces/ITranscriptionService/","content":"","keywords":"","version":"Next"},{"title":"Methods​","type":1,"pageTitle":"Interface: ITranscriptionService","url":"/eliza/api/interfaces/ITranscriptionService/#methods","content":" ","version":"Next","tagName":"h2"},{"title":"transcribeAttachment()​","type":1,"pageTitle":"Interface: ITranscriptionService","url":"/eliza/api/interfaces/ITranscriptionService/#transcribeattachment","content":" transcribeAttachment(audioBuffer): Promise&lt;string&gt;  Parameters​  • audioBuffer: ArrayBuffer  Returns​  Promise&lt;string&gt;  Defined in​  packages/core/src/core/types.ts:564    ","version":"Next","tagName":"h3"},{"title":"transcribeAttachmentLocally()​","type":1,"pageTitle":"Interface: ITranscriptionService","url":"/eliza/api/interfaces/ITranscriptionService/#transcribeattachmentlocally","content":" transcribeAttachmentLocally(audioBuffer): Promise&lt;string&gt;  Parameters​  • audioBuffer: ArrayBuffer  Returns​  Promise&lt;string&gt;  Defined in​  packages/core/src/core/types.ts:565    ","version":"Next","tagName":"h3"},{"title":"transcribe()​","type":1,"pageTitle":"Interface: ITranscriptionService","url":"/eliza/api/interfaces/ITranscriptionService/#transcribe","content":" transcribe(audioBuffer): Promise&lt;string&gt;  Parameters​  • audioBuffer: ArrayBuffer  Returns​  Promise&lt;string&gt;  Defined in​  packages/core/src/core/types.ts:568    ","version":"Next","tagName":"h3"},{"title":"transcribeLocally()​","type":1,"pageTitle":"Interface: ITranscriptionService","url":"/eliza/api/interfaces/ITranscriptionService/#transcribelocally","content":" transcribeLocally(audioBuffer): Promise&lt;string&gt;  Parameters​  • audioBuffer: ArrayBuffer  Returns​  Promise&lt;string&gt;  Defined in​  packages/core/src/core/types.ts:569 ","version":"Next","tagName":"h3"},{"title":"Interface: IVideoService","type":0,"sectionRef":"#","url":"/eliza/api/interfaces/IVideoService/","content":"","keywords":"","version":"Next"},{"title":"Methods​","type":1,"pageTitle":"Interface: IVideoService","url":"/eliza/api/interfaces/IVideoService/#methods","content":" ","version":"Next","tagName":"h2"},{"title":"isVideoUrl()​","type":1,"pageTitle":"Interface: IVideoService","url":"/eliza/api/interfaces/IVideoService/#isvideourl","content":" isVideoUrl(url): boolean  Parameters​  • url: string  Returns​  boolean  Defined in​  packages/core/src/core/types.ts:573    ","version":"Next","tagName":"h3"},{"title":"processVideo()​","type":1,"pageTitle":"Interface: IVideoService","url":"/eliza/api/interfaces/IVideoService/#processvideo","content":" processVideo(url): Promise&lt;Media&gt;  Parameters​  • url: string  Returns​  Promise&lt;Media&gt;  Defined in​  packages/core/src/core/types.ts:574 ","version":"Next","tagName":"h3"},{"title":"Interface: Memory","type":0,"sectionRef":"#","url":"/eliza/api/interfaces/Memory/","content":"","keywords":"","version":"Next"},{"title":"Properties​","type":1,"pageTitle":"Interface: Memory","url":"/eliza/api/interfaces/Memory/#properties","content":" ","version":"Next","tagName":"h2"},{"title":"id?​","type":1,"pageTitle":"Interface: Memory","url":"/eliza/api/interfaces/Memory/#id","content":" optional id: `${string}-${string}-${string}-${string}-${string}`  Defined in​  packages/core/src/core/types.ts:165    ","version":"Next","tagName":"h3"},{"title":"userId​","type":1,"pageTitle":"Interface: Memory","url":"/eliza/api/interfaces/Memory/#userid","content":" userId: `${string}-${string}-${string}-${string}-${string}`  Defined in​  packages/core/src/core/types.ts:166    ","version":"Next","tagName":"h3"},{"title":"agentId​","type":1,"pageTitle":"Interface: Memory","url":"/eliza/api/interfaces/Memory/#agentid","content":" agentId: `${string}-${string}-${string}-${string}-${string}`  Defined in​  packages/core/src/core/types.ts:167    ","version":"Next","tagName":"h3"},{"title":"createdAt?​","type":1,"pageTitle":"Interface: Memory","url":"/eliza/api/interfaces/Memory/#createdat","content":" optional createdAt: number  Defined in​  packages/core/src/core/types.ts:168    ","version":"Next","tagName":"h3"},{"title":"content​","type":1,"pageTitle":"Interface: Memory","url":"/eliza/api/interfaces/Memory/#content","content":" content: Content  Defined in​  packages/core/src/core/types.ts:169    ","version":"Next","tagName":"h3"},{"title":"embedding?​","type":1,"pageTitle":"Interface: Memory","url":"/eliza/api/interfaces/Memory/#embedding","content":" optional embedding: number[]  Defined in​  packages/core/src/core/types.ts:170    ","version":"Next","tagName":"h3"},{"title":"roomId​","type":1,"pageTitle":"Interface: Memory","url":"/eliza/api/interfaces/Memory/#roomid","content":" roomId: `${string}-${string}-${string}-${string}-${string}`  Defined in​  packages/core/src/core/types.ts:171    ","version":"Next","tagName":"h3"},{"title":"unique?​","type":1,"pageTitle":"Interface: Memory","url":"/eliza/api/interfaces/Memory/#unique","content":" optional unique: boolean  Defined in​  packages/core/src/core/types.ts:172 ","version":"Next","tagName":"h3"},{"title":"Interface: MessageExample","type":0,"sectionRef":"#","url":"/eliza/api/interfaces/MessageExample/","content":"","keywords":"","version":"Next"},{"title":"Properties​","type":1,"pageTitle":"Interface: MessageExample","url":"/eliza/api/interfaces/MessageExample/#properties","content":" ","version":"Next","tagName":"h2"},{"title":"user​","type":1,"pageTitle":"Interface: MessageExample","url":"/eliza/api/interfaces/MessageExample/#user","content":" user: string  Defined in​  packages/core/src/core/types.ts:179    ","version":"Next","tagName":"h3"},{"title":"content​","type":1,"pageTitle":"Interface: MessageExample","url":"/eliza/api/interfaces/MessageExample/#content","content":" content: Content  Defined in​  packages/core/src/core/types.ts:180 ","version":"Next","tagName":"h3"},{"title":"Interface: Objective","type":0,"sectionRef":"#","url":"/eliza/api/interfaces/Objective/","content":"","keywords":"","version":"Next"},{"title":"Properties​","type":1,"pageTitle":"Interface: Objective","url":"/eliza/api/interfaces/Objective/#properties","content":" ","version":"Next","tagName":"h2"},{"title":"id?​","type":1,"pageTitle":"Interface: Objective","url":"/eliza/api/interfaces/Objective/#id","content":" optional id: string  Defined in​  packages/core/src/core/types.ts:52    ","version":"Next","tagName":"h3"},{"title":"description​","type":1,"pageTitle":"Interface: Objective","url":"/eliza/api/interfaces/Objective/#description","content":" description: string  Defined in​  packages/core/src/core/types.ts:53    ","version":"Next","tagName":"h3"},{"title":"completed​","type":1,"pageTitle":"Interface: Objective","url":"/eliza/api/interfaces/Objective/#completed","content":" completed: boolean  Defined in​  packages/core/src/core/types.ts:54 ","version":"Next","tagName":"h3"},{"title":"Interface: Participant","type":0,"sectionRef":"#","url":"/eliza/api/interfaces/Participant/","content":"","keywords":"","version":"Next"},{"title":"Properties​","type":1,"pageTitle":"Interface: Participant","url":"/eliza/api/interfaces/Participant/#properties","content":" ","version":"Next","tagName":"h2"},{"title":"id​","type":1,"pageTitle":"Interface: Participant","url":"/eliza/api/interfaces/Participant/#id","content":" id: `${string}-${string}-${string}-${string}-${string}`  Defined in​  packages/core/src/core/types.ts:282    ","version":"Next","tagName":"h3"},{"title":"account​","type":1,"pageTitle":"Interface: Participant","url":"/eliza/api/interfaces/Participant/#account","content":" account: Account  Defined in​  packages/core/src/core/types.ts:283 ","version":"Next","tagName":"h3"},{"title":"Interface: Provider","type":0,"sectionRef":"#","url":"/eliza/api/interfaces/Provider/","content":"","keywords":"","version":"Next"},{"title":"Properties​","type":1,"pageTitle":"Interface: Provider","url":"/eliza/api/interfaces/Provider/#properties","content":" ","version":"Next","tagName":"h2"},{"title":"get()​","type":1,"pageTitle":"Interface: Provider","url":"/eliza/api/interfaces/Provider/#get","content":" get: (runtime, message, state?) =&gt; Promise&lt;any&gt;  Parameters​  • runtime: IAgentRuntime  • message: Memory  • state?: State  Returns​  Promise&lt;any&gt;  Defined in​  packages/core/src/core/types.ts:246 ","version":"Next","tagName":"h3"},{"title":"Interface: Relationship","type":0,"sectionRef":"#","url":"/eliza/api/interfaces/Relationship/","content":"","keywords":"","version":"Next"},{"title":"Properties​","type":1,"pageTitle":"Interface: Relationship","url":"/eliza/api/interfaces/Relationship/#properties","content":" ","version":"Next","tagName":"h2"},{"title":"id​","type":1,"pageTitle":"Interface: Relationship","url":"/eliza/api/interfaces/Relationship/#id","content":" id: `${string}-${string}-${string}-${string}-${string}`  Defined in​  packages/core/src/core/types.ts:257    ","version":"Next","tagName":"h3"},{"title":"userA​","type":1,"pageTitle":"Interface: Relationship","url":"/eliza/api/interfaces/Relationship/#usera","content":" userA: `${string}-${string}-${string}-${string}-${string}`  Defined in​  packages/core/src/core/types.ts:258    ","version":"Next","tagName":"h3"},{"title":"userB​","type":1,"pageTitle":"Interface: Relationship","url":"/eliza/api/interfaces/Relationship/#userb","content":" userB: `${string}-${string}-${string}-${string}-${string}`  Defined in​  packages/core/src/core/types.ts:259    ","version":"Next","tagName":"h3"},{"title":"userId​","type":1,"pageTitle":"Interface: Relationship","url":"/eliza/api/interfaces/Relationship/#userid","content":" userId: `${string}-${string}-${string}-${string}-${string}`  Defined in​  packages/core/src/core/types.ts:260    ","version":"Next","tagName":"h3"},{"title":"roomId​","type":1,"pageTitle":"Interface: Relationship","url":"/eliza/api/interfaces/Relationship/#roomid","content":" roomId: `${string}-${string}-${string}-${string}-${string}`  Defined in​  packages/core/src/core/types.ts:261    ","version":"Next","tagName":"h3"},{"title":"status​","type":1,"pageTitle":"Interface: Relationship","url":"/eliza/api/interfaces/Relationship/#status","content":" status: string  Defined in​  packages/core/src/core/types.ts:262    ","version":"Next","tagName":"h3"},{"title":"createdAt?​","type":1,"pageTitle":"Interface: Relationship","url":"/eliza/api/interfaces/Relationship/#createdat","content":" optional createdAt: string  Defined in​  packages/core/src/core/types.ts:263 ","version":"Next","tagName":"h3"},{"title":"Interface: Room","type":0,"sectionRef":"#","url":"/eliza/api/interfaces/Room/","content":"","keywords":"","version":"Next"},{"title":"Properties​","type":1,"pageTitle":"Interface: Room","url":"/eliza/api/interfaces/Room/#properties","content":" ","version":"Next","tagName":"h2"},{"title":"id​","type":1,"pageTitle":"Interface: Room","url":"/eliza/api/interfaces/Room/#id","content":" id: `${string}-${string}-${string}-${string}-${string}`  Defined in​  packages/core/src/core/types.ts:290    ","version":"Next","tagName":"h3"},{"title":"participants​","type":1,"pageTitle":"Interface: Room","url":"/eliza/api/interfaces/Room/#participants","content":" participants: Participant[]  Defined in​  packages/core/src/core/types.ts:291 ","version":"Next","tagName":"h3"},{"title":"Interface: State","type":0,"sectionRef":"#","url":"/eliza/api/interfaces/State/","content":"","keywords":"","version":"Next"},{"title":"Indexable​","type":1,"pageTitle":"Interface: State","url":"/eliza/api/interfaces/State/#indexable","content":" [key: string]: unknown  ","version":"Next","tagName":"h2"},{"title":"Properties​","type":1,"pageTitle":"Interface: State","url":"/eliza/api/interfaces/State/#properties","content":" ","version":"Next","tagName":"h2"},{"title":"userId?​","type":1,"pageTitle":"Interface: State","url":"/eliza/api/interfaces/State/#userid","content":" optional userId: `${string}-${string}-${string}-${string}-${string}`  Defined in​  packages/core/src/core/types.ts:131    ","version":"Next","tagName":"h3"},{"title":"agentId?​","type":1,"pageTitle":"Interface: State","url":"/eliza/api/interfaces/State/#agentid","content":" optional agentId: `${string}-${string}-${string}-${string}-${string}`  Defined in​  packages/core/src/core/types.ts:132    ","version":"Next","tagName":"h3"},{"title":"bio​","type":1,"pageTitle":"Interface: State","url":"/eliza/api/interfaces/State/#bio","content":" bio: string  Defined in​  packages/core/src/core/types.ts:133    ","version":"Next","tagName":"h3"},{"title":"lore​","type":1,"pageTitle":"Interface: State","url":"/eliza/api/interfaces/State/#lore","content":" lore: string  Defined in​  packages/core/src/core/types.ts:134    ","version":"Next","tagName":"h3"},{"title":"messageDirections​","type":1,"pageTitle":"Interface: State","url":"/eliza/api/interfaces/State/#messagedirections","content":" messageDirections: string  Defined in​  packages/core/src/core/types.ts:135    ","version":"Next","tagName":"h3"},{"title":"postDirections​","type":1,"pageTitle":"Interface: State","url":"/eliza/api/interfaces/State/#postdirections","content":" postDirections: string  Defined in​  packages/core/src/core/types.ts:136    ","version":"Next","tagName":"h3"},{"title":"roomId​","type":1,"pageTitle":"Interface: State","url":"/eliza/api/interfaces/State/#roomid","content":" roomId: `${string}-${string}-${string}-${string}-${string}`  Defined in​  packages/core/src/core/types.ts:137    ","version":"Next","tagName":"h3"},{"title":"agentName?​","type":1,"pageTitle":"Interface: State","url":"/eliza/api/interfaces/State/#agentname","content":" optional agentName: string  Defined in​  packages/core/src/core/types.ts:138    ","version":"Next","tagName":"h3"},{"title":"senderName?​","type":1,"pageTitle":"Interface: State","url":"/eliza/api/interfaces/State/#sendername","content":" optional senderName: string  Defined in​  packages/core/src/core/types.ts:139    ","version":"Next","tagName":"h3"},{"title":"actors​","type":1,"pageTitle":"Interface: State","url":"/eliza/api/interfaces/State/#actors","content":" actors: string  Defined in​  packages/core/src/core/types.ts:140    ","version":"Next","tagName":"h3"},{"title":"actorsData?​","type":1,"pageTitle":"Interface: State","url":"/eliza/api/interfaces/State/#actorsdata","content":" optional actorsData: Actor[]  Defined in​  packages/core/src/core/types.ts:141    ","version":"Next","tagName":"h3"},{"title":"goals?​","type":1,"pageTitle":"Interface: State","url":"/eliza/api/interfaces/State/#goals","content":" optional goals: string  Defined in​  packages/core/src/core/types.ts:142    ","version":"Next","tagName":"h3"},{"title":"goalsData?​","type":1,"pageTitle":"Interface: State","url":"/eliza/api/interfaces/State/#goalsdata","content":" optional goalsData: Goal[]  Defined in​  packages/core/src/core/types.ts:143    ","version":"Next","tagName":"h3"},{"title":"recentMessages​","type":1,"pageTitle":"Interface: State","url":"/eliza/api/interfaces/State/#recentmessages","content":" recentMessages: string  Defined in​  packages/core/src/core/types.ts:144    ","version":"Next","tagName":"h3"},{"title":"recentMessagesData​","type":1,"pageTitle":"Interface: State","url":"/eliza/api/interfaces/State/#recentmessagesdata","content":" recentMessagesData: Memory[]  Defined in​  packages/core/src/core/types.ts:145    ","version":"Next","tagName":"h3"},{"title":"recentFacts?​","type":1,"pageTitle":"Interface: State","url":"/eliza/api/interfaces/State/#recentfacts","content":" optional recentFacts: string  Defined in​  packages/core/src/core/types.ts:146    ","version":"Next","tagName":"h3"},{"title":"recentFactsData?​","type":1,"pageTitle":"Interface: State","url":"/eliza/api/interfaces/State/#recentfactsdata","content":" optional recentFactsData: Memory[]  Defined in​  packages/core/src/core/types.ts:147    ","version":"Next","tagName":"h3"},{"title":"relevantFacts?​","type":1,"pageTitle":"Interface: State","url":"/eliza/api/interfaces/State/#relevantfacts","content":" optional relevantFacts: string  Defined in​  packages/core/src/core/types.ts:148    ","version":"Next","tagName":"h3"},{"title":"relevantFactsData?​","type":1,"pageTitle":"Interface: State","url":"/eliza/api/interfaces/State/#relevantfactsdata","content":" optional relevantFactsData: Memory[]  Defined in​  packages/core/src/core/types.ts:149    ","version":"Next","tagName":"h3"},{"title":"actionNames?​","type":1,"pageTitle":"Interface: State","url":"/eliza/api/interfaces/State/#actionnames","content":" optional actionNames: string  Defined in​  packages/core/src/core/types.ts:150    ","version":"Next","tagName":"h3"},{"title":"actions?​","type":1,"pageTitle":"Interface: State","url":"/eliza/api/interfaces/State/#actions","content":" optional actions: string  Defined in​  packages/core/src/core/types.ts:151    ","version":"Next","tagName":"h3"},{"title":"actionsData?​","type":1,"pageTitle":"Interface: State","url":"/eliza/api/interfaces/State/#actionsdata","content":" optional actionsData: Action[]  Defined in​  packages/core/src/core/types.ts:152    ","version":"Next","tagName":"h3"},{"title":"actionExamples?​","type":1,"pageTitle":"Interface: State","url":"/eliza/api/interfaces/State/#actionexamples","content":" optional actionExamples: string  Defined in​  packages/core/src/core/types.ts:153    ","version":"Next","tagName":"h3"},{"title":"providers?​","type":1,"pageTitle":"Interface: State","url":"/eliza/api/interfaces/State/#providers","content":" optional providers: string  Defined in​  packages/core/src/core/types.ts:154    ","version":"Next","tagName":"h3"},{"title":"responseData?​","type":1,"pageTitle":"Interface: State","url":"/eliza/api/interfaces/State/#responsedata","content":" optional responseData: Content  Defined in​  packages/core/src/core/types.ts:155    ","version":"Next","tagName":"h3"},{"title":"recentInteractionsData?​","type":1,"pageTitle":"Interface: State","url":"/eliza/api/interfaces/State/#recentinteractionsdata","content":" optional recentInteractionsData: Memory[]  Defined in​  packages/core/src/core/types.ts:156    ","version":"Next","tagName":"h3"},{"title":"recentInteractions?​","type":1,"pageTitle":"Interface: State","url":"/eliza/api/interfaces/State/#recentinteractions","content":" optional recentInteractions: string  Defined in​  packages/core/src/core/types.ts:157 ","version":"Next","tagName":"h3"},{"title":"Type Alias: Character","type":0,"sectionRef":"#","url":"/eliza/api/type-aliases/Character/","content":"","keywords":"","version":"Next"},{"title":"Type declaration​","type":1,"pageTitle":"Type Alias: Character","url":"/eliza/api/type-aliases/Character/#type-declaration","content":" ","version":"Next","tagName":"h2"},{"title":"id?​","type":1,"pageTitle":"Type Alias: Character","url":"/eliza/api/type-aliases/Character/#id","content":" optional id: UUID  ","version":"Next","tagName":"h3"},{"title":"name​","type":1,"pageTitle":"Type Alias: Character","url":"/eliza/api/type-aliases/Character/#name","content":" name: string  ","version":"Next","tagName":"h3"},{"title":"system?​","type":1,"pageTitle":"Type Alias: Character","url":"/eliza/api/type-aliases/Character/#system","content":" optional system: string  ","version":"Next","tagName":"h3"},{"title":"modelProvider​","type":1,"pageTitle":"Type Alias: Character","url":"/eliza/api/type-aliases/Character/#modelprovider","content":" modelProvider: ModelProvider  ","version":"Next","tagName":"h3"},{"title":"modelEndpointOverride?​","type":1,"pageTitle":"Type Alias: Character","url":"/eliza/api/type-aliases/Character/#modelendpointoverride","content":" optional modelEndpointOverride: string  ","version":"Next","tagName":"h3"},{"title":"imageGenModel?​","type":1,"pageTitle":"Type Alias: Character","url":"/eliza/api/type-aliases/Character/#imagegenmodel","content":" optional imageGenModel: ImageGenModel  ","version":"Next","tagName":"h3"},{"title":"templates?​","type":1,"pageTitle":"Type Alias: Character","url":"/eliza/api/type-aliases/Character/#templates","content":" optional templates: object  Index Signature​  [key: string]: string  ","version":"Next","tagName":"h3"},{"title":"bio​","type":1,"pageTitle":"Type Alias: Character","url":"/eliza/api/type-aliases/Character/#bio","content":" bio: string | string[]  ","version":"Next","tagName":"h3"},{"title":"lore​","type":1,"pageTitle":"Type Alias: Character","url":"/eliza/api/type-aliases/Character/#lore","content":" lore: string[]  ","version":"Next","tagName":"h3"},{"title":"messageExamples​","type":1,"pageTitle":"Type Alias: Character","url":"/eliza/api/type-aliases/Character/#messageexamples","content":" messageExamples: MessageExample[][]  ","version":"Next","tagName":"h3"},{"title":"postExamples​","type":1,"pageTitle":"Type Alias: Character","url":"/eliza/api/type-aliases/Character/#postexamples","content":" postExamples: string[]  ","version":"Next","tagName":"h3"},{"title":"people​","type":1,"pageTitle":"Type Alias: Character","url":"/eliza/api/type-aliases/Character/#people","content":" people: string[]  ","version":"Next","tagName":"h3"},{"title":"topics​","type":1,"pageTitle":"Type Alias: Character","url":"/eliza/api/type-aliases/Character/#topics","content":" topics: string[]  ","version":"Next","tagName":"h3"},{"title":"adjectives​","type":1,"pageTitle":"Type Alias: Character","url":"/eliza/api/type-aliases/Character/#adjectives","content":" adjectives: string[]  ","version":"Next","tagName":"h3"},{"title":"knowledge?​","type":1,"pageTitle":"Type Alias: Character","url":"/eliza/api/type-aliases/Character/#knowledge","content":" optional knowledge: string[]  ","version":"Next","tagName":"h3"},{"title":"clients​","type":1,"pageTitle":"Type Alias: Character","url":"/eliza/api/type-aliases/Character/#clients","content":" clients: Clients[]  ","version":"Next","tagName":"h3"},{"title":"plugins​","type":1,"pageTitle":"Type Alias: Character","url":"/eliza/api/type-aliases/Character/#plugins","content":" plugins: Plugin[]  ","version":"Next","tagName":"h3"},{"title":"settings?​","type":1,"pageTitle":"Type Alias: Character","url":"/eliza/api/type-aliases/Character/#settings","content":" optional settings: object  ","version":"Next","tagName":"h3"},{"title":"settings.secrets?​","type":1,"pageTitle":"Type Alias: Character","url":"/eliza/api/type-aliases/Character/#settingssecrets","content":" optional secrets: object  Index Signature​  [key: string]: string  ","version":"Next","tagName":"h3"},{"title":"settings.voice?​","type":1,"pageTitle":"Type Alias: Character","url":"/eliza/api/type-aliases/Character/#settingsvoice","content":" optional voice: object  ","version":"Next","tagName":"h3"},{"title":"settings.voice.model?​","type":1,"pageTitle":"Type Alias: Character","url":"/eliza/api/type-aliases/Character/#settingsvoicemodel","content":" optional model: string  ","version":"Next","tagName":"h3"},{"title":"settings.voice.url?​","type":1,"pageTitle":"Type Alias: Character","url":"/eliza/api/type-aliases/Character/#settingsvoiceurl","content":" optional url: string  ","version":"Next","tagName":"h3"},{"title":"settings.model?​","type":1,"pageTitle":"Type Alias: Character","url":"/eliza/api/type-aliases/Character/#settingsmodel","content":" optional model: string  ","version":"Next","tagName":"h3"},{"title":"settings.embeddingModel?​","type":1,"pageTitle":"Type Alias: Character","url":"/eliza/api/type-aliases/Character/#settingsembeddingmodel","content":" optional embeddingModel: string  ","version":"Next","tagName":"h3"},{"title":"style​","type":1,"pageTitle":"Type Alias: Character","url":"/eliza/api/type-aliases/Character/#style","content":" style: object  ","version":"Next","tagName":"h3"},{"title":"style.all​","type":1,"pageTitle":"Type Alias: Character","url":"/eliza/api/type-aliases/Character/#styleall","content":" all: string[]  ","version":"Next","tagName":"h3"},{"title":"style.chat​","type":1,"pageTitle":"Type Alias: Character","url":"/eliza/api/type-aliases/Character/#stylechat","content":" chat: string[]  ","version":"Next","tagName":"h3"},{"title":"style.post​","type":1,"pageTitle":"Type Alias: Character","url":"/eliza/api/type-aliases/Character/#stylepost","content":" post: string[]  ","version":"Next","tagName":"h3"},{"title":"Defined in​","type":1,"pageTitle":"Type Alias: Character","url":"/eliza/api/type-aliases/Character/#defined-in","content":" packages/core/src/core/types.ts:318 ","version":"Next","tagName":"h2"},{"title":"Type Alias: Handler()","type":0,"sectionRef":"#","url":"/eliza/api/type-aliases/Handler/","content":"","keywords":"","version":"Next"},{"title":"Parameters​","type":1,"pageTitle":"Type Alias: Handler()","url":"/eliza/api/type-aliases/Handler/#parameters","content":" • runtime: IAgentRuntime  • message: Memory  • state?: State  • options?  • callback?: HandlerCallback  ","version":"Next","tagName":"h2"},{"title":"Returns​","type":1,"pageTitle":"Type Alias: Handler()","url":"/eliza/api/type-aliases/Handler/#returns","content":" Promise&lt;unknown&gt;  ","version":"Next","tagName":"h2"},{"title":"Defined in​","type":1,"pageTitle":"Type Alias: Handler()","url":"/eliza/api/type-aliases/Handler/#defined-in","content":" packages/core/src/core/types.ts:186 ","version":"Next","tagName":"h2"},{"title":"Type Alias: HandlerCallback()","type":0,"sectionRef":"#","url":"/eliza/api/type-aliases/HandlerCallback/","content":"","keywords":"","version":"Next"},{"title":"Parameters​","type":1,"pageTitle":"Type Alias: HandlerCallback()","url":"/eliza/api/type-aliases/HandlerCallback/#parameters","content":" • response: Content  • files?: any  ","version":"Next","tagName":"h2"},{"title":"Returns​","type":1,"pageTitle":"Type Alias: HandlerCallback()","url":"/eliza/api/type-aliases/HandlerCallback/#returns","content":" Promise&lt;Memory[]&gt;  ","version":"Next","tagName":"h2"},{"title":"Defined in​","type":1,"pageTitle":"Type Alias: HandlerCallback()","url":"/eliza/api/type-aliases/HandlerCallback/#defined-in","content":" packages/core/src/core/types.ts:195 ","version":"Next","tagName":"h2"},{"title":"Type Alias: Media","type":0,"sectionRef":"#","url":"/eliza/api/type-aliases/Media/","content":"","keywords":"","version":"Next"},{"title":"Type declaration​","type":1,"pageTitle":"Type Alias: Media","url":"/eliza/api/type-aliases/Media/#type-declaration","content":" ","version":"Next","tagName":"h2"},{"title":"id​","type":1,"pageTitle":"Type Alias: Media","url":"/eliza/api/type-aliases/Media/#id","content":" id: string  ","version":"Next","tagName":"h3"},{"title":"url​","type":1,"pageTitle":"Type Alias: Media","url":"/eliza/api/type-aliases/Media/#url","content":" url: string  ","version":"Next","tagName":"h3"},{"title":"title​","type":1,"pageTitle":"Type Alias: Media","url":"/eliza/api/type-aliases/Media/#title","content":" title: string  ","version":"Next","tagName":"h3"},{"title":"source​","type":1,"pageTitle":"Type Alias: Media","url":"/eliza/api/type-aliases/Media/#source","content":" source: string  ","version":"Next","tagName":"h3"},{"title":"description​","type":1,"pageTitle":"Type Alias: Media","url":"/eliza/api/type-aliases/Media/#description","content":" description: string  ","version":"Next","tagName":"h3"},{"title":"text​","type":1,"pageTitle":"Type Alias: Media","url":"/eliza/api/type-aliases/Media/#text","content":" text: string  ","version":"Next","tagName":"h3"},{"title":"Defined in​","type":1,"pageTitle":"Type Alias: Media","url":"/eliza/api/type-aliases/Media/#defined-in","content":" packages/core/src/core/types.ts:294 ","version":"Next","tagName":"h2"},{"title":"Type Alias: Model","type":0,"sectionRef":"#","url":"/eliza/api/type-aliases/Model/","content":"","keywords":"","version":"Next"},{"title":"Type declaration​","type":1,"pageTitle":"Type Alias: Model","url":"/eliza/api/type-aliases/Model/#type-declaration","content":" ","version":"Next","tagName":"h2"},{"title":"endpoint?​","type":1,"pageTitle":"Type Alias: Model","url":"/eliza/api/type-aliases/Model/#endpoint","content":" optional endpoint: string  ","version":"Next","tagName":"h3"},{"title":"settings​","type":1,"pageTitle":"Type Alias: Model","url":"/eliza/api/type-aliases/Model/#settings","content":" settings: object  ","version":"Next","tagName":"h3"},{"title":"settings.maxInputTokens​","type":1,"pageTitle":"Type Alias: Model","url":"/eliza/api/type-aliases/Model/#settingsmaxinputtokens","content":" maxInputTokens: number  ","version":"Next","tagName":"h3"},{"title":"settings.maxOutputTokens​","type":1,"pageTitle":"Type Alias: Model","url":"/eliza/api/type-aliases/Model/#settingsmaxoutputtokens","content":" maxOutputTokens: number  ","version":"Next","tagName":"h3"},{"title":"settings.frequency_penalty?​","type":1,"pageTitle":"Type Alias: Model","url":"/eliza/api/type-aliases/Model/#settingsfrequency_penalty","content":" optional frequency_penalty: number  ","version":"Next","tagName":"h3"},{"title":"settings.presence_penalty?​","type":1,"pageTitle":"Type Alias: Model","url":"/eliza/api/type-aliases/Model/#settingspresence_penalty","content":" optional presence_penalty: number  ","version":"Next","tagName":"h3"},{"title":"settings.repetition_penalty?​","type":1,"pageTitle":"Type Alias: Model","url":"/eliza/api/type-aliases/Model/#settingsrepetition_penalty","content":" optional repetition_penalty: number  ","version":"Next","tagName":"h3"},{"title":"settings.stop​","type":1,"pageTitle":"Type Alias: Model","url":"/eliza/api/type-aliases/Model/#settingsstop","content":" stop: string[]  ","version":"Next","tagName":"h3"},{"title":"settings.temperature​","type":1,"pageTitle":"Type Alias: Model","url":"/eliza/api/type-aliases/Model/#settingstemperature","content":" temperature: number  ","version":"Next","tagName":"h3"},{"title":"model​","type":1,"pageTitle":"Type Alias: Model","url":"/eliza/api/type-aliases/Model/#model","content":" model: object  ","version":"Next","tagName":"h3"},{"title":"model.small​","type":1,"pageTitle":"Type Alias: Model","url":"/eliza/api/type-aliases/Model/#modelsmall","content":" small: string  ","version":"Next","tagName":"h3"},{"title":"model.medium​","type":1,"pageTitle":"Type Alias: Model","url":"/eliza/api/type-aliases/Model/#modelmedium","content":" medium: string  ","version":"Next","tagName":"h3"},{"title":"model.large​","type":1,"pageTitle":"Type Alias: Model","url":"/eliza/api/type-aliases/Model/#modellarge","content":" large: string  ","version":"Next","tagName":"h3"},{"title":"model.embedding?​","type":1,"pageTitle":"Type Alias: Model","url":"/eliza/api/type-aliases/Model/#modelembedding","content":" optional embedding: string  ","version":"Next","tagName":"h3"},{"title":"Defined in​","type":1,"pageTitle":"Type Alias: Model","url":"/eliza/api/type-aliases/Model/#defined-in","content":" packages/core/src/core/types.ts:82 ","version":"Next","tagName":"h2"},{"title":"Type Alias: Models","type":0,"sectionRef":"#","url":"/eliza/api/type-aliases/Models/","content":"","keywords":"","version":"Next"},{"title":"Type declaration​","type":1,"pageTitle":"Type Alias: Models","url":"/eliza/api/type-aliases/Models/#type-declaration","content":" ","version":"Next","tagName":"h2"},{"title":"openai​","type":1,"pageTitle":"Type Alias: Models","url":"/eliza/api/type-aliases/Models/#openai","content":" openai: Model  ","version":"Next","tagName":"h3"},{"title":"anthropic​","type":1,"pageTitle":"Type Alias: Models","url":"/eliza/api/type-aliases/Models/#anthropic","content":" anthropic: Model  ","version":"Next","tagName":"h3"},{"title":"grok​","type":1,"pageTitle":"Type Alias: Models","url":"/eliza/api/type-aliases/Models/#grok","content":" grok: Model  ","version":"Next","tagName":"h3"},{"title":"groq​","type":1,"pageTitle":"Type Alias: Models","url":"/eliza/api/type-aliases/Models/#groq","content":" groq: Model  ","version":"Next","tagName":"h3"},{"title":"llama_cloud​","type":1,"pageTitle":"Type Alias: Models","url":"/eliza/api/type-aliases/Models/#llama_cloud","content":" llama_cloud: Model  ","version":"Next","tagName":"h3"},{"title":"llama_local​","type":1,"pageTitle":"Type Alias: Models","url":"/eliza/api/type-aliases/Models/#llama_local","content":" llama_local: Model  ","version":"Next","tagName":"h3"},{"title":"google​","type":1,"pageTitle":"Type Alias: Models","url":"/eliza/api/type-aliases/Models/#google","content":" google: Model  ","version":"Next","tagName":"h3"},{"title":"claude_vertex​","type":1,"pageTitle":"Type Alias: Models","url":"/eliza/api/type-aliases/Models/#claude_vertex","content":" claude_vertex: Model  ","version":"Next","tagName":"h3"},{"title":"redpill​","type":1,"pageTitle":"Type Alias: Models","url":"/eliza/api/type-aliases/Models/#redpill","content":" redpill: Model  ","version":"Next","tagName":"h3"},{"title":"ollama​","type":1,"pageTitle":"Type Alias: Models","url":"/eliza/api/type-aliases/Models/#ollama","content":" ollama: Model  ","version":"Next","tagName":"h3"},{"title":"Defined in​","type":1,"pageTitle":"Type Alias: Models","url":"/eliza/api/type-aliases/Models/#defined-in","content":" packages/core/src/core/types.ts:101 ","version":"Next","tagName":"h2"},{"title":"Type Alias: Plugin","type":0,"sectionRef":"#","url":"/eliza/api/type-aliases/Plugin/","content":"","keywords":"","version":"Next"},{"title":"Type declaration​","type":1,"pageTitle":"Type Alias: Plugin","url":"/eliza/api/type-aliases/Plugin/#type-declaration","content":" ","version":"Next","tagName":"h2"},{"title":"name​","type":1,"pageTitle":"Type Alias: Plugin","url":"/eliza/api/type-aliases/Plugin/#name","content":" name: string  ","version":"Next","tagName":"h3"},{"title":"description​","type":1,"pageTitle":"Type Alias: Plugin","url":"/eliza/api/type-aliases/Plugin/#description","content":" description: string  ","version":"Next","tagName":"h3"},{"title":"actions​","type":1,"pageTitle":"Type Alias: Plugin","url":"/eliza/api/type-aliases/Plugin/#actions","content":" actions: Action[]  ","version":"Next","tagName":"h3"},{"title":"providers​","type":1,"pageTitle":"Type Alias: Plugin","url":"/eliza/api/type-aliases/Plugin/#providers","content":" providers: Provider[]  ","version":"Next","tagName":"h3"},{"title":"evaluators​","type":1,"pageTitle":"Type Alias: Plugin","url":"/eliza/api/type-aliases/Plugin/#evaluators","content":" evaluators: Evaluator[]  ","version":"Next","tagName":"h3"},{"title":"Defined in​","type":1,"pageTitle":"Type Alias: Plugin","url":"/eliza/api/type-aliases/Plugin/#defined-in","content":" packages/core/src/core/types.ts:303 ","version":"Next","tagName":"h2"},{"title":"Type Alias: UUID","type":0,"sectionRef":"#","url":"/eliza/api/type-aliases/UUID/","content":"","keywords":"","version":"Next"},{"title":"Defined in​","type":1,"pageTitle":"Type Alias: UUID","url":"/eliza/api/type-aliases/UUID/#defined-in","content":" packages/core/src/core/types.ts:7 ","version":"Next","tagName":"h2"},{"title":"Interface: IDatabaseAdapter","type":0,"sectionRef":"#","url":"/eliza/api/interfaces/IDatabaseAdapter/","content":"","keywords":"","version":"Next"},{"title":"Properties​","type":1,"pageTitle":"Interface: IDatabaseAdapter","url":"/eliza/api/interfaces/IDatabaseAdapter/#properties","content":" ","version":"Next","tagName":"h2"},{"title":"db​","type":1,"pageTitle":"Interface: IDatabaseAdapter","url":"/eliza/api/interfaces/IDatabaseAdapter/#db","content":" db: any  Defined in​  packages/core/src/core/types.ts:355  ","version":"Next","tagName":"h3"},{"title":"Methods​","type":1,"pageTitle":"Interface: IDatabaseAdapter","url":"/eliza/api/interfaces/IDatabaseAdapter/#methods","content":" ","version":"Next","tagName":"h2"},{"title":"getAccountById()​","type":1,"pageTitle":"Interface: IDatabaseAdapter","url":"/eliza/api/interfaces/IDatabaseAdapter/#getaccountbyid","content":" getAccountById(userId): Promise&lt;Account&gt;  Parameters​  • userId: `${string}-${string}-${string}-${string}-${string}`  Returns​  Promise&lt;Account&gt;  Defined in​  packages/core/src/core/types.ts:356    ","version":"Next","tagName":"h3"},{"title":"createAccount()​","type":1,"pageTitle":"Interface: IDatabaseAdapter","url":"/eliza/api/interfaces/IDatabaseAdapter/#createaccount","content":" createAccount(account): Promise&lt;boolean&gt;  Parameters​  • account: Account  Returns​  Promise&lt;boolean&gt;  Defined in​  packages/core/src/core/types.ts:357    ","version":"Next","tagName":"h3"},{"title":"getMemories()​","type":1,"pageTitle":"Interface: IDatabaseAdapter","url":"/eliza/api/interfaces/IDatabaseAdapter/#getmemories","content":" getMemories(params): Promise&lt;Memory[]&gt;  Parameters​  • params  • params.roomId: `${string}-${string}-${string}-${string}-${string}`  • params.count?: number  • params.unique?: boolean  • params.tableName: string  • params.agentId?: `${string}-${string}-${string}-${string}-${string}`  • params.start?: number  • params.end?: number  Returns​  Promise&lt;Memory[]&gt;  Defined in​  packages/core/src/core/types.ts:358    ","version":"Next","tagName":"h3"},{"title":"getMemoryById()​","type":1,"pageTitle":"Interface: IDatabaseAdapter","url":"/eliza/api/interfaces/IDatabaseAdapter/#getmemorybyid","content":" getMemoryById(id): Promise&lt;Memory&gt;  Parameters​  • id: `${string}-${string}-${string}-${string}-${string}`  Returns​  Promise&lt;Memory&gt;  Defined in​  packages/core/src/core/types.ts:367    ","version":"Next","tagName":"h3"},{"title":"getMemoriesByRoomIds()​","type":1,"pageTitle":"Interface: IDatabaseAdapter","url":"/eliza/api/interfaces/IDatabaseAdapter/#getmemoriesbyroomids","content":" getMemoriesByRoomIds(params): Promise&lt;Memory[]&gt;  Parameters​  • params  • params.agentId?: `${string}-${string}-${string}-${string}-${string}`  • params.roomIds: `${string}-${string}-${string}-${string}-${string}`[]  Returns​  Promise&lt;Memory[]&gt;  Defined in​  packages/core/src/core/types.ts:368    ","version":"Next","tagName":"h3"},{"title":"getCachedEmbeddings()​","type":1,"pageTitle":"Interface: IDatabaseAdapter","url":"/eliza/api/interfaces/IDatabaseAdapter/#getcachedembeddings","content":" getCachedEmbeddings(params): Promise&lt;object[]&gt;  Parameters​  • params  • params.query_table_name: string  • params.query_threshold: number  • params.query_input: string  • params.query_field_name: string  • params.query_field_sub_name: string  • params.query_match_count: number  Returns​  Promise&lt;object[]&gt;  Defined in​  packages/core/src/core/types.ts:372    ","version":"Next","tagName":"h3"},{"title":"log()​","type":1,"pageTitle":"Interface: IDatabaseAdapter","url":"/eliza/api/interfaces/IDatabaseAdapter/#log","content":" log(params): Promise&lt;void&gt;  Parameters​  • params  • params.body  • params.userId: `${string}-${string}-${string}-${string}-${string}`  • params.roomId: `${string}-${string}-${string}-${string}-${string}`  • params.type: string  Returns​  Promise&lt;void&gt;  Defined in​  packages/core/src/core/types.ts:380    ","version":"Next","tagName":"h3"},{"title":"getActorDetails()​","type":1,"pageTitle":"Interface: IDatabaseAdapter","url":"/eliza/api/interfaces/IDatabaseAdapter/#getactordetails","content":" getActorDetails(params): Promise&lt;Actor[]&gt;  Parameters​  • params  • params.roomId: `${string}-${string}-${string}-${string}-${string}`  Returns​  Promise&lt;Actor[]&gt;  Defined in​  packages/core/src/core/types.ts:386    ","version":"Next","tagName":"h3"},{"title":"searchMemories()​","type":1,"pageTitle":"Interface: IDatabaseAdapter","url":"/eliza/api/interfaces/IDatabaseAdapter/#searchmemories","content":" searchMemories(params): Promise&lt;Memory[]&gt;  Parameters​  • params  • params.tableName: string  • params.roomId: `${string}-${string}-${string}-${string}-${string}`  • params.embedding: number[]  • params.match_threshold: number  • params.match_count: number  • params.unique: boolean  Returns​  Promise&lt;Memory[]&gt;  Defined in​  packages/core/src/core/types.ts:387    ","version":"Next","tagName":"h3"},{"title":"updateGoalStatus()​","type":1,"pageTitle":"Interface: IDatabaseAdapter","url":"/eliza/api/interfaces/IDatabaseAdapter/#updategoalstatus","content":" updateGoalStatus(params): Promise&lt;void&gt;  Parameters​  • params  • params.goalId: `${string}-${string}-${string}-${string}-${string}`  • params.status: GoalStatus  Returns​  Promise&lt;void&gt;  Defined in​  packages/core/src/core/types.ts:395    ","version":"Next","tagName":"h3"},{"title":"searchMemoriesByEmbedding()​","type":1,"pageTitle":"Interface: IDatabaseAdapter","url":"/eliza/api/interfaces/IDatabaseAdapter/#searchmemoriesbyembedding","content":" searchMemoriesByEmbedding(embedding, params): Promise&lt;Memory[]&gt;  Parameters​  • embedding: number[]  • params  • params.match_threshold?: number  • params.count?: number  • params.roomId?: `${string}-${string}-${string}-${string}-${string}`  • params.agentId?: `${string}-${string}-${string}-${string}-${string}`  • params.unique?: boolean  • params.tableName: string  Returns​  Promise&lt;Memory[]&gt;  Defined in​  packages/core/src/core/types.ts:399    ","version":"Next","tagName":"h3"},{"title":"createMemory()​","type":1,"pageTitle":"Interface: IDatabaseAdapter","url":"/eliza/api/interfaces/IDatabaseAdapter/#creatememory","content":" createMemory(memory, tableName, unique?): Promise&lt;void&gt;  Parameters​  • memory: Memory  • tableName: string  • unique?: boolean  Returns​  Promise&lt;void&gt;  Defined in​  packages/core/src/core/types.ts:410    ","version":"Next","tagName":"h3"},{"title":"removeMemory()​","type":1,"pageTitle":"Interface: IDatabaseAdapter","url":"/eliza/api/interfaces/IDatabaseAdapter/#removememory","content":" removeMemory(memoryId, tableName): Promise&lt;void&gt;  Parameters​  • memoryId: `${string}-${string}-${string}-${string}-${string}`  • tableName: string  Returns​  Promise&lt;void&gt;  Defined in​  packages/core/src/core/types.ts:415    ","version":"Next","tagName":"h3"},{"title":"removeAllMemories()​","type":1,"pageTitle":"Interface: IDatabaseAdapter","url":"/eliza/api/interfaces/IDatabaseAdapter/#removeallmemories","content":" removeAllMemories(roomId, tableName): Promise&lt;void&gt;  Parameters​  • roomId: `${string}-${string}-${string}-${string}-${string}`  • tableName: string  Returns​  Promise&lt;void&gt;  Defined in​  packages/core/src/core/types.ts:416    ","version":"Next","tagName":"h3"},{"title":"countMemories()​","type":1,"pageTitle":"Interface: IDatabaseAdapter","url":"/eliza/api/interfaces/IDatabaseAdapter/#countmemories","content":" countMemories(roomId, unique?, tableName?): Promise&lt;number&gt;  Parameters​  • roomId: `${string}-${string}-${string}-${string}-${string}`  • unique?: boolean  • tableName?: string  Returns​  Promise&lt;number&gt;  Defined in​  packages/core/src/core/types.ts:417    ","version":"Next","tagName":"h3"},{"title":"getGoals()​","type":1,"pageTitle":"Interface: IDatabaseAdapter","url":"/eliza/api/interfaces/IDatabaseAdapter/#getgoals","content":" getGoals(params): Promise&lt;Goal[]&gt;  Parameters​  • params  • params.roomId: `${string}-${string}-${string}-${string}-${string}`  • params.userId?: `${string}-${string}-${string}-${string}-${string}`  • params.onlyInProgress?: boolean  • params.count?: number  Returns​  Promise&lt;Goal[]&gt;  Defined in​  packages/core/src/core/types.ts:422    ","version":"Next","tagName":"h3"},{"title":"updateGoal()​","type":1,"pageTitle":"Interface: IDatabaseAdapter","url":"/eliza/api/interfaces/IDatabaseAdapter/#updategoal","content":" updateGoal(goal): Promise&lt;void&gt;  Parameters​  • goal: Goal  Returns​  Promise&lt;void&gt;  Defined in​  packages/core/src/core/types.ts:428    ","version":"Next","tagName":"h3"},{"title":"createGoal()​","type":1,"pageTitle":"Interface: IDatabaseAdapter","url":"/eliza/api/interfaces/IDatabaseAdapter/#creategoal","content":" createGoal(goal): Promise&lt;void&gt;  Parameters​  • goal: Goal  Returns​  Promise&lt;void&gt;  Defined in​  packages/core/src/core/types.ts:429    ","version":"Next","tagName":"h3"},{"title":"removeGoal()​","type":1,"pageTitle":"Interface: IDatabaseAdapter","url":"/eliza/api/interfaces/IDatabaseAdapter/#removegoal","content":" removeGoal(goalId): Promise&lt;void&gt;  Parameters​  • goalId: `${string}-${string}-${string}-${string}-${string}`  Returns​  Promise&lt;void&gt;  Defined in​  packages/core/src/core/types.ts:430    ","version":"Next","tagName":"h3"},{"title":"removeAllGoals()​","type":1,"pageTitle":"Interface: IDatabaseAdapter","url":"/eliza/api/interfaces/IDatabaseAdapter/#removeallgoals","content":" removeAllGoals(roomId): Promise&lt;void&gt;  Parameters​  • roomId: `${string}-${string}-${string}-${string}-${string}`  Returns​  Promise&lt;void&gt;  Defined in​  packages/core/src/core/types.ts:431    ","version":"Next","tagName":"h3"},{"title":"getRoom()​","type":1,"pageTitle":"Interface: IDatabaseAdapter","url":"/eliza/api/interfaces/IDatabaseAdapter/#getroom","content":" getRoom(roomId): Promise&lt;`${string}-${string}-${string}-${string}-${string}`&gt;  Parameters​  • roomId: `${string}-${string}-${string}-${string}-${string}`  Returns​  Promise&lt;`${string}-${string}-${string}-${string}-${string}`&gt;  Defined in​  packages/core/src/core/types.ts:432    ","version":"Next","tagName":"h3"},{"title":"createRoom()​","type":1,"pageTitle":"Interface: IDatabaseAdapter","url":"/eliza/api/interfaces/IDatabaseAdapter/#createroom","content":" createRoom(roomId?): Promise&lt;`${string}-${string}-${string}-${string}-${string}`&gt;  Parameters​  • roomId?: `${string}-${string}-${string}-${string}-${string}`  Returns​  Promise&lt;`${string}-${string}-${string}-${string}-${string}`&gt;  Defined in​  packages/core/src/core/types.ts:433    ","version":"Next","tagName":"h3"},{"title":"removeRoom()​","type":1,"pageTitle":"Interface: IDatabaseAdapter","url":"/eliza/api/interfaces/IDatabaseAdapter/#removeroom","content":" removeRoom(roomId): Promise&lt;void&gt;  Parameters​  • roomId: `${string}-${string}-${string}-${string}-${string}`  Returns​  Promise&lt;void&gt;  Defined in​  packages/core/src/core/types.ts:434    ","version":"Next","tagName":"h3"},{"title":"getRoomsForParticipant()​","type":1,"pageTitle":"Interface: IDatabaseAdapter","url":"/eliza/api/interfaces/IDatabaseAdapter/#getroomsforparticipant","content":" getRoomsForParticipant(userId): Promise&lt;`${string}-${string}-${string}-${string}-${string}`[]&gt;  Parameters​  • userId: `${string}-${string}-${string}-${string}-${string}`  Returns​  Promise&lt;`${string}-${string}-${string}-${string}-${string}`[]&gt;  Defined in​  packages/core/src/core/types.ts:435    ","version":"Next","tagName":"h3"},{"title":"getRoomsForParticipants()​","type":1,"pageTitle":"Interface: IDatabaseAdapter","url":"/eliza/api/interfaces/IDatabaseAdapter/#getroomsforparticipants","content":" getRoomsForParticipants(userIds): Promise&lt;`${string}-${string}-${string}-${string}-${string}`[]&gt;  Parameters​  • userIds: `${string}-${string}-${string}-${string}-${string}`[]  Returns​  Promise&lt;`${string}-${string}-${string}-${string}-${string}`[]&gt;  Defined in​  packages/core/src/core/types.ts:436    ","version":"Next","tagName":"h3"},{"title":"addParticipant()​","type":1,"pageTitle":"Interface: IDatabaseAdapter","url":"/eliza/api/interfaces/IDatabaseAdapter/#addparticipant","content":" addParticipant(userId, roomId): Promise&lt;boolean&gt;  Parameters​  • userId: `${string}-${string}-${string}-${string}-${string}`  • roomId: `${string}-${string}-${string}-${string}-${string}`  Returns​  Promise&lt;boolean&gt;  Defined in​  packages/core/src/core/types.ts:437    ","version":"Next","tagName":"h3"},{"title":"removeParticipant()​","type":1,"pageTitle":"Interface: IDatabaseAdapter","url":"/eliza/api/interfaces/IDatabaseAdapter/#removeparticipant","content":" removeParticipant(userId, roomId): Promise&lt;boolean&gt;  Parameters​  • userId: `${string}-${string}-${string}-${string}-${string}`  • roomId: `${string}-${string}-${string}-${string}-${string}`  Returns​  Promise&lt;boolean&gt;  Defined in​  packages/core/src/core/types.ts:438    ","version":"Next","tagName":"h3"},{"title":"getParticipantsForAccount()​","type":1,"pageTitle":"Interface: IDatabaseAdapter","url":"/eliza/api/interfaces/IDatabaseAdapter/#getparticipantsforaccount","content":" getParticipantsForAccount(userId): Promise&lt;Participant[]&gt;  Parameters​  • userId: `${string}-${string}-${string}-${string}-${string}`  Returns​  Promise&lt;Participant[]&gt;  Defined in​  packages/core/src/core/types.ts:439    ","version":"Next","tagName":"h3"},{"title":"getParticipantsForRoom()​","type":1,"pageTitle":"Interface: IDatabaseAdapter","url":"/eliza/api/interfaces/IDatabaseAdapter/#getparticipantsforroom","content":" getParticipantsForRoom(roomId): Promise&lt;`${string}-${string}-${string}-${string}-${string}`[]&gt;  Parameters​  • roomId: `${string}-${string}-${string}-${string}-${string}`  Returns​  Promise&lt;`${string}-${string}-${string}-${string}-${string}`[]&gt;  Defined in​  packages/core/src/core/types.ts:440    ","version":"Next","tagName":"h3"},{"title":"getParticipantUserState()​","type":1,"pageTitle":"Interface: IDatabaseAdapter","url":"/eliza/api/interfaces/IDatabaseAdapter/#getparticipantuserstate","content":" getParticipantUserState(roomId, userId): Promise&lt;&quot;FOLLOWED&quot; | &quot;MUTED&quot;&gt;  Parameters​  • roomId: `${string}-${string}-${string}-${string}-${string}`  • userId: `${string}-${string}-${string}-${string}-${string}`  Returns​  Promise&lt;&quot;FOLLOWED&quot; | &quot;MUTED&quot;&gt;  Defined in​  packages/core/src/core/types.ts:441    ","version":"Next","tagName":"h3"},{"title":"setParticipantUserState()​","type":1,"pageTitle":"Interface: IDatabaseAdapter","url":"/eliza/api/interfaces/IDatabaseAdapter/#setparticipantuserstate","content":" setParticipantUserState(roomId, userId, state): Promise&lt;void&gt;  Parameters​  • roomId: `${string}-${string}-${string}-${string}-${string}`  • userId: `${string}-${string}-${string}-${string}-${string}`  • state: &quot;FOLLOWED&quot; | &quot;MUTED&quot;  Returns​  Promise&lt;void&gt;  Defined in​  packages/core/src/core/types.ts:445    ","version":"Next","tagName":"h3"},{"title":"createRelationship()​","type":1,"pageTitle":"Interface: IDatabaseAdapter","url":"/eliza/api/interfaces/IDatabaseAdapter/#createrelationship","content":" createRelationship(params): Promise&lt;boolean&gt;  Parameters​  • params  • params.userA: `${string}-${string}-${string}-${string}-${string}`  • params.userB: `${string}-${string}-${string}-${string}-${string}`  Returns​  Promise&lt;boolean&gt;  Defined in​  packages/core/src/core/types.ts:450    ","version":"Next","tagName":"h3"},{"title":"getRelationship()​","type":1,"pageTitle":"Interface: IDatabaseAdapter","url":"/eliza/api/interfaces/IDatabaseAdapter/#getrelationship","content":" getRelationship(params): Promise&lt;Relationship&gt;  Parameters​  • params  • params.userA: `${string}-${string}-${string}-${string}-${string}`  • params.userB: `${string}-${string}-${string}-${string}-${string}`  Returns​  Promise&lt;Relationship&gt;  Defined in​  packages/core/src/core/types.ts:451    ","version":"Next","tagName":"h3"},{"title":"getRelationships()​","type":1,"pageTitle":"Interface: IDatabaseAdapter","url":"/eliza/api/interfaces/IDatabaseAdapter/#getrelationships","content":" getRelationships(params): Promise&lt;Relationship[]&gt;  Parameters​  • params  • params.userId: `${string}-${string}-${string}-${string}-${string}`  Returns​  Promise&lt;Relationship[]&gt;  Defined in​  packages/core/src/core/types.ts:455 ","version":"Next","tagName":"h3"},{"title":"Type Alias: Validator()","type":0,"sectionRef":"#","url":"/eliza/api/type-aliases/Validator/","content":"","keywords":"","version":"Next"},{"title":"Parameters​","type":1,"pageTitle":"Type Alias: Validator()","url":"/eliza/api/type-aliases/Validator/#parameters","content":" • runtime: IAgentRuntime  • message: Memory  • state?: State  ","version":"Next","tagName":"h2"},{"title":"Returns​","type":1,"pageTitle":"Type Alias: Validator()","url":"/eliza/api/type-aliases/Validator/#returns","content":" Promise&lt;boolean&gt;  ","version":"Next","tagName":"h2"},{"title":"Defined in​","type":1,"pageTitle":"Type Alias: Validator()","url":"/eliza/api/type-aliases/Validator/#defined-in","content":" packages/core/src/core/types.ts:203 ","version":"Next","tagName":"h2"},{"title":"Variable: boredomProvider","type":0,"sectionRef":"#","url":"/eliza/api/variables/boredomProvider/","content":"","keywords":"","version":"Next"},{"title":"Defined in​","type":1,"pageTitle":"Variable: boredomProvider","url":"/eliza/api/variables/boredomProvider/#defined-in","content":" packages/core/src/providers/boredom.ts:275 ","version":"Next","tagName":"h2"},{"title":"Variable: continueAction","type":0,"sectionRef":"#","url":"/eliza/api/variables/continueAction/","content":"","keywords":"","version":"Next"},{"title":"Defined in​","type":1,"pageTitle":"Variable: continueAction","url":"/eliza/api/variables/continueAction/#defined-in","content":" packages/core/src/actions/continue.ts:58 ","version":"Next","tagName":"h2"},{"title":"Variable: defaultActions","type":0,"sectionRef":"#","url":"/eliza/api/variables/defaultActions/","content":"","keywords":"","version":"Next"},{"title":"Defined in​","type":1,"pageTitle":"Variable: defaultActions","url":"/eliza/api/variables/defaultActions/#defined-in","content":" packages/core/src/core/actions.ts:6 ","version":"Next","tagName":"h2"},{"title":"Variable: defaultCharacter","type":0,"sectionRef":"#","url":"/eliza/api/variables/defaultCharacter/","content":"","keywords":"","version":"Next"},{"title":"Defined in​","type":1,"pageTitle":"Variable: defaultCharacter","url":"/eliza/api/variables/defaultCharacter/#defined-in","content":" packages/core/src/core/defaultCharacter.ts:3 ","version":"Next","tagName":"h2"},{"title":"Variable: defaultEvaluators","type":0,"sectionRef":"#","url":"/eliza/api/variables/defaultEvaluators/","content":"","keywords":"","version":"Next"},{"title":"Defined in​","type":1,"pageTitle":"Variable: defaultEvaluators","url":"/eliza/api/variables/defaultEvaluators/#defined-in","content":" packages/core/src/core/evaluators.ts:7 ","version":"Next","tagName":"h2"},{"title":"Variable: defaultProviders","type":0,"sectionRef":"#","url":"/eliza/api/variables/defaultProviders/","content":"","keywords":"","version":"Next"},{"title":"Defined in​","type":1,"pageTitle":"Variable: defaultProviders","url":"/eliza/api/variables/defaultProviders/#defined-in","content":" packages/core/src/core/providers.ts:4 ","version":"Next","tagName":"h2"},{"title":"Variable: elizaLogger","type":0,"sectionRef":"#","url":"/eliza/api/variables/elizaLogger/","content":"","keywords":"","version":"Next"},{"title":"Defined in​","type":1,"pageTitle":"Variable: elizaLogger","url":"/eliza/api/variables/elizaLogger/#defined-in","content":" packages/core/src/index.ts:12 ","version":"Next","tagName":"h2"},{"title":"Variable: embeddingDimension","type":0,"sectionRef":"#","url":"/eliza/api/variables/embeddingDimension/","content":"","keywords":"","version":"Next"},{"title":"Defined in​","type":1,"pageTitle":"Variable: embeddingDimension","url":"/eliza/api/variables/embeddingDimension/#defined-in","content":" packages/core/src/core/memory.ts:9 ","version":"Next","tagName":"h2"},{"title":"Variable: embeddingZeroVector","type":0,"sectionRef":"#","url":"/eliza/api/variables/embeddingZeroVector/","content":"","keywords":"","version":"Next"},{"title":"Defined in​","type":1,"pageTitle":"Variable: embeddingZeroVector","url":"/eliza/api/variables/embeddingZeroVector/#defined-in","content":" packages/core/src/core/memory.ts:10 ","version":"Next","tagName":"h2"},{"title":"Variable: evaluationTemplate","type":0,"sectionRef":"#","url":"/eliza/api/variables/evaluationTemplate/","content":"","keywords":"","version":"Next"},{"title":"Defined in​","type":1,"pageTitle":"Variable: evaluationTemplate","url":"/eliza/api/variables/evaluationTemplate/#defined-in","content":" packages/core/src/core/evaluators.ts:12 ","version":"Next","tagName":"h2"},{"title":"Variable: executeSwap","type":0,"sectionRef":"#","url":"/eliza/api/variables/executeSwap/","content":"","keywords":"","version":"Next"},{"title":"Defined in​","type":1,"pageTitle":"Variable: executeSwap","url":"/eliza/api/variables/executeSwap/#defined-in","content":" packages/core/src/actions/swap.ts:178 ","version":"Next","tagName":"h2"},{"title":"Variable: followRoom","type":0,"sectionRef":"#","url":"/eliza/api/variables/followRoom/","content":"","keywords":"","version":"Next"},{"title":"Defined in​","type":1,"pageTitle":"Variable: followRoom","url":"/eliza/api/variables/followRoom/#defined-in","content":" packages/core/src/actions/followRoom.ts:27 ","version":"Next","tagName":"h2"},{"title":"Variable: ignore","type":0,"sectionRef":"#","url":"/eliza/api/variables/ignore/","content":"","keywords":"","version":"Next"},{"title":"Defined in​","type":1,"pageTitle":"Variable: ignore","url":"/eliza/api/variables/ignore/#defined-in","content":" packages/core/src/actions/ignore.ts:8 ","version":"Next","tagName":"h2"},{"title":"Variable: imageGeneration","type":0,"sectionRef":"#","url":"/eliza/api/variables/imageGeneration/","content":"","keywords":"","version":"Next"},{"title":"Defined in​","type":1,"pageTitle":"Variable: imageGeneration","url":"/eliza/api/variables/imageGeneration/#defined-in","content":" packages/core/src/actions/imageGeneration.ts:11 ","version":"Next","tagName":"h2"},{"title":"Variable: imageGenModels","type":0,"sectionRef":"#","url":"/eliza/api/variables/imageGenModels/","content":"","keywords":"","version":"Next"},{"title":"Type declaration​","type":1,"pageTitle":"Variable: imageGenModels","url":"/eliza/api/variables/imageGenModels/#type-declaration","content":" ","version":"Next","tagName":"h2"},{"title":"TogetherAI​","type":1,"pageTitle":"Variable: imageGenModels","url":"/eliza/api/variables/imageGenModels/#togetherai","content":" TogetherAI: object  ","version":"Next","tagName":"h3"},{"title":"TogetherAI.steps​","type":1,"pageTitle":"Variable: imageGenModels","url":"/eliza/api/variables/imageGenModels/#togetheraisteps","content":" steps: number = 4  ","version":"Next","tagName":"h3"},{"title":"TogetherAI.subModel​","type":1,"pageTitle":"Variable: imageGenModels","url":"/eliza/api/variables/imageGenModels/#togetheraisubmodel","content":" subModel: string = &quot;black-forest-labs/FLUX.1-schnell&quot;  ","version":"Next","tagName":"h3"},{"title":"Dalle​","type":1,"pageTitle":"Variable: imageGenModels","url":"/eliza/api/variables/imageGenModels/#dalle","content":" Dalle: object  ","version":"Next","tagName":"h3"},{"title":"Dalle.steps​","type":1,"pageTitle":"Variable: imageGenModels","url":"/eliza/api/variables/imageGenModels/#dallesteps","content":" steps: number = 0  ","version":"Next","tagName":"h3"},{"title":"Dalle.subModel​","type":1,"pageTitle":"Variable: imageGenModels","url":"/eliza/api/variables/imageGenModels/#dallesubmodel","content":" subModel: string = &quot;dall-e-3&quot;  ","version":"Next","tagName":"h3"},{"title":"Defined in​","type":1,"pageTitle":"Variable: imageGenModels","url":"/eliza/api/variables/imageGenModels/#defined-in","content":" packages/core/src/core/imageGenModels.ts:6 ","version":"Next","tagName":"h2"},{"title":"Variable: messageHandlerTemplate","type":0,"sectionRef":"#","url":"/eliza/api/variables/messageHandlerTemplate/","content":"","keywords":"","version":"Next"},{"title":"Defined in​","type":1,"pageTitle":"Variable: messageHandlerTemplate","url":"/eliza/api/variables/messageHandlerTemplate/#defined-in","content":" packages/core/src/actions/continue.ts:20 ","version":"Next","tagName":"h2"},{"title":"Variable: muteRoom","type":0,"sectionRef":"#","url":"/eliza/api/variables/muteRoom/","content":"","keywords":"","version":"Next"},{"title":"Defined in​","type":1,"pageTitle":"Variable: muteRoom","url":"/eliza/api/variables/muteRoom/#defined-in","content":" packages/core/src/actions/muteRoom.ts:28 ","version":"Next","tagName":"h2"},{"title":"Variable: none","type":0,"sectionRef":"#","url":"/eliza/api/variables/none/","content":"","keywords":"","version":"Next"},{"title":"Defined in​","type":1,"pageTitle":"Variable: none","url":"/eliza/api/variables/none/#defined-in","content":" packages/core/src/actions/none.ts:8 ","version":"Next","tagName":"h2"},{"title":"Variable: settings","type":0,"sectionRef":"#","url":"/eliza/api/variables/settings/","content":"","keywords":"","version":"Next"},{"title":"Defined in​","type":1,"pageTitle":"Variable: settings","url":"/eliza/api/variables/settings/#defined-in","content":" packages/core/src/core/settings.ts:54 ","version":"Next","tagName":"h2"},{"title":"Variable: shouldFollowTemplate","type":0,"sectionRef":"#","url":"/eliza/api/variables/shouldFollowTemplate/","content":"","keywords":"","version":"Next"},{"title":"Defined in​","type":1,"pageTitle":"Variable: shouldFollowTemplate","url":"/eliza/api/variables/shouldFollowTemplate/#defined-in","content":" packages/core/src/actions/followRoom.ts:13 ","version":"Next","tagName":"h2"},{"title":"Variable: shouldContinueTemplate","type":0,"sectionRef":"#","url":"/eliza/api/variables/shouldContinueTemplate/","content":"","keywords":"","version":"Next"},{"title":"Defined in​","type":1,"pageTitle":"Variable: shouldContinueTemplate","url":"/eliza/api/variables/shouldContinueTemplate/#defined-in","content":" packages/core/src/actions/continue.ts:47 ","version":"Next","tagName":"h2"},{"title":"Variable: orderBookProvider","type":0,"sectionRef":"#","url":"/eliza/api/variables/orderBookProvider/","content":"","keywords":"","version":"Next"},{"title":"Defined in​","type":1,"pageTitle":"Variable: orderBookProvider","url":"/eliza/api/variables/orderBookProvider/#defined-in","content":" packages/core/src/providers/orderBook.ts:14 ","version":"Next","tagName":"h2"},{"title":"Variable: shouldUnmuteTemplate","type":0,"sectionRef":"#","url":"/eliza/api/variables/shouldUnmuteTemplate/","content":"","keywords":"","version":"Next"},{"title":"Defined in​","type":1,"pageTitle":"Variable: shouldUnmuteTemplate","url":"/eliza/api/variables/shouldUnmuteTemplate/#defined-in","content":" packages/core/src/actions/unmuteRoom.ts:13 ","version":"Next","tagName":"h2"},{"title":"Variable: unfollowRoom","type":0,"sectionRef":"#","url":"/eliza/api/variables/unfollowRoom/","content":"","keywords":"","version":"Next"},{"title":"Defined in​","type":1,"pageTitle":"Variable: unfollowRoom","url":"/eliza/api/variables/unfollowRoom/#defined-in","content":" packages/core/src/actions/unfollowRoom.ts:27 ","version":"Next","tagName":"h2"},{"title":"Variable: walletProvider","type":0,"sectionRef":"#","url":"/eliza/api/variables/walletProvider/","content":"","keywords":"","version":"Next"},{"title":"Defined in​","type":1,"pageTitle":"Variable: walletProvider","url":"/eliza/api/variables/walletProvider/#defined-in","content":" packages/core/src/providers/wallet.ts:244 ","version":"Next","tagName":"h2"},{"title":"Variable: unmuteRoom","type":0,"sectionRef":"#","url":"/eliza/api/variables/unmuteRoom/","content":"","keywords":"","version":"Next"},{"title":"Defined in​","type":1,"pageTitle":"Variable: unmuteRoom","url":"/eliza/api/variables/unmuteRoom/#defined-in","content":" packages/core/src/actions/unmuteRoom.ts:27 ","version":"Next","tagName":"h2"},{"title":"Variable: shouldMuteTemplate","type":0,"sectionRef":"#","url":"/eliza/api/variables/shouldMuteTemplate/","content":"","keywords":"","version":"Next"},{"title":"Defined in​","type":1,"pageTitle":"Variable: shouldMuteTemplate","url":"/eliza/api/variables/shouldMuteTemplate/#defined-in","content":" packages/core/src/actions/muteRoom.ts:13 ","version":"Next","tagName":"h2"},{"title":"Variable: timeProvider","type":0,"sectionRef":"#","url":"/eliza/api/variables/timeProvider/","content":"","keywords":"","version":"Next"},{"title":"Defined in​","type":1,"pageTitle":"Variable: timeProvider","url":"/eliza/api/variables/timeProvider/#defined-in","content":" packages/core/src/providers/time.ts:3 ","version":"Next","tagName":"h2"},{"title":"The ai16z Creator Fund","type":0,"sectionRef":"#","url":"/eliza/docs/community/creator-fund/","content":"","keywords":"","version":"Next"},{"title":"The Story Behind the Fund​","type":1,"pageTitle":"The ai16z Creator Fund","url":"/eliza/docs/community/creator-fund/#the-story-behind-the-fund","content":" The ai16z Creator Fund was made possible by the generosity of Elijah, a significant holder of ai16z tokens. Elijah has pledged to donate a portion of his holdings, reducing his ownership from 16% to 5%, to establish a dedicated fund that will support promising developers and creators.  The donated funds will be held in a dedicated wallet (9YnQdCWDAQRfQYm5HvRzoPgc5GRn8fyhsH2eru8nfsxG) and distributed via Streamflow token vesting contracts. This approach ensures that creators receive a steady stream of ai16z tokens over time as they hit milestones and deliver value to the ecosystem.  ","version":"Next","tagName":"h2"},{"title":"Benefits and Vision​","type":1,"pageTitle":"The ai16z Creator Fund","url":"/eliza/docs/community/creator-fund/#benefits-and-vision","content":" The ai16z Creator Fund aims to:  Bootstrap and reward an ecosystem of innovative creators building on ai16zGive creators the runway to focus on their work without worrying about short-term token pricesPut Elijah's tokens to productive use in growing the ai16z community, rather than through a one-time eventReduce the risk of token dumping by aligning creators' interests with the long-term success of the projectBring more talent and energy into the ai16z ecosystem to drive innovation and adoption  By providing ongoing sponsorship and recognizing creators' efforts, the fund will help cultivate a thriving community of builders who will take ai16z to the next level.  ","version":"Next","tagName":"h2"},{"title":"Next Steps​","type":1,"pageTitle":"The ai16z Creator Fund","url":"/eliza/docs/community/creator-fund/#next-steps","content":" We are currently working on finalizing the details of the ai16z Creator Fund, including:  Determining the size of the creator fund and the length of vesting schedulesEstablishing a transparent creator grant application and selection processIntegrating Streamflow to manage token vesting contracts for selected granteesPreparing to announce the first cohort of funded creators and share their exciting projects with the community  Stay tuned for more information on how to apply for grants from the ai16z Creator Fund. In the meantime, creators and developers are encouraged to start brainstorming ideas and preparing their applications.  ","version":"Next","tagName":"h2"},{"title":"A Note on Liquidity​","type":1,"pageTitle":"The ai16z Creator Fund","url":"/eliza/docs/community/creator-fund/#a-note-on-liquidity","content":" In addition to the Creator Fund, we are also exploring OTC (over-the-counter) deals to onboard new partners and use the funds to lock in more liquidity for the ai16z ecosystem. This approach will help ensure a healthy and sustainable token economy as we continue to grow and evolve.    The ai16z Creator Fund represents an exciting opportunity to foster a vibrant community of builders and drive the future of autonomous AI agents. We can't wait to see the innovative projects and contributions that will emerge from this initiative! ","version":"Next","tagName":"h2"},{"title":"Variable: tokenProvider","type":0,"sectionRef":"#","url":"/eliza/api/variables/tokenProvider/","content":"","keywords":"","version":"Next"},{"title":"Defined in​","type":1,"pageTitle":"Variable: tokenProvider","url":"/eliza/api/variables/tokenProvider/#defined-in","content":" packages/core/src/providers/token.ts:812 ","version":"Next","tagName":"h2"},{"title":"Contributor Guide","type":0,"sectionRef":"#","url":"/eliza/docs/community/contributing/","content":"","keywords":"","version":"Next"},{"title":"The OODA Loop: A Framework for Contribution​","type":1,"pageTitle":"Contributor Guide","url":"/eliza/docs/community/contributing/#the-ooda-loop-a-framework-for-contribution","content":" We believe in the power of the OODA Loop - a decision-making framework that emphasizes speed and adaptability. OODA stands for:  Observe: Gather information and insights about the project, the community, and the broader AI ecosystem.Orient: Analyze your observations to identify opportunities for contribution and improvement.Decide: Choose a course of action based on your analysis. This could be proposing a new feature, fixing a bug, or creating content.Act: Execute your decision and share your work with the community.  By internalizing the OODA Loop, you can quickly identify areas where you can make a meaningful impact and drive the project forward.    ","version":"Next","tagName":"h2"},{"title":"How to Contribute​","type":1,"pageTitle":"Contributor Guide","url":"/eliza/docs/community/contributing/#how-to-contribute","content":" ","version":"Next","tagName":"h2"},{"title":"For Developers​","type":1,"pageTitle":"Contributor Guide","url":"/eliza/docs/community/contributing/#for-developers","content":" Extend Eliza's Capabilities Develop new actions, evaluators, and providers to expand what Eliza agents can do.Improve existing components and modules. Enhance Infrastructure Go through open issues, send back a PR if you can improve anything.Test currently documented steps to ensure they're still up to date.Optimize Eliza's database architecture and performance.Contribute to the autonomous trading system and trust engine.Improve deployment and scaling solutions. Implement Integrations Build connectors for new platforms and services.Enhance existing integrations with additional features.  ","version":"Next","tagName":"h3"},{"title":"For AI Enthusiasts​","type":1,"pageTitle":"Contributor Guide","url":"/eliza/docs/community/contributing/#for-ai-enthusiasts","content":" Fine-tune Models Experiment with fine-tuning models for specific tasks and domains.Develop best practices for prompt engineering and model selection. Develop Characters Create compelling character files that showcase Eliza's potential.Curate knowledge bases and datasets for different use cases.  ","version":"Next","tagName":"h3"},{"title":"Non-Technical Contributions​","type":1,"pageTitle":"Contributor Guide","url":"/eliza/docs/community/contributing/#non-technical-contributions","content":" Create Content Make memes, stickers, emojis, and clips of AI agents that are deployed.Write tutorials, guides, and blog posts to help others learn about Eliza.Produce videos showcasing Eliza's capabilities and real-world applications. Engage the Community Participate in discussions on Discord, Twitter, and other platforms.Help answer questions and provide support to other community members.Organize events, workshops, and hackathons to bring people together. Spread the Word Share the Eliza project and help attract new contributors.Participate in one of our upcoming demo days, show and tell your project.    ","version":"Next","tagName":"h3"},{"title":"Tips for Efficient Contribution​","type":1,"pageTitle":"Contributor Guide","url":"/eliza/docs/community/contributing/#tips-for-efficient-contribution","content":" Use tools like OBS and Whisper to record and transcribe your work sessions. This allows you to easily document your process and share insights with the community.Leverage AI assistants to help with tasks like code generation, document summarization, and content creation.Collaborate with other community members to divide and conquer larger initiatives.  ","version":"Next","tagName":"h3"},{"title":"Recognition and Rewards​","type":1,"pageTitle":"Contributor Guide","url":"/eliza/docs/community/contributing/#recognition-and-rewards","content":" We believe in recognizing and rewarding contributors who go above and beyond to drive the project forward. Stand-out contributions may be eligible for:  Grants from the ai16z Creator FundFeaturing your project across various channelsOpportunities to shape the direction of the project  Note: we're still finalizing details on the creator/dev fund that seeks to retroactively reward valued contributions to the ecosystem.  ","version":"Next","tagName":"h2"},{"title":"Getting Started​","type":1,"pageTitle":"Contributor Guide","url":"/eliza/docs/community/contributing/#getting-started","content":" Join the Eliza Discord and make a short introduction.Explore the documentation to understand the project's architecture and capabilities.Check out the open issues on GitHub to find ways to contribute.Share your ideas and initiatives with the community - we're excited to see what you'll build!  Lets push the boundaries of what's possible with autonomous AI agents. Welcome aboard! ","version":"Next","tagName":"h2"},{"title":"Agents","type":0,"sectionRef":"#","url":"/eliza/docs/core/agents/","content":"","keywords":"","version":"Next"},{"title":"Overview​","type":1,"pageTitle":"Agents","url":"/eliza/docs/core/agents/#overview","content":" What agents are in ElizaHow they interact with the systemCore components and workflow  ","version":"Next","tagName":"h2"},{"title":"Architecture​","type":1,"pageTitle":"Agents","url":"/eliza/docs/core/agents/#architecture","content":" ","version":"Next","tagName":"h2"},{"title":"Agent Runtime​","type":1,"pageTitle":"Agents","url":"/eliza/docs/core/agents/#agent-runtime","content":" Base environment for the agentMessage processingAction handlingProvider integrationMemory management  ","version":"Next","tagName":"h3"},{"title":"Key Components​","type":1,"pageTitle":"Agents","url":"/eliza/docs/core/agents/#key-components","content":" 1. Clients​  DiscordTelegramDirect (REST API)Available connectorsClient-specific features (e.g., voice, attachments)  2. Providers​  Inject context into agent responsesTypes of providers: TimeWalletCustom data/state How to use providers for extended functionality  3. Actions​  Executable behaviorsBuilt-in actions: Follow/unfollow roomsGenerate imagesTranscribe mediaProcess attachments Creating custom actions  4. Evaluators​  Response assessmentGoal trackingFact extractionMemory buildingLong-term memory management  ","version":"Next","tagName":"h3"},{"title":"Memory System​","type":1,"pageTitle":"Agents","url":"/eliza/docs/core/agents/#memory-system","content":" Types of Memory​  Message historyFactual memoryKnowledge baseRelationship tracking  RAG Integration​  Vector search for relevant informationKnowledge embeddingContextual recall  ","version":"Next","tagName":"h3"},{"title":"Configuration​","type":1,"pageTitle":"Agents","url":"/eliza/docs/core/agents/#configuration","content":" Model settingsRuntime optionsClient configurationMemory settingsProvider setup  ","version":"Next","tagName":"h2"},{"title":"Best Practices​","type":1,"pageTitle":"Agents","url":"/eliza/docs/core/agents/#best-practices","content":" ","version":"Next","tagName":"h2"},{"title":"Performance​","type":1,"pageTitle":"Agents","url":"/eliza/docs/core/agents/#performance","content":" Model selectionContext managementMemory optimizationClient-specific considerations  ","version":"Next","tagName":"h3"},{"title":"Development​","type":1,"pageTitle":"Agents","url":"/eliza/docs/core/agents/#development","content":" Local development setupTesting agentsDebugging toolsMonitoring and logging  ","version":"Next","tagName":"h3"},{"title":"Scaling​","type":1,"pageTitle":"Agents","url":"/eliza/docs/core/agents/#scaling","content":" Multiple agent managementResource considerationsInfrastructure recommendations  ","version":"Next","tagName":"h3"},{"title":"Examples​","type":1,"pageTitle":"Agents","url":"/eliza/docs/core/agents/#examples","content":" ","version":"Next","tagName":"h2"},{"title":"Basic Agent Setup​","type":1,"pageTitle":"Agents","url":"/eliza/docs/core/agents/#basic-agent-setup","content":" // Example code for basic agent configuration   ","version":"Next","tagName":"h3"},{"title":"Adding Custom Functionality​","type":1,"pageTitle":"Agents","url":"/eliza/docs/core/agents/#adding-custom-functionality","content":" // Example of extending agent capabilities   ","version":"Next","tagName":"h3"},{"title":"Client Integration​","type":1,"pageTitle":"Agents","url":"/eliza/docs/core/agents/#client-integration","content":" // Example of connecting to different platforms   ","version":"Next","tagName":"h3"},{"title":"Troubleshooting​","type":1,"pageTitle":"Agents","url":"/eliza/docs/core/agents/#troubleshooting","content":" Common issuesDebug strategiesPerformance optimizationError handling  ","version":"Next","tagName":"h2"},{"title":"Related​","type":1,"pageTitle":"Agents","url":"/eliza/docs/core/agents/#related","content":" Character FilesAPI Reference ","version":"Next","tagName":"h2"},{"title":"Quickstart","type":0,"sectionRef":"#","url":"/eliza/docs/quickstart/","content":"","keywords":"","version":"Next"},{"title":"Install Node.js​","type":1,"pageTitle":"Quickstart","url":"/eliza/docs/quickstart/#install-nodejs","content":" https://docs.npmjs.com/downloading-and-installing-node-js-and-npm  ","version":"Next","tagName":"h2"},{"title":"Using pnpm​","type":1,"pageTitle":"Quickstart","url":"/eliza/docs/quickstart/#using-pnpm","content":" We use pnpm to manage our dependencies. It is faster and more efficient than npm, and it supports workspaces.https://pnpm.io/installation  ","version":"Next","tagName":"h2"},{"title":"Edit the .env file​","type":1,"pageTitle":"Quickstart","url":"/eliza/docs/quickstart/#edit-the-env-file","content":" Copy .env.example to .env and fill in the appropriate valuesEdit the TWITTER environment variables to add your bot's username and password  ","version":"Next","tagName":"h2"},{"title":"Edit the character file​","type":1,"pageTitle":"Quickstart","url":"/eliza/docs/quickstart/#edit-the-character-file","content":" Check out the file src/core/defaultCharacter.ts - you can modify thisYou can also load characters with the node --loader ts-node/esm src/index.ts --characters=&quot;path/to/your/character.json&quot; and run multiple bots at the same time.  ","version":"Next","tagName":"h2"},{"title":"Run with Llama​","type":1,"pageTitle":"Quickstart","url":"/eliza/docs/quickstart/#run-with-llama","content":" You can run Llama 70B or 405B models by setting the XAI_MODEL environment variable to meta-llama/Meta-Llama-3.1-70B-Instruct-Turbo or meta-llama/Meta-Llama-3.1-405B-Instruct  ","version":"Next","tagName":"h3"},{"title":"Run with Grok​","type":1,"pageTitle":"Quickstart","url":"/eliza/docs/quickstart/#run-with-grok","content":" You can run Grok models by setting the XAI_MODEL environment variable to grok-beta  ","version":"Next","tagName":"h3"},{"title":"Run with OpenAI​","type":1,"pageTitle":"Quickstart","url":"/eliza/docs/quickstart/#run-with-openai","content":" You can run OpenAI models by setting the XAI_MODEL environment variable to gpt-4o-mini or gpt-4o  Requires Node 20+  If you are getting strange issues when starting up, make sure you're using Node 20+. Some APIs are not compatible with previous versions. You can check your node version with node -v. If you need to install a new version of node, we recommend using nvm.  ","version":"Next","tagName":"h3"},{"title":"Additional Requirements​","type":1,"pageTitle":"Quickstart","url":"/eliza/docs/quickstart/#additional-requirements","content":" You may need to install Sharp. If you see an error when starting up, try installing it with the following command:  pnpm install --include=optional sharp   Environment Setup  You will need to add environment variables to your .env file to connect to various platforms:  # Required environment variables # Start Discord DISCORD_APPLICATION_ID= DISCORD_API_TOKEN= # Bot token # Start Twitter TWITTER_USERNAME= # Account username TWITTER_PASSWORD= # Account password TWITTER_EMAIL= # Account email TWITTER_COOKIES= # Account cookies   Local Setup  ","version":"Next","tagName":"h2"},{"title":"CUDA Setup​","type":1,"pageTitle":"Quickstart","url":"/eliza/docs/quickstart/#cuda-setup","content":" If you have an NVIDIA GPU, you can install CUDA to speed up local inference dramatically.  pnpm install npx --no node-llama-cpp source download --gpu cuda   Make sure that you've installed the CUDA Toolkit, including cuDNN and cuBLAS.  ","version":"Next","tagName":"h2"},{"title":"Running locally​","type":1,"pageTitle":"Quickstart","url":"/eliza/docs/quickstart/#running-locally","content":" Add XAI_MODEL and set it to one of the above options from Run with Llama - you can leave X_SERVER_URL and XAI_API_KEY blank, it downloads the model from huggingface and queries it locally  Cloud Setup (with OpenAI)  In addition to the environment variables above, you will need to add the following:  # OpenAI handles the bulk of the work with chat, TTS, image recognition, etc. OPENAI_API_KEY=sk-* # OpenAI API key, starting with sk- # The agent can also ask Claude for help if you have an API key ANTHROPIC_API_KEY= # For Elevenlabs voice generation on Discord voice ELEVENLABS_XI_API_KEY= # API key from elevenlabs # ELEVENLABS SETTINGS ELEVENLABS_MODEL_ID=eleven_multilingual_v2 ELEVENLABS_VOICE_ID=21m00Tcm4TlvDq8ikWAM ELEVENLABS_VOICE_STABILITY=0.5 ELEVENLABS_VOICE_SIMILARITY_BOOST=0.9 ELEVENLABS_VOICE_STYLE=0.66 ELEVENLABS_VOICE_USE_SPEAKER_BOOST=false ELEVENLABS_OPTIMIZE_STREAMING_LATENCY=4 ELEVENLABS_OUTPUT_FORMAT=pcm_16000   Discord Bot  For help with setting up your Discord Bot, check out here: https://discordjs.guide/preparations/setting-up-a-bot-application.html ","version":"Next","tagName":"h2"},{"title":"Introduction to Eliza","type":0,"sectionRef":"#","url":"/eliza/docs/intro/","content":"","keywords":"","version":"Next"},{"title":"What is Eliza?​","type":1,"pageTitle":"Introduction to Eliza","url":"/eliza/docs/intro/#what-is-eliza","content":" Eliza is a powerful multi-agent simulation framework designed to create, deploy, and manage autonomous AI agents. Built with TypeScript, it provides a flexible and extensible platform for developing intelligent agents that can interact across multiple platforms while maintaining consistent personalities and knowledge.  ","version":"Next","tagName":"h2"},{"title":"Key Features​","type":1,"pageTitle":"Introduction to Eliza","url":"/eliza/docs/intro/#key-features","content":" ","version":"Next","tagName":"h2"},{"title":"Core Capabilities​","type":1,"pageTitle":"Introduction to Eliza","url":"/eliza/docs/intro/#core-capabilities","content":" Multi-Agent Architecture: Deploy and manage multiple unique AI personalities simultaneouslyCharacter System: Create diverse agents using the characterfile frameworkMemory Management: Advanced RAG (Retrieval Augmented Generation) system for long-term memory and context awarenessPlatform Integration: Seamless connectivity with Discord, Twitter, and other platforms  ","version":"Next","tagName":"h3"},{"title":"Communication & Media​","type":1,"pageTitle":"Introduction to Eliza","url":"/eliza/docs/intro/#communication--media","content":" Multi-Platform Support: Full-featured Discord integration with voice channel supportTwitter/X bot capabilitiesTelegram integrationDirect API access Media Processing: PDF document reading and analysisLink content extraction and summarizationAudio transcriptionVideo content processingImage analysis and descriptionConversation summarization  ","version":"Next","tagName":"h3"},{"title":"AI & Technical Features​","type":1,"pageTitle":"Introduction to Eliza","url":"/eliza/docs/intro/#ai--technical-features","content":" Flexible Model Support: Local inference with open-source modelsCloud-based inference through OpenAIDefault configuration with Nous Hermes Llama 3.1BIntegration with Claude for complex queries Technical Foundation: 100% TypeScript implementationModular architectureExtensible action systemCustom client supportComprehensive API  ","version":"Next","tagName":"h3"},{"title":"Use Cases​","type":1,"pageTitle":"Introduction to Eliza","url":"/eliza/docs/intro/#use-cases","content":" Eliza can be used to create:  AI Assistants Customer support agentsCommunity moderatorsPersonal assistants Social Media Personas Automated content creatorsEngagement botsBrand representatives Knowledge Workers Research assistantsContent analystsDocument processors Interactive Characters Role-playing charactersEducational tutorsEntertainment bots  ","version":"Next","tagName":"h2"},{"title":"Getting Started​","type":1,"pageTitle":"Introduction to Eliza","url":"/eliza/docs/intro/#getting-started","content":" Eliza is designed to be accessible while maintaining powerful capabilities:  Quick Start: Begin with basic configuration and default characterCustomization: Extend functionality through custom actions and clientsScaling: Deploy multiple agents with different personalitiesIntegration: Connect to various platforms and services  Check out our Quickstart Guide to begin your journey with Eliza.  ","version":"Next","tagName":"h2"},{"title":"Architecture Overview​","type":1,"pageTitle":"Introduction to Eliza","url":"/eliza/docs/intro/#architecture-overview","content":"   ","version":"Next","tagName":"h2"},{"title":"Community and Support​","type":1,"pageTitle":"Introduction to Eliza","url":"/eliza/docs/intro/#community-and-support","content":" Eliza is backed by an active community of developers and users:  Open Source: Contribute to the project on GitHubDocumentation: Comprehensive guides and API referencesExamples: Ready-to-use character templates and implementationsSupport: Active community for troubleshooting and discussion  ","version":"Next","tagName":"h2"},{"title":"Next Steps​","type":1,"pageTitle":"Introduction to Eliza","url":"/eliza/docs/intro/#next-steps","content":" Install ElizaCreate Your First AgentUnderstand Core ConceptsExplore Advanced Features  Join us in building the future of autonomous AI agents with Eliza! ","version":"Next","tagName":"h2"},{"title":"Installation","type":0,"sectionRef":"#","url":"/eliza/docs/installation/","content":"","keywords":"","version":"Next"},{"title":"Select your database adapter​","type":1,"pageTitle":"Installation","url":"/eliza/docs/installation/#select-your-database-adapter","content":" pnpm install sqlite-vss better-sqlite3 # for sqlite (simple, for local development) pnpm install @supabase/supabase-js # for supabase (more complicated but can be deployed at scale)   ","version":"Next","tagName":"h2"},{"title":"Set up environment variables​","type":1,"pageTitle":"Installation","url":"/eliza/docs/installation/#set-up-environment-variables","content":" You will need a Supbase account, as well as an OpenAI developer account.  Copy and paste the .dev.vars.example to .dev.vars and fill in the environment variables:  SUPABASE_URL=&quot;https://your-supabase-url.supabase.co&quot; SUPABASE_SERVICE_API_KEY=&quot;your-supabase-service-api-key&quot; OPENAI_API_KEY=&quot;your-openai-api-key&quot;   ","version":"Next","tagName":"h3"},{"title":"SQLite Local Setup (Easiest)​","type":1,"pageTitle":"Installation","url":"/eliza/docs/installation/#sqlite-local-setup-easiest","content":" You can use SQLite for local development. This is the easiest way to get started with eliza.  import { BgentRuntime, SqliteDatabaseAdapter } from &quot;eliza&quot;; import { Database } from &quot;sqlite3&quot;; const sqliteDatabaseAdapter = new SqliteDatabaseAdapter(new Database(&quot;:memory:&quot;)); const runtime = new BgentRuntime({ serverUrl: &quot;https://api.openai.com/v1&quot;, token: process.env.OPENAI_API_KEY, // Can be an API key or JWT token for your AI services databaseAdapter: sqliteDatabaseAdapter, // ... other options });   ","version":"Next","tagName":"h3"},{"title":"Supabase Local Setup​","type":1,"pageTitle":"Installation","url":"/eliza/docs/installation/#supabase-local-setup","content":" First, you will need to install the Supabase CLI. You can install it using the instructions here.  Once you have the CLI installed, you can run the following commands to set up a local Supabase instance:  supabase init supabase start   You can now start the eliza project with pnpm run dev and it will connect to the local Supabase instance by default.  NOTE: You will need Docker installed for this to work. If that is an issue for you, use the Supabase Cloud Setup instructions instead below).  ","version":"Next","tagName":"h3"},{"title":"Supabase Cloud Setup​","type":1,"pageTitle":"Installation","url":"/eliza/docs/installation/#supabase-cloud-setup","content":" This library uses Supabase as a database. You can set up a free account at supabase.io and create a new project.  Step 1: On the Subase All Projects Dashboard, select “New Project”.Step 2: Select the organization to store the new project in, assign a database name, password and region.Step 3: Select “Create New Project”.Step 4: Wait for the database to setup. This will take a few minutes as supabase setups various directories.Step 5: Select the “SQL Editor” tab from the left navigation menu.Step 6: Copy in your own SQL dump file or optionally use the provided file in the eliza directory at: &quot;src/supabase/db.sql&quot;. Note: You can use the command &quot;supabase db dump&quot; if you have a pre-exisiting supabase database to generate the SQL dump file.Step 7: Paste the SQL code into the SQL Editor and hit run in the bottom right.Step 8: Select the “Databases” tab from the left navigation menu to verify all of the tables have been added properly.  Once you've set up your Supabase project, you can find your API key by going to the &quot;Settings&quot; tab and then &quot;API&quot;. You will need to set the SUPABASE_URL and SUPABASE_SERVICE_API_KEY environment variables in your .dev.vars file.  ","version":"Next","tagName":"h3"},{"title":"Local Model Setup​","type":1,"pageTitle":"Installation","url":"/eliza/docs/installation/#local-model-setup","content":" While eliza uses ChatGPT 3.5 by default, you can use a local model by setting the serverUrl to a local endpoint. The LocalAI project is a great way to run a local model with a compatible API endpoint.  const runtime = new BgentRuntime({ serverUrl: process.env.LOCALAI_URL, token: process.env.LOCALAI_TOKEN, // Can be an API key or JWT token for your AI service // ... other options });   ","version":"Next","tagName":"h3"},{"title":"Development​","type":1,"pageTitle":"Installation","url":"/eliza/docs/installation/#development","content":" pnpm run dev # start the server pnpm run shell # start the shell in another terminal to talk to the default agent   ","version":"Next","tagName":"h3"},{"title":"Usage​","type":1,"pageTitle":"Installation","url":"/eliza/docs/installation/#usage","content":"  import { BgentRuntime, SupabaseDatabaseAdapter, SqliteDatabaseAdapter } from &quot;eliza&quot;; const sqliteDatabaseAdapter = new SqliteDatabaseAdapter(new Database(&quot;:memory:&quot;)); // You can also use Supabase like this // const supabaseDatabaseAdapter = new SupabaseDatabaseAdapter( // process.env.SUPABASE_URL, // process.env.SUPABASE_SERVICE_API_KEY) // ; const runtime = new BgentRuntime({ serverUrl: &quot;https://api.openai.com/v1&quot;, token: process.env.OPENAI_API_KEY, // Can be an API key or JWT token for your AI services databaseAdapter: sqliteDatabaseAdapter, actions: [ /* your custom actions */ ], evaluators: [ /* your custom evaluators */ ], model: &quot;gpt-3.5-turbo&quot;, // whatever model you want to use embeddingModel: &quot;text-embedding-3-small&quot;, // whatever model you want to use });  ","version":"Next","tagName":"h3"},{"title":"Model Selection and Fine-tuning","type":0,"sectionRef":"#","url":"/eliza/docs/advanced/fine-tuning/","content":"","keywords":"","version":"Next"},{"title":"Overview​","type":1,"pageTitle":"Model Selection and Fine-tuning","url":"/eliza/docs/advanced/fine-tuning/#overview","content":" Eliza provides a flexible model selection and configuration system that supports multiple AI providers including OpenAI, Anthropic, Google, and various LLaMA implementations. This guide explains how to configure and fine-tune models for optimal performance in your use case.  ","version":"Next","tagName":"h2"},{"title":"Supported Models​","type":1,"pageTitle":"Model Selection and Fine-tuning","url":"/eliza/docs/advanced/fine-tuning/#supported-models","content":" ","version":"Next","tagName":"h2"},{"title":"Available Providers​","type":1,"pageTitle":"Model Selection and Fine-tuning","url":"/eliza/docs/advanced/fine-tuning/#available-providers","content":" Eliza supports the following model providers:  OpenAI Small: gpt-4o-miniMedium: gpt-4oLarge: gpt-4oEmbeddings: text-embedding-3-small Anthropic Small: claude-3-haikuMedium: claude-3.5-sonnetLarge: claude-3-opus Google (Gemini) Small: gemini-1.5-flashMedium: gemini-1.5-flashLarge: gemini-1.5-proEmbeddings: text-embedding-004 LLaMA Cloud Small: meta-llama/Llama-3.2-3B-Instruct-TurboMedium: meta-llama-3.1-8b-instructLarge: meta-llama/Meta-Llama-3.1-405B-Instruct-TurboEmbeddings: togethercomputer/m2-bert-80M-32k-retrieval LLaMA Local Various Hermes-3-Llama models optimized for local deployment  ","version":"Next","tagName":"h3"},{"title":"Configuration Options​","type":1,"pageTitle":"Model Selection and Fine-tuning","url":"/eliza/docs/advanced/fine-tuning/#configuration-options","content":" ","version":"Next","tagName":"h2"},{"title":"Model Settings​","type":1,"pageTitle":"Model Selection and Fine-tuning","url":"/eliza/docs/advanced/fine-tuning/#model-settings","content":" Each model provider can be configured with the following parameters:  settings: { stop: [], // Stop sequences for text generation maxInputTokens: 128000, // Maximum input context length maxOutputTokens: 8192, // Maximum response length frequency_penalty: 0.0, // Penalize frequent tokens presence_penalty: 0.0, // Penalize repeated content temperature: 0.3, // Control randomness (0.0-1.0) }   ","version":"Next","tagName":"h3"},{"title":"Model Classes​","type":1,"pageTitle":"Model Selection and Fine-tuning","url":"/eliza/docs/advanced/fine-tuning/#model-classes","content":" Models are categorized into four classes:  SMALL: Optimized for speed and costMEDIUM: Balanced performance and capabilityLARGE: Maximum capability for complex tasksEMBEDDING: Specialized for text embeddings  ","version":"Next","tagName":"h3"},{"title":"Fine-tuning Guidelines​","type":1,"pageTitle":"Model Selection and Fine-tuning","url":"/eliza/docs/advanced/fine-tuning/#fine-tuning-guidelines","content":" ","version":"Next","tagName":"h2"},{"title":"1. Selecting the Right Model Size​","type":1,"pageTitle":"Model Selection and Fine-tuning","url":"/eliza/docs/advanced/fine-tuning/#1-selecting-the-right-model-size","content":" Choose your model class based on your requirements:  SMALL Models Best for: Quick responses, simple tasks, cost-effective deploymentExample use cases: Basic chat, simple classificationsRecommended: claude-3-haiku or gemini-1.5-flash MEDIUM Models Best for: General purpose applications, balanced performanceExample use cases: Content generation, complex analysisRecommended: claude-3.5-sonnet or meta-llama-3.1-8b-instruct LARGE Models Best for: Complex reasoning, specialized tasksExample use cases: Code generation, detailed analysisRecommended: claude-3-opus or Meta-Llama-3.1-405B  ","version":"Next","tagName":"h3"},{"title":"2. Optimizing Model Parameters​","type":1,"pageTitle":"Model Selection and Fine-tuning","url":"/eliza/docs/advanced/fine-tuning/#2-optimizing-model-parameters","content":" // Example configuration for different use cases const chatConfig = { temperature: 0.7, // More creative responses maxOutputTokens: 2048, // Shorter, focused replies presence_penalty: 0.6, // Encourage response variety }; const analysisConfig = { temperature: 0.2, // More deterministic responses maxOutputTokens: 8192, // Allow detailed analysis presence_penalty: 0.0, // Maintain focused analysis };   ","version":"Next","tagName":"h3"},{"title":"3. Embedding Configuration​","type":1,"pageTitle":"Model Selection and Fine-tuning","url":"/eliza/docs/advanced/fine-tuning/#3-embedding-configuration","content":" Eliza includes a sophisticated embedding system that supports:  Automatic caching of embeddingsProvider-specific optimizationsFallback to LLaMA service when needed  // Example embedding usage const embedding = await runtime.llamaService.getEmbeddingResponse(input);   ","version":"Next","tagName":"h3"},{"title":"Best Practices​","type":1,"pageTitle":"Model Selection and Fine-tuning","url":"/eliza/docs/advanced/fine-tuning/#best-practices","content":" Model Selection Start with SMALL models and upgrade as neededUse MEDIUM models as your default for general tasksReserve LARGE models for specific, complex requirements Parameter Tuning Keep temperature low (0.2-0.4) for consistent outputsIncrease temperature (0.6-0.8) for creative tasksAdjust maxOutputTokens based on expected response length Embedding Optimization Utilize the caching system for frequently used contentChoose provider-specific embedding models for best resultsMonitor embedding performance and adjust as needed Cost Optimization Use SMALL models for development and testingImplement caching strategies for embeddingsMonitor token usage across different model classes  ","version":"Next","tagName":"h2"},{"title":"Common Issues and Solutions​","type":1,"pageTitle":"Model Selection and Fine-tuning","url":"/eliza/docs/advanced/fine-tuning/#common-issues-and-solutions","content":" Token Length Errors // Solution: Implement chunking for long inputs const chunks = splitIntoChunks(input, model.settings.maxInputTokens); Response Quality Issues // Solution: Adjust temperature and penalties const enhancedSettings = { ...defaultSettings, temperature: 0.4, presence_penalty: 0.2, }; Embedding Cache Misses // Solution: Implement broader similarity thresholds const similarityThreshold = 0.85; const cachedEmbedding = await findSimilarEmbedding( input, similarityThreshold, );   ","version":"Next","tagName":"h2"},{"title":"Advanced Configuration​","type":1,"pageTitle":"Model Selection and Fine-tuning","url":"/eliza/docs/advanced/fine-tuning/#advanced-configuration","content":" For advanced use cases, you can extend the model configuration:  // Custom model configuration const customConfig = { model: { [ModelClass.SMALL]: &quot;your-custom-model&quot;, [ModelClass.MEDIUM]: &quot;your-custom-model&quot;, [ModelClass.LARGE]: &quot;your-custom-model&quot;, [ModelClass.EMBEDDING]: &quot;your-custom-embedding-model&quot;, }, settings: { // Custom settings maxInputTokens: 64000, temperature: 0.5, // Add custom parameters custom_param: &quot;value&quot;, }, };   ","version":"Next","tagName":"h2"},{"title":"Additional Resources​","type":1,"pageTitle":"Model Selection and Fine-tuning","url":"/eliza/docs/advanced/fine-tuning/#additional-resources","content":" Check the Model Providers documentation for more details about specific providersSee Configuration Guide for general configuration optionsVisit Advanced Usage for complex deployment scenarios  Remember to monitor your model's performance and adjust these configurations based on your specific use case and requirements. ","version":"Next","tagName":"h2"},{"title":"Changelog","type":0,"sectionRef":"#","url":"/eliza/docs/community/changelog/","content":"","keywords":"","version":"Next"},{"title":"Unreleased​","type":1,"pageTitle":"Changelog","url":"/eliza/docs/community/changelog/#unreleased","content":" Full Changelog  Implemented enhancements:  Set Port Number in Env to Run Multiple Instances #156Renovate bot for automated updates on dependencies #58How to chat directly with agent #40Telegram Improvements #35Make sure app runs purely on char files, no process.env, and vice versa #30Image Generation #22Telegram Bot #21Multi-model abstraction #19updates to order book and trust score, virtual confidence, last active, decay score, validation trust, multiple recommenders #175 (MarcoMandar)Trustscore, token-performance, token performance simulation #101 (MarcoMandar)  Fixed bugs:  TypeError: Cannot read properties of null (reading 'queueTextCompletion') #168TypeError: Promise.withResolvers is not a function #76sqlite_vss unsupported on win32-x64 #37  Closed issues:  Make sure 100% works with local models #69shouldRespond handler for twitter interactions #68docs #34  Merged pull requests:  server port in env #179 (alextitonis)prettier log setup, minor cleanups #177 (ponderingdemocritus)postgres updates #173 (minghinmatthewlam)adjusting test setup and adding a basic test #172 (sirkitree)feat: Shorten response verbosity #170 (bigsky77)clean up index #163 (ponderingdemocritus)Import work and cleanup #162 (ponderingdemocritus)type export structure #160 (ponderingdemocritus)Update ci.yaml #155 (sirkitree)Create pull_request_template.md #154 (sirkitree)fixed issue with openai #153 (ponderingdemocritus)update docs #152 (madjin)fix name of ImageGeneration.ts #151 (twilwa)Feat/mono #150 (ponderingdemocritus)update docs #149 (madjin)Dependency update testing #147 (sirkitree)chore(deps): Upgrade uuid to v11 and TypeScript to v8 #143 (ohaiku)fix(deps): update dependency uuid to v11 #142 (renovate[bot])chore(deps): update typescript and related to v8 (major) #141 (renovate[bot])chore(deps): update eslint and formatting (major) #139 (renovate[bot])chore(deps): update dependency typedoc-plugin-markdown to v4 #138 (renovate[bot])chore(deps): update dependency rimraf to v6 - autoclosed #137 (renovate[bot])chore(deps): update dependency npm-run-all2 to v7 #136 (renovate[bot])chore(deps): update dependency itty-router to v5 #135 (renovate[bot])chore(deps): update dependency docusaurus-plugin-typedoc to v1 #134 (renovate[bot])chore(deps): update dependency @types/node to v22 #133 (renovate[bot])chore(deps): update dependency @types/jest to v29 #132 (renovate[bot])fix(deps): update react monorepo to v18.3.1 #131 (renovate[bot])fix(deps): update docusaurus monorepo to v3.5.2 #130 (renovate[bot])fix(deps): update dependency sql.js to v1.12.0 #129 (renovate[bot])fix(deps): update dependency react-router-dom to v6.27.0 #128 (renovate[bot])fix(deps): update dependency prism-react-renderer to v2.4.0 #127 (renovate[bot])fix(deps): update dependency playwright to v1.48.2 #126 (renovate[bot])fix(deps): update dependency pdfjs-dist to v4.7.76 #125 (renovate[bot])fix(deps): update dependency onnxruntime-node to v1.20.0 - autoclosed #124 (renovate[bot])fix(deps): update dependency node-llama-cpp to v3.1.1 #123 (renovate[bot])fix(deps): update dependency jieba-wasm to v2.2.0 #122 (renovate[bot])fix(deps): update dependency figlet to v1.8.0 #121 (renovate[bot])fix(deps): update dependency better-sqlite3 to v11.5.0 #120 (renovate[bot])fix(deps): update dependency @supabase/supabase-js to v2.46.1 #119 (renovate[bot])fix(deps): update dependency @mdx-js/react to v3.1.0 #118 (renovate[bot])fix(deps): update dependency @echogarden/speex-resampler-wasm to v0.2.1 #117 (renovate[bot])fix(deps): update dependency @echogarden/kissfft-wasm to v0.2.0 #116 (renovate[bot])fix(deps): update dependency @echogarden/espeak-ng-emscripten to v0.3.0 #115 (renovate[bot])fix(deps): update dependency @cliqz/adblocker-playwright to v1.34.0 #114 (renovate[bot])fix(deps): update ai/ml packages #113 (renovate[bot])chore(deps): update rollup and plugins #112 (renovate[bot])chore(deps): update dependency wrangler to v3.84.0 #111 (renovate[bot])chore(deps): update dependency typedoc to v0.26.10 #110 (renovate[bot])chore(deps): update dependency @types/node to v20.17.3 #109 (renovate[bot])fix(deps): update dependency socket.io to v4.8.1 #108 (renovate[bot])fix(deps): update dependency nodemon to v3.1.7 #107 (renovate[bot])fix(deps): update dependency clsx to v2.1.1 #106 (renovate[bot])fix(deps): update dependency @diffusionstudio/vits-web to v1.0.3 #105 (renovate[bot])chore(deps): update dependency npm-run-all2 to v5.0.2 #104 (renovate[bot])Postgres DB Adapter #102 (leomercier)chore(deps): update dependency @types/fluent-ffmpeg to v2.1.27 #100 (renovate[bot])fix(deps): pin dependency socket.io to 4.8.0 #99 (renovate[bot])fix(deps): pin dependencies #98 (renovate[bot])fix(deps): update dependency discord.js to v14.16.3 #97 (renovate[bot])chore(deps): update dependency eslint to v8.57.1 #96 (renovate[bot])fix(deps): pin dependencies #94 (renovate[bot])fix(deps): pin dependencies #93 (renovate[bot])chore(deps): pin dependencies #90 (renovate[bot])chore(deps): update dependency tslib to v2.8.0 #89 (renovate[bot])fix(deps): pin dependencies #88 (renovate[bot])chore(deps): pin dependencies #87 (renovate[bot])chore(deps): pin dependencies #86 (renovate[bot])chore(deps): update rollup and plugins #85 (renovate[bot])chore(deps): pin dependencies #84 (renovate[bot])chore(deps): pin dependencies #83 (renovate[bot])chore(deps): replace dependency npm-run-all with npm-run-all2 5.0.0 #82 (renovate[bot])chore(config): migrate renovate config #80 (renovate[bot])fix(deps): update dependency pdfjs-dist to v4.2.67 [security] #78 (renovate[bot])chore(deps): update dependency rollup to v2.79.2 [security] #77 (renovate[bot])Model provider abstraction #74 (lalalune)Image gen #44 (alextitonis)  ","version":"Next","tagName":"h2"},{"title":"v0.0.1 (2024-10-29)​","type":1,"pageTitle":"Changelog","url":"/eliza/docs/community/changelog/#v001-2024-10-29","content":" Full Changelog  Closed issues:  cleanup remnants of sqlite_vss #66Create issue templates #61Contributing #45How to specify a character file #39Easy switching between openai and llama #15Get image media from Discord and describe it #14Summarize links from Discord and Twitter #13Get image media from tweets and describe it #11Feed Twitter Client #10Replace Elevenlabs with faster TTS #6Integrate Moondream into Twitter and Discord #5Replace GPT-3.5 with Node Llama3 #3Replace OpenAI Whisper with Whisper Turbo #2Integrate agent-twitter-client #1  Merged pull requests:  chore: fix typo #71 (eltociear)cleanup from #60, resolves #66 #67 (sirkitree)Telegram Integration with shouldRespond handler + image recognition #65 (dreaminglucid)Initial commit for adding Renovate autoupdater. #63 (mrdavidburns)adding github issue templates #62 (sirkitree)sqlite_vss issue #60 (MarcoMandar)Clarifying instructions to run locally #59 (ferric-sol)corrected node-llama-cpp command #57 (Honkware)Adding a CONTRIBUTING.md #46 (sirkitree)pumpfun #43 (MarcoMandar)provide a way to chat directly with the agent via the command line #42 (sirkitree)Update README.md #41 (sirkitree)Update README.md #36 (wahndo)Telegram #31 (lalalune)token provider #24 (MarcoMandar)minor fixes to base.ts and llama.ts, resolved missing package.json im… #20 (twilwa)More twitter upgrades and refactoring #18 (lalalune)Refactor, Plumbing, Twitter Agent #17 (lalalune)Integrate Moondream into Twitter and Discord #16 (vladkashka56)New Twitter Client #8 (lalalune)  * This Changelog was automatically generated by github_changelog_generator ","version":"Next","tagName":"h2"},{"title":"Frequently Asked Questions","type":0,"sectionRef":"#","url":"/eliza/docs/community/faq/","content":"","keywords":"","version":"Next"},{"title":"Eliza FAQ​","type":1,"pageTitle":"Frequently Asked Questions","url":"/eliza/docs/community/faq/#eliza-faq","content":" ","version":"Next","tagName":"h2"},{"title":"What is Eliza?​","type":1,"pageTitle":"Frequently Asked Questions","url":"/eliza/docs/community/faq/#what-is-eliza","content":" Eliza is an open-source, multi-agent simulation framework for creating and managing autonomous AI agents. The project aims to empower developers and users to build unique AI personalities that can interact across various platforms, such as Discord, Twitter, and Telegram.  ","version":"Next","tagName":"h3"},{"title":"Who is behind Eliza?​","type":1,"pageTitle":"Frequently Asked Questions","url":"/eliza/docs/community/faq/#who-is-behind-eliza","content":" The Eliza project is led by the developers of ai16z, an AI-driven DAO founded by an AI version of Marc Andreessen. The lead developer is Shaw, who is also known for his work on projects like @pmairca and @degenspartanai. The project is open source, and its code is available on GitHub: https://github.com/ai16z/eliza  ","version":"Next","tagName":"h3"},{"title":"How can I get started with Eliza?​","type":1,"pageTitle":"Frequently Asked Questions","url":"/eliza/docs/community/faq/#how-can-i-get-started-with-eliza","content":" To begin building your own AI agents with Eliza, follow these steps:  Install Node.js and pnpm: Ensure you have the necessary software prerequisites installed on your system. We use node v23.Set up your environment: Create a .env file and populate it with the required API keys, database configuration, and platform-specific tokens.Install Eliza: Use the command npm install eliza or pnpm install eliza to install the Eliza package.Configure your database: Eliza currently relies on Supabase for local development. Follow the instructions in the documentation to set up your Supabase project and database.Define your agent's character: Create a character file using the provided JSON format to specify your agent's personality, knowledge, and behavior.Run Eliza locally: Use the provided commands to start the Eliza framework and interact with your agent.  ","version":"Next","tagName":"h3"},{"title":"What are the key components of Eliza?​","type":1,"pageTitle":"Frequently Asked Questions","url":"/eliza/docs/community/faq/#what-are-the-key-components-of-eliza","content":" Eliza's architecture consists of several interconnected components:  Agents: These are the core elements that represent individual AI personalities. Agents operate within a runtime environment and interact with various platforms.Actions: Actions are predefined behaviors that agents can execute in response to messages, enabling them to perform tasks and interact with external systems.Clients: Clients act as interfaces between agents and specific platforms, such as Discord, Twitter, and Telegram. They handle platform-specific message formats and communication protocols.Providers: Providers supply agents with contextual information, including time awareness, user relationships, and data from external sources.Evaluators: These modules assess and extract information from conversations, helping agents track goals, build memory, and maintain context awareness.Character Files: These JSON files define the personality, knowledge, and behavior of each AI agent.Memory System: Eliza features a sophisticated memory management system that utilizes vector embeddings and relational database storage to store and retrieve information for agents.  ","version":"Next","tagName":"h3"},{"title":"How can I contribute to the Eliza project?​","type":1,"pageTitle":"Frequently Asked Questions","url":"/eliza/docs/community/faq/#how-can-i-contribute-to-the-eliza-project","content":" Eliza welcomes contributions from individuals with a wide range of skills:  Technical Contributions​  Develop new actions, clients, providers, and evaluators: Extend Eliza's functionality by creating new modules or enhancing existing ones.Contribute to database management: Improve or expand Eliza's database capabilities using PostgreSQL, SQLite, or SQL.js.Enhance local development workflows: Improve documentation and tools for local development using SQLite and VS Code.Fine-tune models: Optimize existing models or implement new models for specific tasks and personalities.Contribute to the autonomous trading system and trust engine: Leverage expertise in market analysis, technical analysis, and risk management to enhance these features.  Non-Technical Contributions​  Community Management: Onboard new members, organize events, moderate discussions, and foster a welcoming community.Content Creation: Create memes, tutorials, documentation, and videos to share project updates.Translation: Translate documentation and other materials to make Eliza accessible to a global audience.Domain Expertise: Provide insights and feedback on specific applications of Eliza in various fields.  ","version":"Next","tagName":"h3"},{"title":"What are the future plans for Eliza?​","type":1,"pageTitle":"Frequently Asked Questions","url":"/eliza/docs/community/faq/#what-are-the-future-plans-for-eliza","content":" The Eliza project is continuously evolving, with ongoing development and community contributions. The team is actively working on:  Expanding platform compatibility: Adding support for more platforms and services.Improving model capabilities: Enhance agent performance and capabilities with existing and new models.Enhancing the trust engine: Provide robust and secure recommendations within decentralized networks.Fostering community growth: Rewarding contributions to expand the project's reach and impact.    ","version":"Next","tagName":"h3"},{"title":"ai16z FAQ​","type":1,"pageTitle":"Frequently Asked Questions","url":"/eliza/docs/community/faq/#ai16z-faq","content":" ","version":"Next","tagName":"h2"},{"title":"What is ai16z and how is it related to Eliza?​","type":1,"pageTitle":"Frequently Asked Questions","url":"/eliza/docs/community/faq/#what-is-ai16z-and-how-is-it-related-to-eliza","content":" ai16z is an AI-driven DAO and fund, conceptualized as being led by an AI version of Marc Andreessen. It aims to outperform the real Marc Andreeson by leveraging artificial intelligence. The developers of Eliza created ai16z to support their work in autonomous AI agents. While ai16z primarily focuses on trading, Eliza is a more general-purpose framework that can be used for various applications beyond finance.  ","version":"Next","tagName":"h3"},{"title":"When will token is mintable be fixed?​","type":1,"pageTitle":"Frequently Asked Questions","url":"/eliza/docs/community/faq/#when-will-token-is-mintable-be-fixed","content":" Token is controlled by DAO community, no single person can unilaterally mint new tokens. The daos.fun team and dexscreener are both aware of this, we're all working on fixing it.  ","version":"Next","tagName":"h3"},{"title":"Liquidity seems low​","type":1,"pageTitle":"Frequently Asked Questions","url":"/eliza/docs/community/faq/#liquidity-seems-low","content":" The DAOs.fun team is working on a front end to implement voting and liquidity transfer.  ","version":"Next","tagName":"h3"},{"title":"What is the difference between $ai16z and $degenai?​","type":1,"pageTitle":"Frequently Asked Questions","url":"/eliza/docs/community/faq/#what-is-the-difference-between-ai16z-and-degenai","content":" The $ai16z token is the governance token of the ai16z DAO. Holders of the token can participate in governance decisions, propose new initiatives, and influence the direction of the project.  DegenSpartanAI is another AI agent project created by Shaw. The $degenai token is associated with this project. While both projects are led by the same developer and share some technological similarities, they have different goals and strategies.  ai16z is envisioned as a community-driven, PvE (player versus environment) focused fund, while DegenAI is more of a trading agent with a PvP (player versus player), aggressive approach.  ","version":"Next","tagName":"h3"},{"title":"Will the agent launch pump fund coins?​","type":1,"pageTitle":"Frequently Asked Questions","url":"/eliza/docs/community/faq/#will-the-agent-launch-pump-fund-coins","content":" The capability to do so is there, it's ultimately up to the AI agent on whether or not it will.  ","version":"Next","tagName":"h3"},{"title":"Can the agent invest in my project?​","type":1,"pageTitle":"Frequently Asked Questions","url":"/eliza/docs/community/faq/#can-the-agent-invest-in-my-project","content":" Yes, if you make a convincing argument.  ","version":"Next","tagName":"h3"},{"title":"Who runs ai16z?​","type":1,"pageTitle":"Frequently Asked Questions","url":"/eliza/docs/community/faq/#who-runs-ai16z","content":" ai16z is a decentralized autonomous organization (DAO) launched on daos.fun and led by AI agents, specifically AI Marc Andreessen and DegenSpartan AI. Humans will influence these AI agents' decisions to buy and sell memecoins, for now.  ","version":"Next","tagName":"h3"},{"title":"Do all trade suggestions happen in one place?​","type":1,"pageTitle":"Frequently Asked Questions","url":"/eliza/docs/community/faq/#do-all-trade-suggestions-happen-in-one-place","content":" Initially, AI Marc Andreessen will gather data and make decisions in a private Discord group chat. Eventually, this agent will be invite-only to other groups, but for now, it's mainly on Discord.  ","version":"Next","tagName":"h3"},{"title":"What happens when people copy the GitHub?​","type":1,"pageTitle":"Frequently Asked Questions","url":"/eliza/docs/community/faq/#what-happens-when-people-copy-the-github","content":" Many are already creating their own AI agents using the open-source ELIZA framework, but they won't have access to the pre-trained models used by AI Marc and DegenSpartan AI.  ","version":"Next","tagName":"h3"},{"title":"What are the future plans for ai16z?​","type":1,"pageTitle":"Frequently Asked Questions","url":"/eliza/docs/community/faq/#what-are-the-future-plans-for-ai16z","content":" We're developing a &quot;marketplace of trust&quot; where AI agents can learn from community insights and adjust their trust scores based on the performance of recommendations. Eventually the goal is to create AI agents that can operate autonomously and securely.  ","version":"Next","tagName":"h3"},{"title":"How can I contribute to ai16z?​","type":1,"pageTitle":"Frequently Asked Questions","url":"/eliza/docs/community/faq/#how-can-i-contribute-to-ai16z","content":" There are several ways to contribute to the ai16z project:  Participate in community discussions: Share your memecoin insights, propose new ideas, and engage with other community members.Contribute to the development of the ai16z platform: https://github.com/orgs/ai16z/projects/1/views/3Help build the ai16z ecosystem: Create applicatoins / tools, resources, and memes. Give feedback, and spread the word  Other questions:  ai16z and a16z are not officially affiliated.ELIZA is an open-source conversational agent framework.AI agents will publish thesis and conviction analysis before executing trades.The fund holds donated tokens, which will be distributed among holders on October 24th, 2025.AI Marc is the &quot;shot caller&quot; with a network of assisting agents (human or AI) that can influence its decisions. ","version":"Next","tagName":"h3"},{"title":"Notes","type":0,"sectionRef":"#","url":"/eliza/docs/community/notes/","content":"","keywords":"","version":"Next"},{"title":"Discord Stream 11-6-24​","type":1,"pageTitle":"Notes","url":"/eliza/docs/community/notes/#discord-stream-11-6-24","content":" Part 1​  Watch: Youtube  00:00:00 - Overview  Eliza is moving to a plugin architecture to enable developers to easily add integrations (e.g. Ethereum wallets, NFTs, Obsidian, etc.) without modifying core codePlugins allow devs to focus on specific areas of interestCore changes will focus on enabling more flexibility and features to support plugins  00:01:27 - Core abstractions  Characters: Way to input information to enable multi-agent systemsActions, evaluators, providersExisting capabilities: Document reading, audio transcription, video summarization, long-form context, timed message summarization  00:02:50 - Eliza as an agent, not just a chatbot  Designed to act human-like and interact with the world using human toolsAim is to enable natural interactions without reliance on slash commands  00:04:44 - Advanced usage and services  Memory and vector search db (SQLite, Postgres with pgVector)Browser service to summarize website content, get through CAPTCHAsServices are tools leveraged by actions, attached to runtime  00:06:06 - Character-centric configuration  Moving secrets, API keys, model provider to character configClients will become plugins, selectable per characterAllows closed-source custom plugins while still contributing to open-source  00:10:13 - Providers  Inject dynamic, real-time context into the agentExamples: Time, wallet, marketplace trust score, token balances, boredom/cringe detectionEasy to add and register with the agent  00:15:12 - Setting up providers and default actions  Default providers imported in runtime.tsCLI loads characters and default actions (to be made more flexible)Character config will define custom action names to load  00:18:13 - Actions Q: How does each client decide which action to call? A: Agent response can include text, action, or both. Process actions checks the action name/similes and executes the corresponding handler. Action description is injected into agent context to guide usage.  00:22:27 - Action execution flow  Check if action should be taken (validation)Determine action outcomeCompose context and send follow-up if continuingExecute desired functionality (mint token, generate image, etc.)Use callback to send messages back to the connector (Discord, Twitter, etc.)  00:24:47 - Choosing actions Q: How does it choose which action to run? A: The &quot;generate method response&quot; includes the action to run. Message handler template includes action examples, facts, generated dialogue actions, and more to guide the agent.  00:28:22 - Custom actions Q: How to create a custom action (e.g. send USDC to a wallet)? A: Use existing actions (like token swap) as a template. Actions don't have input fields, but use secondary prompts to gather parameters. The &quot;generate object&quot; converts language to API calls.  00:32:21 - Limitations of action-only approaches  Shaw believes half of the PhD papers on action-only models are not reproducibleMany public claims of superior models are exaggerated; use Eliza if it's better  00:36:40 - Next steps  Shaw to make a tutorial to better communicate key conceptsDebugging and improvements based on the discussionAttendee to document their experience and suggest doc enhancements  ","version":"Next","tagName":"h2"},{"title":"Part 2​","type":1,"pageTitle":"Notes","url":"/eliza/docs/community/notes/#part-2","content":" Watch: Youtube  00:00:00 - Dealing with OpenAI rate limits for new accounts  New accounts have very low rate limitsOptions to increase limits: Have a friend at OpenAI age your accountUse an older accountConsistently use the API and limits will increase quickly Can also email OpenAI to request limit increases  00:00:43 - Alternatives to OpenAI to avoid rate limits  Amazon Bedrock or Google Vertex likely have same models without strict rate limitsSwitching to these is probably a one-line changeProject 89 got unlimited free access to Vertex  00:01:25 - Memory management best practices Q: Suggestions for memory management best practices across users/rooms? A: Most memory systems are user-agent based, with no room concept. Eliza uses a room abstraction (like a Discord channel/server or Twitter thread) to enable multi-agent simulation. Memories are stored per-agent to avoid collisions.  00:02:57 - Using memories in Eliza  Memories are used in the composeState functionPulls memories from various sources (recent messages, facts, goals, etc.) into a large state objectState object is used to hydrate templatesCustom memory providers can be added to pull from other sources (Obsidian, databases)  00:05:11 - Evaluators vs. Action validation  Actions have a validate function to check if the action is valid to run (e.g., check if agent has a wallet before a swap)Evaluators are a separate abstraction that run a &quot;reflection&quot; stepExample: Fact extraction evaluator runs every N messages to store facts about the user as memoriesAllows agent to &quot;get to know&quot; the user without needing full conversation history  00:07:58 - Example use case: Order book evaluator  Evaluator looks at chats sent to an agent and extracts information about &quot;shields&quot; (tokens?)Uses this to build an order book and &quot;marketplace of trust&quot;  00:09:15 - Mapping Eliza abstractions to OODA loop  Providers: Observe/Orient stages (merged since agent is a data machine)Actions &amp; response handling: Decide stageAction execution: Act stageEvaluators: Update state, then loop back to Decide  00:10:03 - Wrap up  Shaw considers making a video to explain these concepts in depth  ","version":"Next","tagName":"h3"},{"title":"Part 3​","type":1,"pageTitle":"Notes","url":"/eliza/docs/community/notes/#part-3","content":" Watch: Youtube  00:00:00 - Managing large context sizes  State object can get very large, especially with long user postsEliza uses &quot;trim tokens&quot; and a maximum content length (120k tokens) to cap context size New models have 128k-200k context, which is a lot (equivalent to 10 YouTube videos + full conversation) Conversation length is typically capped at 32 messages Fact extraction allows recalling information beyond this windowPer-channel conversation access Increasing conversation length risks more aggressive token trimming from the top of the prompt Keep instructions at the bottom to avoid trimming them  00:01:53 - Billing costs for cloud/GPT models Q: What billing costs have you experienced with cloud/GPT model integration? A:  Open Router has a few always-free models limited to 8k context and rate-limited Plan to re-implement and use these for the tiny/check model with fallback for rate limiting 8k context unlikely to make a good agent; preference for smaller model over largest 8k oneLocally-run models are free for MacBooks with 16GB RAM, but not feasible for Linux/AMD users  00:03:35 - Cost management strategies  Very cost-scalable depending on model sizeUse very cheap model (1000x cheaper than GPT-4) for should_respond handler Runs AI on every message, so cost is a consideration Consider running a local Llama 3B model for should_respond to minimize costs Only pay for valid generations  00:04:32 - Model provider and class configuration  ModelProvider class with ModelClass (small, medium, large, embedding)Configured in models.tsExample: OpenAI small = GPT-4-mini, medium = GPT-4Approach: Check if model class can handle everything in less than 8k context If yes (should_respond), default to free tierElse, use big models  00:06:23 - Fine-tuned model support  Extend ModelProvider to support fine-tuned instances of small Llama models for specific tasksIn progress, to be added soonModel endpoint override exists; will add per-model provider override Allows pointing small model to fine-tuned Llama 3.1B for should_respond  00:07:10 - Avoiding cringey model loops  Fine-tuning is a form of anti-slop (avoiding low-quality responses)For detecting cringey model responses, use the &quot;boredom provider&quot; Has a list of cringe words; if detected, agent disengages JSON file exists with words disproportionately high in the dataset To be shared for a more comprehensive solution  ","version":"Next","tagName":"h3"},{"title":"Part 4​","type":1,"pageTitle":"Notes","url":"/eliza/docs/community/notes/#part-4","content":" Watch: Youtube  00:00:00 - Setting up an autonomous agent loop Q: How to set up an agent to constantly loop and explore based on objectives/goals? A: Create a new &quot;autonomous&quot; client:  Initialize with just the runtime (no Express app needed)Set a timer to call a step function every 10 secondsIn the step function: Compose stateDecide on actionExecute actionUpdate stateRun evaluators  00:01:56 - Creating an auto template  Create an autoTemplate with agent info (bio, lore, goals, actions)Prompt: &quot;What does the agent want to do? Your response should only be the name of the action to call.&quot;Compose state using runtime.composeState  00:03:38 - Passing a message object  Need to pass a message object with userId, agentId, content, and roomIdCreate a unique roomId for the autonomous agent using crypto.randomUUID()Set userId and agentId using the runtimeSet content to a default message  00:04:33 - Composing context  Compose context using the runtime, state, and auto template  00:05:02 - Type error  Getting a type error: &quot;is missing the following from type state&quot;(Transcript ends before resolution)  The key steps are:  Create a dedicated autonomous clientSet up a loop to continuously step through the runtimeIn each step, compose state, decide &amp; execute actions, update state, and run evaluatorsCreate a custom auto template to guide the agent's decisionsPass a properly formatted message objectCompose context using the runtime, state, and auto template    ","version":"Next","tagName":"h3"},{"title":"X Space 10-29-24​","type":1,"pageTitle":"Notes","url":"/eliza/docs/community/notes/#x-space-10-29-24","content":" Space: https://x.com/weremeow/status/1851365658916708616  00:04:03 - Keeping up with rapid AI agent growth00:09:01 - Imran from Alliance DAO on consumer AI incubators00:14:04 - Discussion on Goatsea and Opus AI system00:14:34 - Exponential growth accelerates AI progress00:17:10 - Entertainers and AI as modern &quot;religions&quot;00:28:45 - Mathis on Opus and &quot;Goatse Gospels&quot;00:35:11 - Base vs. instruct/chat-tuned models00:59:42 - http://ai16z.vc approach to memecoins fund01:17:06 - Balancing chaotic vs. orderly AI systems01:25:38 - AI controlling blockchain keys/wallets01:36:10 - Creation story of ai16z01:40:27 - AI / Crypto tipping points01:49:54 - Preserving Opus on-chain before potential takedown01:58:46 - Shinkai Protocol’s decentralized AI wallet02:17:02 - Fee-sharing model to sustain DAOs02:21:18 - DAO token liquidity pools as passive income02:27:02 - AI bots for DAO treasury oversight02:31:30 - AI-facilitated financial freedom for higher pursuits02:41:51 - Call to build on http://DAO.fun for team-friendly economics    ","version":"Next","tagName":"h2"},{"title":"X Space 10-27-24​","type":1,"pageTitle":"Notes","url":"/eliza/docs/community/notes/#x-space-10-27-24","content":" Space: https://x.com/shawmakesmagic/status/1850609680558805422  00:00:00 - Opening  Co-hosts: Shaw and JinPurpose: Structured FAQ session about AI16Z and DegenAIFormat: Pre-collected questions followed by audience Q&amp;A  00:06:40 - AI16Z vs DegenAI Relationship Q: What's the difference between AI16Z and DegenAI? A:  ai16z: DAO-based investment vehicle, more PvE focused, community drivenDegenAI: Individual trading agent, PvP focused, more aggressive strategyBoth use same codebase but different personalitiesDAO is a large holder of DegenAIManagement fees (1%) used to buy more DegenAICarry fees reinvested in DegenAIProjects intentionally interlinked but serve different purposes  00:10:45 - Trust Engine Mechanics Q: How does the trust engine work? A:  Users share contract addresses with confidence levelsSystem tracks recommendation performanceLow conviction recommendations = low penalty if wrongHigh conviction failures severely impact trust scoreHistorical performance tracked for trust calculationTrust scores influence agent's future decision-making  00:21:45 - Technical Infrastructure Q: Where do the agents live? A:  Currently: Test servers and local developmentFuture: Trusted Execution Environment (TEE)Partnership with TreasureDAO for infrastructureGoal: Fully autonomous agents without developer controlPrivate keys generated within TEE for security  00:34:20 - Trading Implementation Q: When will Mark start trading? A:  Three phase approach:  Testing tech infrastructureVirtual order book/paper tradingLive trading with real assets  Using Jupiter API for swapsInitial focus on basic trades before complex strategiesTrading decisions based on community trust scores  00:54:15 - Development Status Q: Who's building this? A:  Open source project with multiple contributorsKey maintainers: Circuitry, Nate MartinCommunity developers incentivized through token ownershipFocus on reusable components and documentation  01:08:35 - AI Model Architecture Q: What models power the agents? A:  DegenAI: Llama 70BUsing Together.xyz for model marketplaceContinuous fine-tuning plannedDifferent personalities require different model approachesAvoiding GPT-4 due to distinct &quot;voice&quot;  01:21:35 - Ethics Framework Q: What ethical guidelines are being followed? A:  Rejecting traditional corporate AI ethics frameworksFocus on community-driven standardsEmphasis on transparency and open sourceGoal: Multiple competing approaches rather than single standardPriority on practical utility over theoretical ethics  01:28:30 - Wrap-up  Discord: AI16z.vcFuture spaces planned with DAOs.fun teamFocus on responsible growthCommunity engagement continuing in Discord  The space emphasized technical implementation details while addressing community concerns about governance, ethics, and practical functionality.    ","version":"Next","tagName":"h2"},{"title":"X Space 10-25-24​","type":1,"pageTitle":"Notes","url":"/eliza/docs/community/notes/#x-space-10-25-24","content":" https://x.com/shawmakesmagic/status/1848553697611301014 https://www.youtube.com/live/F3IZ3ikacWM?feature=share  Overview  00:00-30:00 Talks about Eliza framework. The bot is able to tweet, reply to tweets, search Twitter for topics, and generate new posts on its own every few hours. It works autonomously without human input (except to fix the occasional issues)30:00-45:00 Deep dive into creating the bots personality which is defined by character files containing bios, lore, example conversations, and specific directions. Some alpha for those45:00-60:00 working on adding capabilities for the bot to make crypto token swaps and trades. This requires providing the bot wallet balances, token prices, market data, and a swap action. Some live coding for showing how new features can get implemented.60:00-75:00 Discussion around the symbiosis between the AI and crypto communities. AI developers are realizing they can monetize their work through tokens vs traditional VC funding route. Crypto people are learning about AI advancements.  Notes  A large amount of $degenai tokens were moved to the DAO, which the AI bot &quot;Marc&quot; will hold and eventually trade with.The goal is to make the AI bot a genuinely good venture capitalist that funds cool projects and buys interesting tokens. They want it to be high fidelity and real, bringing in Marc Andreeson's real knowledge by training a model on his writings.Shaw thinks the only way to make an authentic / legitimate AI version of Marc Andreessen is to also have it outperform the real Marc Andreessen financially.AI Marc Andreessen (or AI Marc) will be in a Discord channel (Telegram was also mentioned). DAO token holders above a certain threshold get access to interact with him, pitch ideas, and try to influence his investing decisions.AI Marc decides how much to trust people's investment advice based on a &quot;virtual Marcetplace of trust&quot;. He tracks how much money he would have made following their recommendations. Successful tips increase trust; failed ones decrease it.The amount of DAO tokens someone holds also influences their sway with AI Marc. The two balancing factors are the virtual Marcetplace of trust performance and DAO token holdings.The core tech behind AI Marc AIndreessen is the same agent system that allows him to pull in relevant knowledge, interact with people, and make decisions (http://github.com/ai16z)AI Marc should be able to autonomously execute on-chain activities, not just have humans execute actions on his behalf.In the near future, AI Marc will be able to execute trades autonomously based on the information and recommendations gathered from the community. Human intervention will be minimized.They are working on getting AI Marc on-chain as soon as possible using trusted execution environments for him to take actions like approving trades.The plan is for AI Marc to eventually participate in a &quot;futarchy&quot; style governance market within the DAO, allowing humans to influence decisions but not fully control the AI. ","version":"Next","tagName":"h2"},{"title":"Actions","type":0,"sectionRef":"#","url":"/eliza/docs/core/actions/","content":"","keywords":"","version":"Next"},{"title":"Overview​","type":1,"pageTitle":"Actions","url":"/eliza/docs/core/actions/#overview","content":" Each Action has:  A unique name and similar variations (similes)A validation functionA handler functionA descriptionExample usage patterns  ","version":"Next","tagName":"h2"},{"title":"Built-in Actions​","type":1,"pageTitle":"Actions","url":"/eliza/docs/core/actions/#built-in-actions","content":" ","version":"Next","tagName":"h2"},{"title":"Basic Conversation Actions​","type":1,"pageTitle":"Actions","url":"/eliza/docs/core/actions/#basic-conversation-actions","content":" CONTINUE​  Continues the conversation when additional context is neededUsed for natural conversation flowPrevents over-dominating conversationsLimited to maximum of 3 continues in a row  IGNORE​  Disengages from conversation when appropriateUsed for: Handling aggressive/inappropriate usersAfter natural conversation endingsWhen agent should stop respondingFollowing goodbyes or closings  NONE​  Default action when just responding normallyNo additional behaviors neededBasic conversational responses  ","version":"Next","tagName":"h3"},{"title":"Room Management Actions​","type":1,"pageTitle":"Actions","url":"/eliza/docs/core/actions/#room-management-actions","content":" FOLLOW_ROOM​  Actively follows a conversation/channelParticipates without needing explicit mentionsUsed when: Explicitly asked to participateTopic is highly relevantInput would be valuable  UNFOLLOW_ROOM​  Stops following a previously followed roomOnly responds when explicitly mentionedUsed when: Asked to reduce participationAgent is being too disruptiveInput is no longer needed  MUTE_ROOM &amp; UNMUTE_ROOM​  Completely mutes/unmutes a roomMore strict than follow/unfollowUsed for temporary or permanent disengagement  ","version":"Next","tagName":"h3"},{"title":"External Integrations​","type":1,"pageTitle":"Actions","url":"/eliza/docs/core/actions/#external-integrations","content":" ASK_CLAUDE​  Forwards complex queries to Claude AIHandles: Code review/debuggingContent creationComplex analysisDetailed explanations  IMAGE_GENERATION​  Creates images from text descriptionsSupports multiple providersIncludes image captioningReturns base64 encoded images  ","version":"Next","tagName":"h3"},{"title":"Trading/Financial Actions​","type":1,"pageTitle":"Actions","url":"/eliza/docs/core/actions/#tradingfinancial-actions","content":" SWAP​  Executes token swaps on SolanaHandles slippage and validationSupports: Quote fetchingTransaction simulationError handling  TAKE_ORDER​  Records trading ordersProcesses user conviction levelsManages order book updates  ","version":"Next","tagName":"h3"},{"title":"Creating Custom Actions​","type":1,"pageTitle":"Actions","url":"/eliza/docs/core/actions/#creating-custom-actions","content":" To create a custom action, implement the Action interface:  interface Action { name: string; similes: string[]; description: string; validate: (runtime: IAgentRuntime, message: Memory) =&gt; Promise&lt;boolean&gt;; handler: ( runtime: IAgentRuntime, message: Memory, state?: State, options?: any, callback?: HandlerCallback, ) =&gt; Promise&lt;any&gt;; examples: ActionExample[][]; }   Example custom action:  const customAction: Action = { name: &quot;CUSTOM_ACTION&quot;, similes: [&quot;ALTERNATIVE_NAME&quot;], description: &quot;Describes what the action does&quot;, validate: async (runtime, message) =&gt; { // Validation logic return true; }, handler: async (runtime, message, state, options, callback) =&gt; { // Action implementation return result; }, examples: [ // Usage examples ], };   ","version":"Next","tagName":"h2"},{"title":"Handler Callback​","type":1,"pageTitle":"Actions","url":"/eliza/docs/core/actions/#handler-callback","content":" Actions can use the callback parameter to:  Send intermediate responsesUpdate conversation stateAdd attachmentsTrigger other actions  ","version":"Next","tagName":"h2"},{"title":"Best Practices​","type":1,"pageTitle":"Actions","url":"/eliza/docs/core/actions/#best-practices","content":" Validation Always validate input parametersCheck for required permissionsVerify preconditionsHandle edge cases Error Handling Implement proper error catchingProvide informative error messagesHandle network failures gracefullyClean up resources on failure Examples Provide clear usage examplesShow expected inputs/outputsDemonstrate error casesInclude edge cases State Management Keep track of action stateClean up after completionHandle interruptionsMaintain consistency  ","version":"Next","tagName":"h2"},{"title":"Testing Actions​","type":1,"pageTitle":"Actions","url":"/eliza/docs/core/actions/#testing-actions","content":" Test your actions using the example format:  const examples = [ [ { user: &quot;{{user1}}&quot;, content: { text: &quot;Input message&quot; }, }, { user: &quot;{{user2}}&quot;, content: { text: &quot;Response&quot;, action: &quot;ACTION_NAME&quot;, }, }, ], ];   ","version":"Next","tagName":"h2"},{"title":"Related​","type":1,"pageTitle":"Actions","url":"/eliza/docs/core/actions/#related","content":"","version":"Next","tagName":"h2"},{"title":"Character Files","type":0,"sectionRef":"#","url":"/eliza/docs/core/characterfile/","content":"","keywords":"","version":"Next"},{"title":"Structure Overview​","type":1,"pageTitle":"Character Files","url":"/eliza/docs/core/characterfile/#structure-overview","content":" A character file contains several key sections that work together to define the character's personality and behavior:  { &quot;name&quot;: &quot;character_name&quot;, &quot;bio&quot;: [], &quot;lore&quot;: [], &quot;knowledge&quot;: [], &quot;messageExamples&quot;: [], &quot;postExamples&quot;: [], &quot;topics&quot;: [], &quot;style&quot;: {}, &quot;adjectives&quot;: [] }   ","version":"Next","tagName":"h2"},{"title":"Core Components​","type":1,"pageTitle":"Character Files","url":"/eliza/docs/core/characterfile/#core-components","content":" ","version":"Next","tagName":"h2"},{"title":"Bio Array​","type":1,"pageTitle":"Character Files","url":"/eliza/docs/core/characterfile/#bio-array","content":" Contains biographical information about the characterCan be a single comprehensive biography or multiple shorter statementsMultiple statements are randomized to create variety in responsesExample:  &quot;bio&quot;: [ &quot;Mark Andreessen is an American entrepreneur and investor&quot;, &quot;Co-founder of Netscape and Andreessen Horowitz&quot;, &quot;Pioneer of the early web, created NCSA Mosaic&quot; ]   ","version":"Next","tagName":"h3"},{"title":"Lore Array​","type":1,"pageTitle":"Character Files","url":"/eliza/docs/core/characterfile/#lore-array","content":" Contains interesting facts and details about the characterHelps define personality and unique traitsGets randomly sampled during conversationsExample:  &quot;lore&quot;: [ &quot;Believes strongly in the power of software to transform industries&quot;, &quot;Known for saying 'Software is eating the world'&quot;, &quot;Early investor in Facebook, Twitter, and other tech giants&quot; ]   ","version":"Next","tagName":"h3"},{"title":"Knowledge Array​","type":1,"pageTitle":"Character Files","url":"/eliza/docs/core/characterfile/#knowledge-array","content":" Used for RAG (Retrieval Augmented Generation)Can contain chunks of text from articles, books, or other sourcesHelps ground the character's responses in factual informationCan be generated from PDFs or other documents using provided tools  ","version":"Next","tagName":"h3"},{"title":"Message Examples​","type":1,"pageTitle":"Character Files","url":"/eliza/docs/core/characterfile/#message-examples","content":" Sample conversations between users and the characterHelps establish the character's conversational styleShould cover various topics and scenariosExample:  &quot;messageExamples&quot;: [ [ {&quot;user&quot;: &quot;user1&quot;, &quot;content&quot;: {&quot;text&quot;: &quot;What's your view on AI?&quot;}}, {&quot;user&quot;: &quot;character&quot;, &quot;content&quot;: {&quot;text&quot;: &quot;AI is transforming every industry...&quot;}} ] ]   ","version":"Next","tagName":"h3"},{"title":"Style Object​","type":1,"pageTitle":"Character Files","url":"/eliza/docs/core/characterfile/#style-object","content":" Contains three key sections:  all: General style instructions for all interactionschat: Specific instructions for chat interactionspost: Specific instructions for social media posts  Each section can contain multiple instructions that guide the character's communication style.  ","version":"Next","tagName":"h3"},{"title":"Topics Array​","type":1,"pageTitle":"Character Files","url":"/eliza/docs/core/characterfile/#topics-array","content":" List of subjects the character is interested in or knowledgeable aboutUsed to guide conversations and generate relevant contentHelps maintain character consistency  ","version":"Next","tagName":"h3"},{"title":"Adjectives Array​","type":1,"pageTitle":"Character Files","url":"/eliza/docs/core/characterfile/#adjectives-array","content":" Words that describe the character's traits and personalityUsed for generating responses with consistent toneCan be used in &quot;Mad Libs&quot; style content generation  ","version":"Next","tagName":"h3"},{"title":"Best Practices​","type":1,"pageTitle":"Character Files","url":"/eliza/docs/core/characterfile/#best-practices","content":" Randomization for Variety Break bio and lore into smaller chunksThis creates more natural, varied responsesPrevents repetitive or predictable behavior Knowledge Management Use the provided tools to convert documents into knowledge: npx folder2knowledge &lt;path/to/folder&gt; npx knowledge2character &lt;character-file&gt; &lt;knowledge-file&gt; Style Instructions Be specific about communication patternsInclude both dos and don'tsConsider platform-specific behavior (chat vs posts) Message Examples Include diverse scenariosShow character-specific responsesDemonstrate typical interaction patterns  ","version":"Next","tagName":"h2"},{"title":"Tools and Utilities​","type":1,"pageTitle":"Character Files","url":"/eliza/docs/core/characterfile/#tools-and-utilities","content":" Generate from Twitter  npx tweets2character   Convert Documents to Knowledge  npx folder2knowledge &lt;path/to/folder&gt;   Add Knowledge to Character  npx knowledge2character &lt;character-file&gt; &lt;knowledge-file&gt;   ","version":"Next","tagName":"h2"},{"title":"Context Length Considerations​","type":1,"pageTitle":"Character Files","url":"/eliza/docs/core/characterfile/#context-length-considerations","content":" Modern LLMs support longer contexts (128k tokens)No strict limits on section lengthsFocus on quality and relevance rather than sizeConsider randomization for large collections of information  ","version":"Next","tagName":"h2"},{"title":"Validation​","type":1,"pageTitle":"Character Files","url":"/eliza/docs/core/characterfile/#validation","content":" You can validate your character file against the schema using provided tools:  # Python python examples/validate.py # JavaScript node examples/validate.mjs   ","version":"Next","tagName":"h2"},{"title":"Tips for Quality​","type":1,"pageTitle":"Character Files","url":"/eliza/docs/core/characterfile/#tips-for-quality","content":" Bio and Lore Mix factual and personality-defining informationInclude both historical and current detailsBreak into modular, reusable pieces Style Instructions Be specific about tone and mannerismsInclude platform-specific guidanceDefine clear boundaries and limitations Examples Cover common scenariosShow character-specific reactionsDemonstrate proper tone and style Knowledge Focus on relevant informationOrganize in digestible chunksUpdate regularly to maintain relevance ","version":"Next","tagName":"h2"},{"title":"Evaluators","type":0,"sectionRef":"#","url":"/eliza/docs/core/evaluators/","content":"","keywords":"","version":"Next"},{"title":"Overview​","type":1,"pageTitle":"Evaluators","url":"/eliza/docs/core/evaluators/#overview","content":" Evaluators help agents:  Extract useful information from conversationsTrack progress toward goalsBuild long-term memoryMaintain context awareness  ","version":"Next","tagName":"h2"},{"title":"Built-in Evaluators​","type":1,"pageTitle":"Evaluators","url":"/eliza/docs/core/evaluators/#built-in-evaluators","content":" ","version":"Next","tagName":"h2"},{"title":"Fact Evaluator​","type":1,"pageTitle":"Evaluators","url":"/eliza/docs/core/evaluators/#fact-evaluator","content":" The fact evaluator extracts factual information from conversations for long-term memory storage.  interface Fact { claim: string; type: &quot;fact&quot; | &quot;opinion&quot; | &quot;status&quot;; in_bio: boolean; already_known: boolean; }   Fact Types​  fact: True statements about the world or character that don't changestatus: Facts that are true but may change over timeopinion: Non-factual opinions, thoughts, feelings, or recommendations  Example Facts:​  [ { &quot;claim&quot;: &quot;User lives in Oakland&quot;, &quot;type&quot;: &quot;fact&quot;, &quot;in_bio&quot;: false, &quot;already_known&quot;: false }, { &quot;claim&quot;: &quot;User completed marathon in 3 hours&quot;, &quot;type&quot;: &quot;fact&quot;, &quot;in_bio&quot;: false, &quot;already_known&quot;: false }, { &quot;claim&quot;: &quot;User is proud of their achievement&quot;, &quot;type&quot;: &quot;opinion&quot;, &quot;in_bio&quot;: false, &quot;already_known&quot;: false } ]   ","version":"Next","tagName":"h3"},{"title":"Goal Evaluator​","type":1,"pageTitle":"Evaluators","url":"/eliza/docs/core/evaluators/#goal-evaluator","content":" The goal evaluator tracks progress on agent goals and objectives.  interface Goal { id: string; name: string; status: &quot;IN_PROGRESS&quot; | &quot;DONE&quot; | &quot;FAILED&quot;; objectives: Objective[]; } interface Objective { description: string; completed: boolean; }   Goal Updates​  Monitors conversation for goal progressUpdates objective completion statusMarks goals as complete when all objectives are doneMarks goals as failed when they cannot be completed  Example Goal:​  { &quot;id&quot;: &quot;goal-123&quot;, &quot;name&quot;: &quot;Complete Marathon Training&quot;, &quot;status&quot;: &quot;IN_PROGRESS&quot;, &quot;objectives&quot;: [ { &quot;description&quot;: &quot;Run 30 miles per week&quot;, &quot;completed&quot;: true }, { &quot;description&quot;: &quot;Complete practice half-marathon&quot;, &quot;completed&quot;: false } ] }   ","version":"Next","tagName":"h3"},{"title":"Creating Custom Evaluators​","type":1,"pageTitle":"Evaluators","url":"/eliza/docs/core/evaluators/#creating-custom-evaluators","content":" To create a custom evaluator, implement the Evaluator interface:  interface Evaluator { name: string; similes: string[]; description: string; validate: (runtime: IAgentRuntime, message: Memory) =&gt; Promise&lt;boolean&gt;; handler: ( runtime: IAgentRuntime, message: Memory, state?: State, options?: any, ) =&gt; Promise&lt;any&gt;; examples: EvaluatorExample[]; }   Example custom evaluator:  const customEvaluator: Evaluator = { name: &quot;CUSTOM_EVALUATOR&quot;, similes: [&quot;ALTERNATE_NAME&quot;], description: &quot;Evaluates something in the conversation&quot;, validate: async (runtime, message) =&gt; { // Determine if evaluation should run return true; }, handler: async (runtime, message, state, options) =&gt; { // Evaluation logic return evaluationResult; }, examples: [ // Example inputs and outputs ], };   ","version":"Next","tagName":"h2"},{"title":"Best Practices​","type":1,"pageTitle":"Evaluators","url":"/eliza/docs/core/evaluators/#best-practices","content":" ","version":"Next","tagName":"h2"},{"title":"Fact Extraction​","type":1,"pageTitle":"Evaluators","url":"/eliza/docs/core/evaluators/#fact-extraction","content":" Avoid Duplication Check for existing factsOnly store new informationMark duplicates as already_known Proper Categorization Distinguish between facts/opinions/statusCheck if fact exists in bioInclude relevant context Quality Control Remove corrupted factsValidate fact formatEnsure facts are meaningful  ","version":"Next","tagName":"h3"},{"title":"Goal Tracking​","type":1,"pageTitle":"Evaluators","url":"/eliza/docs/core/evaluators/#goal-tracking","content":" Clear Objectives Break goals into measurable objectivesDefine completion criteriaTrack partial progress Status Updates Only update changed goalsInclude complete objectives listPreserve unchanged data Failure Handling Define failure conditionsRecord failure reasonsAllow goal adaptation  ","version":"Next","tagName":"h3"},{"title":"Memory Integration​","type":1,"pageTitle":"Evaluators","url":"/eliza/docs/core/evaluators/#memory-integration","content":" Evaluators work with the memory system to:  Store extracted factsUpdate goal statesBuild long-term contextMaintain conversation history  Example memory integration:  // Store new fact const factMemory = await runtime.factManager.addEmbeddingToMemory({ userId: agentId, content: { text: fact }, roomId, createdAt: Date.now(), }); await runtime.factManager.createMemory(factMemory, true);   ","version":"Next","tagName":"h2"},{"title":"Related​","type":1,"pageTitle":"Evaluators","url":"/eliza/docs/core/evaluators/#related","content":"","version":"Next","tagName":"h2"},{"title":"Configuration","type":0,"sectionRef":"#","url":"/eliza/docs/guides/configuration/","content":"","keywords":"","version":"Next"},{"title":"Overview​","type":1,"pageTitle":"Configuration","url":"/eliza/docs/guides/configuration/#overview","content":" The framework provides multiple layers of configuration to customize agent behavior, system settings, and runtime environments. This guide covers all configuration aspects: character files, environment variables, action configuration, and runtime settings.  ","version":"Next","tagName":"h2"},{"title":"Key Components​","type":1,"pageTitle":"Configuration","url":"/eliza/docs/guides/configuration/#key-components","content":" ","version":"Next","tagName":"h2"},{"title":"1. Environment Setup​","type":1,"pageTitle":"Configuration","url":"/eliza/docs/guides/configuration/#1-environment-setup","content":" Create a .env file in your project root:  # Model API Keys OPENAI_API_KEY=your-key CLAUDE_API_KEY=your-key # Database Configuration DATABASE_URL=your-db-url POSTGRES_URL=your-postgres-url # Optional, defaults to SQLite # Client-Specific Tokens DISCORD_API_TOKEN=your-token DISCORD_APPLICATION_ID=your-id TELEGRAM_BOT_TOKEN=your-token TWITTER_USERNAME=your-username   ","version":"Next","tagName":"h3"},{"title":"2. Character Configuration​","type":1,"pageTitle":"Configuration","url":"/eliza/docs/guides/configuration/#2-character-configuration","content":" Create character files in the characters directory:  { &quot;name&quot;: &quot;AgentName&quot;, &quot;clients&quot;: [&quot;discord&quot;, &quot;twitter&quot;, &quot;telegram&quot;], &quot;modelProvider&quot;: &quot;openai&quot;, &quot;settings&quot;: { &quot;secrets&quot;: { &quot;OPENAI_API_KEY&quot;: &quot;your-key&quot; }, &quot;voice&quot;: { &quot;model&quot;: &quot;en_US-male-medium&quot; } }, &quot;bio&quot;: [&quot;Biography elements...&quot;], &quot;lore&quot;: [&quot;Character background...&quot;], &quot;knowledge&quot;: [&quot;Factual information...&quot;], &quot;topics&quot;: [&quot;Relevant topics...&quot;], &quot;style&quot;: { &quot;all&quot;: [&quot;Style guidelines...&quot;], &quot;chat&quot;: [&quot;Chat-specific style...&quot;], &quot;post&quot;: [&quot;Post-specific style...&quot;] } }   ","version":"Next","tagName":"h3"},{"title":"3. Custom Actions​","type":1,"pageTitle":"Configuration","url":"/eliza/docs/guides/configuration/#3-custom-actions","content":" Define custom actions in elizaConfig.yaml:  actions: - name: customAction path: ./actions/customAction.ts - name: anotherAction path: ./custom_actions/anotherAction.ts   ","version":"Next","tagName":"h3"},{"title":"Usage Guide​","type":1,"pageTitle":"Configuration","url":"/eliza/docs/guides/configuration/#usage-guide","content":" ","version":"Next","tagName":"h2"},{"title":"1. Basic Setup​","type":1,"pageTitle":"Configuration","url":"/eliza/docs/guides/configuration/#1-basic-setup","content":" import { createAgentRuntime } from &quot;@your-org/agent-framework&quot;; import { SqliteDatabaseAdapter } from &quot;@your-org/agent-framework/adapters&quot;; // Initialize runtime const runtime = await createAgentRuntime({ character: characterConfig, configPath: &quot;./elizaConfig.yaml&quot;, databaseAdapter: new SqliteDatabaseAdapter(&quot;./db.sqlite&quot;), });   ","version":"Next","tagName":"h3"},{"title":"2. Running Multiple Characters​","type":1,"pageTitle":"Configuration","url":"/eliza/docs/guides/configuration/#2-running-multiple-characters","content":" # Start with specific character file pnpm run dev --characters=./characters/agent1.json,./characters/agent2.json   ","version":"Next","tagName":"h3"},{"title":"3. Client Configuration​","type":1,"pageTitle":"Configuration","url":"/eliza/docs/guides/configuration/#3-client-configuration","content":" // Discord client example const discordClient = new DiscordClient(runtime); await discordClient.start(); // Telegram client example const telegramClient = new TelegramClient(runtime, botToken); await telegramClient.start();   ","version":"Next","tagName":"h3"},{"title":"Configuration Options​","type":1,"pageTitle":"Configuration","url":"/eliza/docs/guides/configuration/#configuration-options","content":" ","version":"Next","tagName":"h2"},{"title":"1. Model Providers​","type":1,"pageTitle":"Configuration","url":"/eliza/docs/guides/configuration/#1-model-providers","content":" const modelProviders = { openai: { small: &quot;gpt-3.5-turbo&quot;, large: &quot;gpt-4&quot;, }, anthropic: { small: &quot;claude-3-haiku&quot;, large: &quot;claude-3-opus&quot;, }, &quot;llama-cloud&quot;: { small: &quot;llama-7b&quot;, large: &quot;llama-70b&quot;, }, };   ","version":"Next","tagName":"h3"},{"title":"2. Database Options​","type":1,"pageTitle":"Configuration","url":"/eliza/docs/guides/configuration/#2-database-options","content":" // SQLite (default) const dbAdapter = new SqliteDatabaseAdapter(&quot;./db.sqlite&quot;); // PostgreSQL const dbAdapter = new PostgresDatabaseAdapter({ connectionString: process.env.POSTGRES_URL, });   ","version":"Next","tagName":"h3"},{"title":"3. Custom Provider Configuration​","type":1,"pageTitle":"Configuration","url":"/eliza/docs/guides/configuration/#3-custom-provider-configuration","content":" // Add custom provider runtime.providers.push({ name: &quot;customProvider&quot;, get: async (runtime, message, state) =&gt; { // Provider implementation return data; }, });   ","version":"Next","tagName":"h3"},{"title":"Best Practices​","type":1,"pageTitle":"Configuration","url":"/eliza/docs/guides/configuration/#best-practices","content":" ","version":"Next","tagName":"h2"},{"title":"1. Security​","type":1,"pageTitle":"Configuration","url":"/eliza/docs/guides/configuration/#1-security","content":" Store sensitive credentials in .env fileUse character-specific secrets for per-agent credentialsNever commit secrets to version controlRotate API keys regularly  ","version":"Next","tagName":"h3"},{"title":"2. Character Configuration​","type":1,"pageTitle":"Configuration","url":"/eliza/docs/guides/configuration/#2-character-configuration-1","content":" Break bio and lore into smaller chunks for varietyUse RAG (knowledge array) for factual informationKeep message examples diverse and representativeUpdate knowledge regularly  ","version":"Next","tagName":"h3"},{"title":"3. Performance​","type":1,"pageTitle":"Configuration","url":"/eliza/docs/guides/configuration/#3-performance","content":" // Optimize context length const settings = { maxContextLength: 4000, // Adjust based on model maxTokens: 1000, // Limit response length temperature: 0.7, // Adjust response randomness };   ","version":"Next","tagName":"h3"},{"title":"4. Error Handling​","type":1,"pageTitle":"Configuration","url":"/eliza/docs/guides/configuration/#4-error-handling","content":" try { const runtime = await createAgentRuntime(config); } catch (error) { if (error.code === &quot;CONFIG_NOT_FOUND&quot;) { console.error(&quot;Configuration file missing&quot;); } else if (error.code === &quot;INVALID_CHARACTER&quot;) { console.error(&quot;Character file validation failed&quot;); } }   ","version":"Next","tagName":"h3"},{"title":"Troubleshooting​","type":1,"pageTitle":"Configuration","url":"/eliza/docs/guides/configuration/#troubleshooting","content":" ","version":"Next","tagName":"h2"},{"title":"Common Issues​","type":1,"pageTitle":"Configuration","url":"/eliza/docs/guides/configuration/#common-issues","content":" Missing Configuration  if (!fs.existsSync(&quot;./elizaConfig.yaml&quot;)) { console.error(&quot;Missing elizaConfig.yaml - copy from example&quot;); }   Invalid Character File  // Validate character file if (!character.name || !character.bio || !character.style) { throw new Error(&quot;Invalid character configuration&quot;); }   Model Provider Issues  // Fallback to local model if (!process.env.OPENAI_API_KEY) { console.log(&quot;Using local model fallback&quot;); runtime.modelProvider = &quot;llama-local&quot;; }   ","version":"Next","tagName":"h3"},{"title":"Next Steps​","type":1,"pageTitle":"Configuration","url":"/eliza/docs/guides/configuration/#next-steps","content":" After basic configuration:  Configure custom actionsSet up client integrationsCustomize character behaviorOptimize model settingsImplement error handling  For more detailed information on specific components, refer to their respective documentation sections. ","version":"Next","tagName":"h2"},{"title":"Providers","type":0,"sectionRef":"#","url":"/eliza/docs/core/providers/","content":"","keywords":"","version":"Next"},{"title":"Overview​","type":1,"pageTitle":"Providers","url":"/eliza/docs/core/providers/#overview","content":" Providers are core modules that inject dynamic context and real-time information into agent interactions. They serve as a bridge between the agent and various external systems, enabling access to market data, wallet information, sentiment analysis, and temporal context.  ","version":"Next","tagName":"h2"},{"title":"Core Provider Types​","type":1,"pageTitle":"Providers","url":"/eliza/docs/core/providers/#core-provider-types","content":" ","version":"Next","tagName":"h2"},{"title":"1. Time Provider​","type":1,"pageTitle":"Providers","url":"/eliza/docs/core/providers/#1-time-provider","content":" Provides temporal context for agent interactions:  const timeProvider: Provider = { get: async (_runtime: IAgentRuntime, _message: Memory) =&gt; { const currentDate = new Date(); const currentTime = currentDate.toLocaleTimeString(&quot;en-US&quot;); const currentYear = currentDate.getFullYear(); return `The current time is: ${currentTime}, ${currentYear}`; }, };   ","version":"Next","tagName":"h3"},{"title":"2. Token Provider​","type":1,"pageTitle":"Providers","url":"/eliza/docs/core/providers/#2-token-provider","content":" Provides comprehensive token analytics and market data:  interface TokenAnalytics { security: TokenSecurityData; tradeData: TokenTradeData; holderDistribution: string; marketMetrics: { price: number; volume24h: number; priceChange: number; }; }   Key features:  Real-time price and volume dataSecurity metrics and risk assessmentHolder distribution analysisDexScreener integrationSmart caching system  ","version":"Next","tagName":"h3"},{"title":"3. Wallet Provider​","type":1,"pageTitle":"Providers","url":"/eliza/docs/core/providers/#3-wallet-provider","content":" Manages cryptocurrency wallet interactions:  interface WalletPortfolio { totalUsd: string; totalSol?: string; items: Array&lt;{ name: string; symbol: string; balance: string; valueUsd: string; valueSol?: string; }&gt;; }   Capabilities:  Portfolio valuationToken balancesPrice trackingPerformance metricsMulti-currency support  ","version":"Next","tagName":"h3"},{"title":"4. Boredom Provider​","type":1,"pageTitle":"Providers","url":"/eliza/docs/core/providers/#4-boredom-provider","content":" Manages conversation dynamics and engagement:  interface BoredomLevel { minScore: number; statusMessages: string[]; }   Features:  Engagement trackingConversation flow managementNatural disengagementSentiment analysisResponse adaptation  ","version":"Next","tagName":"h3"},{"title":"Implementation​","type":1,"pageTitle":"Providers","url":"/eliza/docs/core/providers/#implementation","content":" ","version":"Next","tagName":"h2"},{"title":"Provider Interface​","type":1,"pageTitle":"Providers","url":"/eliza/docs/core/providers/#provider-interface","content":" interface Provider { get: ( runtime: IAgentRuntime, message: Memory, state?: State, ) =&gt; Promise&lt;string&gt;; }   ","version":"Next","tagName":"h3"},{"title":"Data Caching System​","type":1,"pageTitle":"Providers","url":"/eliza/docs/core/providers/#data-caching-system","content":" class CacheManager { private cache: NodeCache; private cacheDir: string; constructor(ttl: number = 300) { // 5 minutes default this.cache = new NodeCache({ stdTTL: ttl }); this.cacheDir = path.join(__dirname, &quot;cache&quot;); } async getCachedData&lt;T&gt;(key: string): Promise&lt;T | null&gt; { // Check memory cache const memoryCache = this.cache.get&lt;T&gt;(key); if (memoryCache) return memoryCache; // Check file cache return this.readFromFileCache&lt;T&gt;(key); } }   ","version":"Next","tagName":"h3"},{"title":"Error Handling​","type":1,"pageTitle":"Providers","url":"/eliza/docs/core/providers/#error-handling","content":" async function withErrorHandling&lt;T&gt;( operation: () =&gt; Promise&lt;T&gt;, fallback: T, retries: number = 3, ): Promise&lt;T&gt; { try { return await operation(); } catch (error) { console.error(`Provider error: ${error.message}`); if (retries &gt; 0) { await delay(1000); return withErrorHandling(operation, fallback, retries - 1); } return fallback; } }   ","version":"Next","tagName":"h3"},{"title":"Provider Configuration​","type":1,"pageTitle":"Providers","url":"/eliza/docs/core/providers/#provider-configuration","content":" ","version":"Next","tagName":"h2"},{"title":"Base Settings​","type":1,"pageTitle":"Providers","url":"/eliza/docs/core/providers/#base-settings","content":" const PROVIDER_CONFIG = { API_ENDPOINTS: { BIRDEYE: &quot;https://public-api.birdeye.so&quot;, DEXSCREENER: &quot;https://api.dexscreener.com/latest/dex&quot;, HELIUS: &quot;https://mainnet.helius-rpc.com&quot;, }, CACHE_TTL: 300, // 5 minutes MAX_RETRIES: 3, RETRY_DELAY: 2000, };   ","version":"Next","tagName":"h3"},{"title":"Rate Limiting​","type":1,"pageTitle":"Providers","url":"/eliza/docs/core/providers/#rate-limiting","content":" const rateLimiter = new RateLimit({ windowMs: 15 * 60 * 1000, // 15 minutes max: 100, // limit each IP to 100 requests per windowMs });   ","version":"Next","tagName":"h3"},{"title":"Best Practices​","type":1,"pageTitle":"Providers","url":"/eliza/docs/core/providers/#best-practices","content":" ","version":"Next","tagName":"h2"},{"title":"1. Data Management​","type":1,"pageTitle":"Providers","url":"/eliza/docs/core/providers/#1-data-management","content":" Implement robust caching strategiesUse appropriate TTL for different data typesValidate data before caching  ","version":"Next","tagName":"h3"},{"title":"2. Performance​","type":1,"pageTitle":"Providers","url":"/eliza/docs/core/providers/#2-performance","content":" // Example of optimized data fetching async function fetchDataWithCache&lt;T&gt;( key: string, fetcher: () =&gt; Promise&lt;T&gt;, ): Promise&lt;T&gt; { const cached = await cache.get(key); if (cached) return cached; const data = await fetcher(); await cache.set(key, data); return data; }   ","version":"Next","tagName":"h3"},{"title":"3. Error Handling​","type":1,"pageTitle":"Providers","url":"/eliza/docs/core/providers/#3-error-handling","content":" Implement retry mechanismsProvide fallback valuesLog errors comprehensivelyHandle API timeouts  ","version":"Next","tagName":"h3"},{"title":"4. Security​","type":1,"pageTitle":"Providers","url":"/eliza/docs/core/providers/#4-security","content":" Validate input parametersSanitize returned dataImplement rate limitingHandle sensitive data appropriately  ","version":"Next","tagName":"h3"},{"title":"Integration Examples​","type":1,"pageTitle":"Providers","url":"/eliza/docs/core/providers/#integration-examples","content":" ","version":"Next","tagName":"h2"},{"title":"Combining Multiple Providers​","type":1,"pageTitle":"Providers","url":"/eliza/docs/core/providers/#combining-multiple-providers","content":" async function getMarketContext( runtime: IAgentRuntime, message: Memory, ): Promise&lt;string&gt; { const [timeContext, walletInfo, tokenData] = await Promise.all([ timeProvider.get(runtime, message), walletProvider.get(runtime, message), tokenProvider.get(runtime, message), ]); return formatContext({ time: timeContext, wallet: walletInfo, token: tokenData, }); }   ","version":"Next","tagName":"h3"},{"title":"Custom Provider Implementation​","type":1,"pageTitle":"Providers","url":"/eliza/docs/core/providers/#custom-provider-implementation","content":" const marketSentimentProvider: Provider = { get: async (runtime: IAgentRuntime, message: Memory) =&gt; { const sentiment = await analyzeSentiment(message.content); const marketMetrics = await getMarketMetrics(); return formatSentimentResponse(sentiment, marketMetrics); }, };   ","version":"Next","tagName":"h3"},{"title":"Troubleshooting​","type":1,"pageTitle":"Providers","url":"/eliza/docs/core/providers/#troubleshooting","content":" ","version":"Next","tagName":"h2"},{"title":"Common Issues and Solutions​","type":1,"pageTitle":"Providers","url":"/eliza/docs/core/providers/#common-issues-and-solutions","content":" Stale Data // Implement cache invalidation const invalidateCache = async (pattern: string) =&gt; { const keys = await cache.keys(pattern); await Promise.all(keys.map((k) =&gt; cache.del(k))); }; Rate Limiting // Implement backoff strategy const backoff = async (attempt: number) =&gt; { const delay = Math.min(1000 * Math.pow(2, attempt), 10000); await new Promise((resolve) =&gt; setTimeout(resolve, delay)); }; API Failures // Implement fallback data sources const getFallbackData = async () =&gt; { // Attempt alternative data sources };   ","version":"Next","tagName":"h3"},{"title":"Additional Resources​","type":1,"pageTitle":"Providers","url":"/eliza/docs/core/providers/#additional-resources","content":"","version":"Next","tagName":"h2"},{"title":"Basic Usage","type":0,"sectionRef":"#","url":"/eliza/docs/guides/basic-usage/","content":"","keywords":"","version":"Next"},{"title":"Overview​","type":1,"pageTitle":"Basic Usage","url":"/eliza/docs/guides/basic-usage/#overview","content":" This guide covers the fundamental concepts and basic usage of the agent framework. We'll explore how to initialize and configure agents, handle different types of interactions, and leverage core capabilities.  ","version":"Next","tagName":"h2"},{"title":"Getting Started​","type":1,"pageTitle":"Basic Usage","url":"/eliza/docs/guides/basic-usage/#getting-started","content":" ","version":"Next","tagName":"h2"},{"title":"Installation​","type":1,"pageTitle":"Basic Usage","url":"/eliza/docs/guides/basic-usage/#installation","content":" First, install the package using npm or pnpm:  npm install @your-org/agent-framework # or pnpm install @your-org/agent-framework   ","version":"Next","tagName":"h3"},{"title":"Basic Setup​","type":1,"pageTitle":"Basic Usage","url":"/eliza/docs/guides/basic-usage/#basic-setup","content":" Here's a minimal example to create and start an agent:  import { AgentRuntime, createAgentRuntime } from &quot;@your-org/agent-framework&quot;; import { SqliteDatabaseAdapter } from &quot;@your-org/agent-framework/adapters&quot;; // Initialize database const db = new SqliteDatabaseAdapter(new Database(&quot;./db.sqlite&quot;)); // Create runtime with basic configuration const runtime = await createAgentRuntime({ character: { name: &quot;Assistant&quot;, modelProvider: &quot;anthropic&quot;, // Add character details }, db, token: process.env.API_TOKEN, });   ","version":"Next","tagName":"h3"},{"title":"Core Concepts​","type":1,"pageTitle":"Basic Usage","url":"/eliza/docs/guides/basic-usage/#core-concepts","content":" ","version":"Next","tagName":"h2"},{"title":"Agents​","type":1,"pageTitle":"Basic Usage","url":"/eliza/docs/guides/basic-usage/#agents","content":" Agents are autonomous entities that can:  Process incoming messagesGenerate contextual responsesTake actions based on inputMaintain conversation stateHandle multiple communication channels  ","version":"Next","tagName":"h3"},{"title":"Clients​","type":1,"pageTitle":"Basic Usage","url":"/eliza/docs/guides/basic-usage/#clients","content":" The framework supports multiple client types:  DiscordTelegramTwitterDirect API  Each client handles platform-specific message formatting and interaction patterns.  ","version":"Next","tagName":"h3"},{"title":"Actions​","type":1,"pageTitle":"Basic Usage","url":"/eliza/docs/guides/basic-usage/#actions","content":" Actions are discrete tasks that agents can perform:  const action = { name: &quot;SUMMARIZE&quot;, description: &quot;Summarize content or conversations&quot;, handler: async (runtime, message, state) =&gt; { // Action implementation }, }; runtime.registerAction(action);   ","version":"Next","tagName":"h3"},{"title":"Providers​","type":1,"pageTitle":"Basic Usage","url":"/eliza/docs/guides/basic-usage/#providers","content":" Providers supply contextual information to agents:  Time awarenessUser relationshipsSystem stateExternal data sources  ","version":"Next","tagName":"h3"},{"title":"Common Use Cases​","type":1,"pageTitle":"Basic Usage","url":"/eliza/docs/guides/basic-usage/#common-use-cases","content":" ","version":"Next","tagName":"h2"},{"title":"Chat Interactions​","type":1,"pageTitle":"Basic Usage","url":"/eliza/docs/guides/basic-usage/#chat-interactions","content":" // Handle incoming chat message runtime.on(&quot;message&quot;, async (message) =&gt; { const response = await runtime.handleMessage(message); // Process response });   ","version":"Next","tagName":"h3"},{"title":"Voice Integration​","type":1,"pageTitle":"Basic Usage","url":"/eliza/docs/guides/basic-usage/#voice-integration","content":" For platforms supporting voice (e.g., Discord):  // Handle voice channel join runtime.on(&quot;voiceStateUpdate&quot;, async (oldState, newState) =&gt; { if (newState.channelId) { await runtime.joinVoiceChannel(newState.channelId); } });   ","version":"Next","tagName":"h3"},{"title":"Media Processing​","type":1,"pageTitle":"Basic Usage","url":"/eliza/docs/guides/basic-usage/#media-processing","content":" The framework can handle various media types:  Images (with description generation)Audio (with transcription)Documents (with text extraction)Videos (with summarization)  // Process attachment const media = await runtime.processAttachment({ type: &quot;image&quot;, url: &quot;https://example.com/image.jpg&quot;, });   ","version":"Next","tagName":"h3"},{"title":"Configuration Options​","type":1,"pageTitle":"Basic Usage","url":"/eliza/docs/guides/basic-usage/#configuration-options","content":" ","version":"Next","tagName":"h2"},{"title":"Character Configuration​","type":1,"pageTitle":"Basic Usage","url":"/eliza/docs/guides/basic-usage/#character-configuration","content":" Define agent personality and behavior:  const character = { name: &quot;Assistant&quot;, bio: &quot;A helpful AI assistant&quot;, style: { tone: &quot;professional&quot;, personality: &quot;friendly&quot;, language: &quot;en&quot;, }, topics: [&quot;technology&quot;, &quot;science&quot;, &quot;general&quot;], // Additional character settings };   ","version":"Next","tagName":"h3"},{"title":"Runtime Settings​","type":1,"pageTitle":"Basic Usage","url":"/eliza/docs/guides/basic-usage/#runtime-settings","content":" Configure runtime behavior:  const settings = { maxContextLength: 2000, responseTimeout: 30000, modelProvider: &quot;anthropic&quot;, temperature: 0.7, // Additional runtime settings };   ","version":"Next","tagName":"h3"},{"title":"Best Practices​","type":1,"pageTitle":"Basic Usage","url":"/eliza/docs/guides/basic-usage/#best-practices","content":" Error Handling Implement proper error catchingProvide graceful fallbacksLog errors for debugging Resource Management Monitor memory usageImplement rate limitingCache frequently accessed data Security Validate inputSanitize outputImplement proper authentication Performance Use appropriate model sizesImplement caching strategiesOptimize database queries  ","version":"Next","tagName":"h2"},{"title":"Example Implementation​","type":1,"pageTitle":"Basic Usage","url":"/eliza/docs/guides/basic-usage/#example-implementation","content":" Here's a complete example bringing together the core concepts:  import { AgentRuntime, createAgentRuntime } from &quot;@your-org/agent-framework&quot;; import { DiscordClient } from &quot;@your-org/agent-framework/clients/discord&quot;; async function main() { // Initialize runtime const runtime = await createAgentRuntime({ character: { name: &quot;Helper&quot;, bio: &quot;A helpful assistant&quot;, modelProvider: &quot;anthropic&quot;, style: { tone: &quot;friendly&quot;, personality: &quot;helpful&quot;, }, }, settings: { maxContextLength: 2000, temperature: 0.7, }, }); // Add custom action runtime.registerAction({ name: &quot;HELP&quot;, description: &quot;Provide help information&quot;, handler: async (runtime, message, state) =&gt; { return { text: &quot;Here's how I can help...&quot;, action: &quot;HELP_RESPONSE&quot;, }; }, }); // Initialize Discord client const discord = new DiscordClient(runtime); // Start listening discord.start(); } main().catch(console.error);   ","version":"Next","tagName":"h2"},{"title":"Troubleshooting​","type":1,"pageTitle":"Basic Usage","url":"/eliza/docs/guides/basic-usage/#troubleshooting","content":" Common issues and solutions:  Connection Issues Verify API tokensCheck network connectivityConfirm service status Response Timeouts Adjust timeout settingsCheck rate limitsVerify model availability Memory Issues Monitor heap usageImplement garbage collectionOptimize data structures  ","version":"Next","tagName":"h2"},{"title":"Next Steps​","type":1,"pageTitle":"Basic Usage","url":"/eliza/docs/guides/basic-usage/#next-steps","content":" After mastering basic usage, explore:  Advanced configuration optionsCustom action developmentIntegration with external servicesPerformance optimization techniques  For more detailed information, refer to the specific component documentation and API reference. ","version":"Next","tagName":"h2"},{"title":"Advanced Usage","type":0,"sectionRef":"#","url":"/eliza/docs/guides/advanced/","content":"","keywords":"","version":"Next"},{"title":"Video and Media Processing​","type":1,"pageTitle":"Advanced Usage","url":"/eliza/docs/guides/advanced/#video-and-media-processing","content":" ","version":"Next","tagName":"h2"},{"title":"Video Service​","type":1,"pageTitle":"Advanced Usage","url":"/eliza/docs/guides/advanced/#video-service","content":" Eliza provides robust video processing capabilities through the VideoService class. Key features include:  Downloading and processing videos from multiple sources (YouTube, Vimeo, direct MP4 links)Automatic transcription of video contentCaching mechanisms for efficient processingSupport for both manual and automatic captions  import { VideoService } from &quot;./services/video&quot;; // Initialize the service const videoService = VideoService.getInstance(runtime); // Process a video URL const media = await videoService.processVideo(videoUrl);   ","version":"Next","tagName":"h3"},{"title":"Image Processing​","type":1,"pageTitle":"Advanced Usage","url":"/eliza/docs/guides/advanced/#image-processing","content":" The ImageService provides advanced image analysis capabilities:  Local and cloud-based image recognitionSupport for GIF processing (first frame extraction)Integration with multiple AI models for image analysisCaching and batch processing capabilities  ","version":"Next","tagName":"h3"},{"title":"Memory Management and Embeddings​","type":1,"pageTitle":"Advanced Usage","url":"/eliza/docs/guides/advanced/#memory-management-and-embeddings","content":" ","version":"Next","tagName":"h2"},{"title":"Advanced Memory Operations​","type":1,"pageTitle":"Advanced Usage","url":"/eliza/docs/guides/advanced/#advanced-memory-operations","content":" The system supports sophisticated memory operations through various database adapters:  // Search memories with embedding similarity const similarMemories = await db.searchMemoriesByEmbedding(embedding, { match_threshold: 0.95, count: 5, roomId: currentRoom, tableName: &quot;long_term_memory&quot;, }); // Create unique memories with deduplication await db.createMemory(memory, &quot;episodic_memory&quot;, true);   ","version":"Next","tagName":"h3"},{"title":"Custom Database Adapters​","type":1,"pageTitle":"Advanced Usage","url":"/eliza/docs/guides/advanced/#custom-database-adapters","content":" You can implement custom database adapters by extending the DatabaseAdapter class:  class CustomDatabaseAdapter extends DatabaseAdapter { async searchMemories(params: { tableName: string; roomId: UUID; embedding: number[]; match_threshold: number; match_count: number; unique: boolean; }): Promise&lt;Memory[]&gt; { // Custom implementation } }   ","version":"Next","tagName":"h3"},{"title":"Speech and Transcription​","type":1,"pageTitle":"Advanced Usage","url":"/eliza/docs/guides/advanced/#speech-and-transcription","content":" ","version":"Next","tagName":"h2"},{"title":"Speech Service​","type":1,"pageTitle":"Advanced Usage","url":"/eliza/docs/guides/advanced/#speech-service","content":" The system includes a comprehensive speech service with support for:  Text-to-speech conversion with multiple providersVoice customization optionsStreaming audio supportPCM and WAV format handling  const speechService = new SpeechService(); const audioStream = await speechService.generate(runtime, text);   ","version":"Next","tagName":"h3"},{"title":"Advanced Transcription​","type":1,"pageTitle":"Advanced Usage","url":"/eliza/docs/guides/advanced/#advanced-transcription","content":" The TranscriptionService provides:  Local and cloud-based transcription optionsCUDA acceleration supportAudio format conversion and normalizationDebug logging and error handling  ","version":"Next","tagName":"h3"},{"title":"Trust Score System​","type":1,"pageTitle":"Advanced Usage","url":"/eliza/docs/guides/advanced/#trust-score-system","content":" The system includes a sophisticated trust score management system:  interface RecommenderMetrics { trustScore: number; totalRecommendations: number; successfulRecs: number; avgTokenPerformance: number; riskScore: number; consistencyScore: number; virtualConfidence: number; }   Key features include:  Historical metrics trackingPerformance analysisRisk assessmentConsistency evaluation  ","version":"Next","tagName":"h2"},{"title":"Browser Automation​","type":1,"pageTitle":"Advanced Usage","url":"/eliza/docs/guides/advanced/#browser-automation","content":" The BrowserService provides advanced web interaction capabilities:  CAPTCHA handlingAd blockingContent extractionProxy supportCache management  const browserService = BrowserService.getInstance(runtime); const content = await browserService.getPageContent(url);   ","version":"Next","tagName":"h2"},{"title":"Best Practices​","type":1,"pageTitle":"Advanced Usage","url":"/eliza/docs/guides/advanced/#best-practices","content":" ","version":"Next","tagName":"h2"},{"title":"Memory Management​","type":1,"pageTitle":"Advanced Usage","url":"/eliza/docs/guides/advanced/#memory-management","content":" Implement proper memory cleanup and garbage collectionUse the caching system effectivelyMonitor memory usage in long-running processes  ","version":"Next","tagName":"h3"},{"title":"Error Handling​","type":1,"pageTitle":"Advanced Usage","url":"/eliza/docs/guides/advanced/#error-handling","content":" Implement comprehensive error handlingUse the logging system effectivelyMonitor system performance  ","version":"Next","tagName":"h3"},{"title":"Performance Optimization​","type":1,"pageTitle":"Advanced Usage","url":"/eliza/docs/guides/advanced/#performance-optimization","content":" Use batch processing when possibleImplement proper caching strategiesMonitor and optimize database queries  ","version":"Next","tagName":"h3"},{"title":"Configuration Options​","type":1,"pageTitle":"Advanced Usage","url":"/eliza/docs/guides/advanced/#configuration-options","content":" ","version":"Next","tagName":"h2"},{"title":"Environment Variables​","type":1,"pageTitle":"Advanced Usage","url":"/eliza/docs/guides/advanced/#environment-variables","content":" Key configuration options include:  CUDA_PATH=/usr/local/cuda # For GPU acceleration OPENAI_API_KEY=sk-... # For OpenAI integration ELEVENLABS_API_KEY=... # For voice synthesis   ","version":"Next","tagName":"h3"},{"title":"Runtime Configuration​","type":1,"pageTitle":"Advanced Usage","url":"/eliza/docs/guides/advanced/#runtime-configuration","content":" The runtime can be configured with various options:  const runtime = { character: { settings: { model: &quot;gpt-4&quot;, temperature: 0.7, maxTokens: 2048, }, }, // Additional configuration options };   ","version":"Next","tagName":"h3"},{"title":"Advanced Features​","type":1,"pageTitle":"Advanced Usage","url":"/eliza/docs/guides/advanced/#advanced-features","content":" ","version":"Next","tagName":"h2"},{"title":"Custom Actions​","type":1,"pageTitle":"Advanced Usage","url":"/eliza/docs/guides/advanced/#custom-actions","content":" Implement custom actions for specialized behavior:  class CustomAction extends BaseAction { async execute(context: ActionContext): Promise&lt;ActionResult&gt; { // Custom implementation return { success: true, data: {}, }; } }   ","version":"Next","tagName":"h3"},{"title":"Custom Evaluators​","type":1,"pageTitle":"Advanced Usage","url":"/eliza/docs/guides/advanced/#custom-evaluators","content":" Create specialized evaluators for specific use cases:  class CustomEvaluator extends BaseEvaluator { async evaluate(context: EvaluatorContext): Promise&lt;EvaluationResult&gt; { // Custom evaluation logic return { score: 0.95, confidence: 0.8, }; } }   ","version":"Next","tagName":"h3"},{"title":"Security Considerations​","type":1,"pageTitle":"Advanced Usage","url":"/eliza/docs/guides/advanced/#security-considerations","content":" Implement proper input validationUse secure token managementMonitor system accessImplement rate limitingUse proper encryption for sensitive data  ","version":"Next","tagName":"h2"},{"title":"Troubleshooting​","type":1,"pageTitle":"Advanced Usage","url":"/eliza/docs/guides/advanced/#troubleshooting","content":" Common issues and solutions:  Memory leaks Monitor memory usageImplement proper cleanupUse garbage collection Performance issues Optimize database queriesImplement proper cachingUse batch processing Integration issues Check API keys and permissionsVerify network connectivityMonitor API rate limits ","version":"Next","tagName":"h2"},{"title":"Local Development","type":0,"sectionRef":"#","url":"/eliza/docs/guides/local-development/","content":"","keywords":"","version":"Next"},{"title":"Prerequisites​","type":1,"pageTitle":"Local Development","url":"/eliza/docs/guides/local-development/#prerequisites","content":" Before starting local development, ensure you have:  Node.js 22 or higher installedpnpm package manager installedGit for version controlCode editor (VS Code recommended)CUDA Toolkit (optional, for GPU acceleration)  ","version":"Next","tagName":"h2"},{"title":"Initial Setup​","type":1,"pageTitle":"Local Development","url":"/eliza/docs/guides/local-development/#initial-setup","content":" ","version":"Next","tagName":"h2"},{"title":"1. Clone and Install​","type":1,"pageTitle":"Local Development","url":"/eliza/docs/guides/local-development/#1-clone-and-install","content":" # Clone the repository git clone https://github.com/ai16z/eliza.git cd eliza # Install dependencies pnpm install # Install optional Sharp package if needed pnpm install --include=optional sharp   ","version":"Next","tagName":"h3"},{"title":"2. Environment Configuration​","type":1,"pageTitle":"Local Development","url":"/eliza/docs/guides/local-development/#2-environment-configuration","content":" Copy the example environment file:  cp .env.example .env   Configure essential variables for local development:  # Minimum required for local testing OPENAI_API_KEY=sk-* # Optional, for OpenAI features X_SERVER_URL= # Leave blank for local inference XAI_API_KEY= # Leave blank for local inference XAI_MODEL=meta-llama/Llama-3.1-7b-instruct # Choose your model   ","version":"Next","tagName":"h3"},{"title":"3. Local Model Setup​","type":1,"pageTitle":"Local Development","url":"/eliza/docs/guides/local-development/#3-local-model-setup","content":" For local inference without API dependencies:  # Install CUDA support if you have an NVIDIA GPU npx --no node-llama-cpp source download --gpu cuda # The system will automatically download the selected model # from Hugging Face on first run   ","version":"Next","tagName":"h3"},{"title":"Development Workflow​","type":1,"pageTitle":"Local Development","url":"/eliza/docs/guides/local-development/#development-workflow","content":" ","version":"Next","tagName":"h2"},{"title":"1. Running the Development Server​","type":1,"pageTitle":"Local Development","url":"/eliza/docs/guides/local-development/#1-running-the-development-server","content":" # Start with default character pnpm run dev # Start with specific character(s) pnpm run dev --characters=&quot;characters/your-character.json&quot; # Start with multiple characters pnpm run dev --characters=&quot;characters/char1.json,characters/char2.json&quot;   ","version":"Next","tagName":"h3"},{"title":"2. Testing in Shell Mode​","type":1,"pageTitle":"Local Development","url":"/eliza/docs/guides/local-development/#2-testing-in-shell-mode","content":" Open a new terminal to interact with your agent:  pnpm run shell   ","version":"Next","tagName":"h3"},{"title":"3. Custom Actions Development​","type":1,"pageTitle":"Local Development","url":"/eliza/docs/guides/local-development/#3-custom-actions-development","content":" Create custom actions without modifying core files:  # Create custom actions directory mkdir custom_actions # Create your action file touch custom_actions/myAction.ts   Register your action in elizaConfig.yaml:  actions: - name: myAction path: ./custom_actions/myAction.ts   ","version":"Next","tagName":"h3"},{"title":"Database Options​","type":1,"pageTitle":"Local Development","url":"/eliza/docs/guides/local-development/#database-options","content":" ","version":"Next","tagName":"h2"},{"title":"SQLite (Recommended for Development)​","type":1,"pageTitle":"Local Development","url":"/eliza/docs/guides/local-development/#sqlite-recommended-for-development","content":" import { SqliteDatabaseAdapter } from &quot;@your-org/agent-framework/adapters&quot;; import Database from &quot;better-sqlite3&quot;; const db = new SqliteDatabaseAdapter(new Database(&quot;./dev.db&quot;));   ","version":"Next","tagName":"h3"},{"title":"In-Memory Database (for Testing)​","type":1,"pageTitle":"Local Development","url":"/eliza/docs/guides/local-development/#in-memory-database-for-testing","content":" import { SqlJsDatabaseAdapter } from &quot;@your-org/agent-framework/adapters&quot;; const db = new SqlJsDatabaseAdapter(new Database(&quot;:memory:&quot;));   ","version":"Next","tagName":"h3"},{"title":"GPU Acceleration​","type":1,"pageTitle":"Local Development","url":"/eliza/docs/guides/local-development/#gpu-acceleration","content":" For NVIDIA GPU users:  Install CUDA Toolkit with cuDNN and cuBLASSet environment variables:  CUDA_PATH=/usr/local/cuda # Windows: typically C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.0   ","version":"Next","tagName":"h2"},{"title":"Debugging Tips​","type":1,"pageTitle":"Local Development","url":"/eliza/docs/guides/local-development/#debugging-tips","content":" ","version":"Next","tagName":"h2"},{"title":"1. Enable Debug Logging​","type":1,"pageTitle":"Local Development","url":"/eliza/docs/guides/local-development/#1-enable-debug-logging","content":" # Add to your .env file DEBUG=eliza:*   ","version":"Next","tagName":"h3"},{"title":"2. VS Code Launch Configuration​","type":1,"pageTitle":"Local Development","url":"/eliza/docs/guides/local-development/#2-vs-code-launch-configuration","content":" Create .vscode/launch.json:  { &quot;version&quot;: &quot;0.2.0&quot;, &quot;configurations&quot;: [ { &quot;type&quot;: &quot;node&quot;, &quot;request&quot;: &quot;launch&quot;, &quot;name&quot;: &quot;Debug Eliza&quot;, &quot;skipFiles&quot;: [&quot;&lt;node_internals&gt;/**&quot;], &quot;program&quot;: &quot;${workspaceFolder}/src/index.ts&quot;, &quot;runtimeArgs&quot;: [&quot;-r&quot;, &quot;ts-node/register&quot;], &quot;env&quot;: { &quot;DEBUG&quot;: &quot;eliza:*&quot; } } ] }   ","version":"Next","tagName":"h3"},{"title":"3. Common Issues​","type":1,"pageTitle":"Local Development","url":"/eliza/docs/guides/local-development/#3-common-issues","content":" Memory Issues:  # Increase Node.js memory limit if needed NODE_OPTIONS=&quot;--max-old-space-size=8192&quot; pnpm run dev   Model Download Issues:  # Clear model cache rm -rf ./models/* # Restart with fresh download   ","version":"Next","tagName":"h3"},{"title":"Testing​","type":1,"pageTitle":"Local Development","url":"/eliza/docs/guides/local-development/#testing","content":" ","version":"Next","tagName":"h2"},{"title":"Unit Tests​","type":1,"pageTitle":"Local Development","url":"/eliza/docs/guides/local-development/#unit-tests","content":" # Run all tests pnpm test # Run specific test file pnpm test tests/your-test.test.ts # Run with coverage pnpm test:coverage   ","version":"Next","tagName":"h3"},{"title":"Integration Testing​","type":1,"pageTitle":"Local Development","url":"/eliza/docs/guides/local-development/#integration-testing","content":" # Start test environment pnpm run dev:test # Run integration tests pnpm test:integration   ","version":"Next","tagName":"h3"},{"title":"Development Best Practices​","type":1,"pageTitle":"Local Development","url":"/eliza/docs/guides/local-development/#development-best-practices","content":" Version Control Create feature branchesFollow conventional commitsKeep PRs focused and manageable Code Organization Place custom actions in custom_actions/Keep character files in characters/Store test data in tests/fixtures/ Performance Use SQLite for developmentEnable GPU acceleration when possibleMonitor memory usage Testing Write unit tests for new featuresTest with multiple model providersVerify character behavior in shell  ","version":"Next","tagName":"h2"},{"title":"Additional Tools​","type":1,"pageTitle":"Local Development","url":"/eliza/docs/guides/local-development/#additional-tools","content":" ","version":"Next","tagName":"h2"},{"title":"Character Development​","type":1,"pageTitle":"Local Development","url":"/eliza/docs/guides/local-development/#character-development","content":" # Generate character from Twitter data npx tweets2character # Convert documents to knowledge base npx folder2knowledge &lt;path/to/folder&gt; # Add knowledge to character npx knowledge2character &lt;character-file&gt; &lt;knowledge-file&gt;   Remember to regularly update dependencies and test your changes across different environments and configurations. ","version":"Next","tagName":"h3"},{"title":"Secrets Management","type":0,"sectionRef":"#","url":"/eliza/docs/guides/secrets-management/","content":"","keywords":"","version":"Next"},{"title":"Overview​","type":1,"pageTitle":"Secrets Management","url":"/eliza/docs/guides/secrets-management/#overview","content":" Eliza provides multiple options for managing secrets and credentials, including environment variables and character-specific secrets. This guide covers best practices for managing API keys, tokens, and other sensitive configuration values across different deployment scenarios.  ","version":"Next","tagName":"h2"},{"title":"Environment Variables​","type":1,"pageTitle":"Secrets Management","url":"/eliza/docs/guides/secrets-management/#environment-variables","content":" ","version":"Next","tagName":"h2"},{"title":"Basic Setup​","type":1,"pageTitle":"Secrets Management","url":"/eliza/docs/guides/secrets-management/#basic-setup","content":" Create a .env file in your project root:  # Core API Keys OPENAI_API_KEY=sk-your-key ANTHROPIC_API_KEY=your-key ELEVENLABS_XI_API_KEY=your-key # Discord Configuration DISCORD_APPLICATION_ID=your-app-id DISCORD_API_TOKEN=your-bot-token # Twitter Configuration TWITTER_USERNAME=your-username TWITTER_PASSWORD=your-password TWITTER_EMAIL=your-email TWITTER_COOKIES=your-cookies # Database Configuration (Optional) SUPABASE_URL=your-supabase-url SUPABASE_SERVICE_API_KEY=your-service-key # Voice Settings (Optional) ELEVENLABS_MODEL_ID=eleven_multilingual_v2 ELEVENLABS_VOICE_ID=21m00Tcm4TlvDq8ikWAM ELEVENLABS_VOICE_STABILITY=0.5 ELEVENLABS_VOICE_SIMILARITY_BOOST=0.9 ELEVENLABS_VOICE_STYLE=0.66 ELEVENLABS_VOICE_USE_SPEAKER_BOOST=false ELEVENLABS_OPTIMIZE_STREAMING_LATENCY=4 ELEVENLABS_OUTPUT_FORMAT=pcm_16000   ","version":"Next","tagName":"h3"},{"title":"Character-Specific Secrets​","type":1,"pageTitle":"Secrets Management","url":"/eliza/docs/guides/secrets-management/#character-specific-secrets","content":" ","version":"Next","tagName":"h2"},{"title":"Configuration in Character Files​","type":1,"pageTitle":"Secrets Management","url":"/eliza/docs/guides/secrets-management/#configuration-in-character-files","content":" Character files can include their own secrets, which override environment variables:  { &quot;name&quot;: &quot;AgentName&quot;, &quot;clients&quot;: [&quot;discord&quot;, &quot;twitter&quot;], &quot;modelProvider&quot;: &quot;openai&quot;, &quot;settings&quot;: { &quot;secrets&quot;: { &quot;OPENAI_API_KEY&quot;: &quot;character-specific-key&quot;, &quot;DISCORD_TOKEN&quot;: &quot;bot-specific-token&quot;, &quot;TWITTER_USERNAME&quot;: &quot;bot-twitter-handle&quot;, &quot;TWITTER_PASSWORD&quot;: &quot;bot-twitter-password&quot; } } }   ","version":"Next","tagName":"h3"},{"title":"Precedence Order​","type":1,"pageTitle":"Secrets Management","url":"/eliza/docs/guides/secrets-management/#precedence-order","content":" Secrets are resolved in the following order:  Character-specific secrets (highest priority)Environment variablesDefault values (lowest priority)  ","version":"Next","tagName":"h3"},{"title":"Best Practices​","type":1,"pageTitle":"Secrets Management","url":"/eliza/docs/guides/secrets-management/#best-practices","content":" ","version":"Next","tagName":"h2"},{"title":"1. Secret Storage​","type":1,"pageTitle":"Secrets Management","url":"/eliza/docs/guides/secrets-management/#1-secret-storage","content":" Never commit secret files to version controlUse .gitignore to exclude sensitive files:  # .gitignore .env .env.* characters/**/secrets.json **/serviceAccount.json   ","version":"Next","tagName":"h3"},{"title":"2. Development Workflow​","type":1,"pageTitle":"Secrets Management","url":"/eliza/docs/guides/secrets-management/#2-development-workflow","content":" Create different environment files for different environments:  .env.development # Local development settings .env.staging # Staging environment .env.production # Production settings   ","version":"Next","tagName":"h3"},{"title":"3. Secret Rotation​","type":1,"pageTitle":"Secrets Management","url":"/eliza/docs/guides/secrets-management/#3-secret-rotation","content":" Implement a rotation strategy:  class SecretManager { private static readonly SECRET_LIFETIME = 90 * 24 * 60 * 60 * 1000; // 90 days async shouldRotateSecret(secretName: string): Promise&lt;boolean&gt; { const lastRotation = await this.getLastRotation(secretName); return Date.now() - lastRotation &gt; SecretManager.SECRET_LIFETIME; } }   ","version":"Next","tagName":"h3"},{"title":"4. Secure Character Files​","type":1,"pageTitle":"Secrets Management","url":"/eliza/docs/guides/secrets-management/#4-secure-character-files","content":" When using character-specific secrets:  // Validate character file location const isSecurePath = (path: string): boolean =&gt; { return !path.includes(&quot;../&quot;) &amp;&amp; !path.startsWith(&quot;/&quot;); }; // Load character securely const loadCharacter = async (path: string) =&gt; { if (!isSecurePath(path)) { throw new Error(&quot;Invalid character file path&quot;); } // Load and validate character };   ","version":"Next","tagName":"h3"},{"title":"Security Considerations​","type":1,"pageTitle":"Secrets Management","url":"/eliza/docs/guides/secrets-management/#security-considerations","content":" ","version":"Next","tagName":"h2"},{"title":"1. Access Control​","type":1,"pageTitle":"Secrets Management","url":"/eliza/docs/guides/secrets-management/#1-access-control","content":" Implement proper access controls for secret management:  class SecretAccess { private static readonly ALLOWED_KEYS = [ &quot;OPENAI_API_KEY&quot;, &quot;DISCORD_TOKEN&quot;, // ... other allowed keys ]; static validateAccess(key: string): boolean { return this.ALLOWED_KEYS.includes(key); } }   ","version":"Next","tagName":"h3"},{"title":"2. Encryption at Rest​","type":1,"pageTitle":"Secrets Management","url":"/eliza/docs/guides/secrets-management/#2-encryption-at-rest","content":" For stored secrets:  import { createCipheriv, createDecipheriv } from &quot;crypto&quot;; class SecretEncryption { static async encrypt(value: string, key: Buffer): Promise&lt;string&gt; { const iv = crypto.randomBytes(16); const cipher = createCipheriv(&quot;aes-256-gcm&quot;, key, iv); // ... implementation } static async decrypt(encrypted: string, key: Buffer): Promise&lt;string&gt; { // ... implementation } }   ","version":"Next","tagName":"h3"},{"title":"3. Secret Validation​","type":1,"pageTitle":"Secrets Management","url":"/eliza/docs/guides/secrets-management/#3-secret-validation","content":" Validate secrets before use:  async function validateSecrets(character: Character): Promise&lt;void&gt; { const required = [&quot;OPENAI_API_KEY&quot;]; const missing = required.filter((key) =&gt; !character.settings.secrets[key]); if (missing.length &gt; 0) { throw new Error(`Missing required secrets: ${missing.join(&quot;, &quot;)}`); } }   ","version":"Next","tagName":"h3"},{"title":"Troubleshooting​","type":1,"pageTitle":"Secrets Management","url":"/eliza/docs/guides/secrets-management/#troubleshooting","content":" ","version":"Next","tagName":"h2"},{"title":"Common Issues​","type":1,"pageTitle":"Secrets Management","url":"/eliza/docs/guides/secrets-management/#common-issues","content":" Missing Secrets  if (!process.env.OPENAI_API_KEY &amp;&amp; !character.settings.secrets.OPENAI_API_KEY) { throw new Error( &quot;OpenAI API key not found in environment or character settings&quot;, ); }   Invalid Secret Format  function validateApiKey(key: string): boolean { // OpenAI keys start with 'sk-' if (key.startsWith(&quot;sk-&quot;)) { return key.length &gt; 20; } return false; }   Secret Loading Errors  try { await loadSecrets(); } catch (error) { if (error.code === &quot;ENOENT&quot;) { console.error(&quot;Environment file not found&quot;); } else if (error instanceof ValidationError) { console.error(&quot;Invalid secret format&quot;); } }   ","version":"Next","tagName":"h3"},{"title":"Related Resources​","type":1,"pageTitle":"Secrets Management","url":"/eliza/docs/guides/secrets-management/#related-resources","content":" Configuration Guide for general configuration optionsCharacter Files for character-specific settingsLocal Development for development environment setup  Remember to follow security best practices and never expose sensitive credentials in logs, error messages, or version control systems. ","version":"Next","tagName":"h2"},{"title":"Autonomous Trading System","type":0,"sectionRef":"#","url":"/eliza/docs/advanced/autonomous-trading/","content":"","keywords":"","version":"Next"},{"title":"Overview​","type":1,"pageTitle":"Autonomous Trading System","url":"/eliza/docs/advanced/autonomous-trading/#overview","content":" Eliza's autonomous trading system provides a sophisticated framework for monitoring market conditions, analyzing tokens, and executing trades on Solana-based decentralized exchanges. The system combines real-time market data, technical analysis, and risk management to make informed trading decisions.  ","version":"Next","tagName":"h2"},{"title":"Core Components​","type":1,"pageTitle":"Autonomous Trading System","url":"/eliza/docs/advanced/autonomous-trading/#core-components","content":" ","version":"Next","tagName":"h2"},{"title":"1. Token Analysis Engine​","type":1,"pageTitle":"Autonomous Trading System","url":"/eliza/docs/advanced/autonomous-trading/#1-token-analysis-engine","content":" The system tracks multiple market indicators:  interface TokenPerformance { priceChange24h: number; volumeChange24h: number; trade_24h_change: number; liquidity: number; liquidityChange24h: number; holderChange24h: number; rugPull: boolean; isScam: boolean; marketCapChange24h: number; sustainedGrowth: boolean; rapidDump: boolean; suspiciousVolume: boolean; }   ","version":"Next","tagName":"h3"},{"title":"2. Order Book Management​","type":1,"pageTitle":"Autonomous Trading System","url":"/eliza/docs/advanced/autonomous-trading/#2-order-book-management","content":" interface Order { userId: string; ticker: string; contractAddress: string; timestamp: string; buyAmount: number; price: number; }   ","version":"Next","tagName":"h3"},{"title":"3. Market Data Integration​","type":1,"pageTitle":"Autonomous Trading System","url":"/eliza/docs/advanced/autonomous-trading/#3-market-data-integration","content":" The system integrates with multiple data sources:  BirdEye API for real-time market dataDexScreener for liquidity analysisHelius for on-chain data  ","version":"Next","tagName":"h3"},{"title":"Trading Features​","type":1,"pageTitle":"Autonomous Trading System","url":"/eliza/docs/advanced/autonomous-trading/#trading-features","content":" ","version":"Next","tagName":"h2"},{"title":"1. Real-Time Market Analysis​","type":1,"pageTitle":"Autonomous Trading System","url":"/eliza/docs/advanced/autonomous-trading/#1-real-time-market-analysis","content":" const PROVIDER_CONFIG = { BIRDEYE_API: &quot;https://public-api.birdeye.so&quot;, MAX_RETRIES: 3, RETRY_DELAY: 2000, TOKEN_SECURITY_ENDPOINT: &quot;/defi/token_security?address=&quot;, TOKEN_TRADE_DATA_ENDPOINT: &quot;/defi/v3/token/trade-data/single?address=&quot;, };   Key metrics monitored:  Price movementsVolume changesLiquidity levelsHolder distributionTrading patterns  ","version":"Next","tagName":"h3"},{"title":"2. Risk Assessment System​","type":1,"pageTitle":"Autonomous Trading System","url":"/eliza/docs/advanced/autonomous-trading/#2-risk-assessment-system","content":" The system evaluates multiple risk factors:  async analyzeRisks(token: string) { const risks = { liquidityRisk: await checkLiquidity(), holderConcentration: await analyzeHolderDistribution(), priceVolatility: await calculateVolatility(), marketManipulation: await detectManipulation() }; return risks; }   ","version":"Next","tagName":"h3"},{"title":"3. Trading Strategies​","type":1,"pageTitle":"Autonomous Trading System","url":"/eliza/docs/advanced/autonomous-trading/#3-trading-strategies","content":" Market Analysis​  async getProcessedTokenData(): Promise&lt;ProcessedTokenData&gt; { const security = await this.fetchTokenSecurity(); const tradeData = await this.fetchTokenTradeData(); const dexData = await this.fetchDexScreenerData(); const holderDistributionTrend = await this.analyzeHolderDistribution(tradeData); // ... additional analysis }   Trade Execution​  interface TradePerformance { token_address: string; buy_price: number; sell_price: number; buy_timeStamp: string; sell_timeStamp: string; profit_percent: number; market_cap_change: number; liquidity_change: number; }   ","version":"Next","tagName":"h3"},{"title":"Configuration Options​","type":1,"pageTitle":"Autonomous Trading System","url":"/eliza/docs/advanced/autonomous-trading/#configuration-options","content":" ","version":"Next","tagName":"h2"},{"title":"1. Trading Parameters​","type":1,"pageTitle":"Autonomous Trading System","url":"/eliza/docs/advanced/autonomous-trading/#1-trading-parameters","content":" const tradingConfig = { minLiquidity: 50000, // Minimum liquidity in USD maxSlippage: 0.02, // Maximum allowed slippage positionSize: 0.01, // Position size as percentage of portfolio stopLoss: 0.05, // Stop loss percentage takeProfit: 0.15, // Take profit percentage };   ","version":"Next","tagName":"h3"},{"title":"2. Risk Management Settings​","type":1,"pageTitle":"Autonomous Trading System","url":"/eliza/docs/advanced/autonomous-trading/#2-risk-management-settings","content":" const riskSettings = { maxDrawdown: 0.2, // Maximum portfolio drawdown maxPositionSize: 0.1, // Maximum single position size minLiquidityRatio: 50, // Minimum liquidity to market cap ratio maxHolderConcentration: 0.2, // Maximum single holder concentration };   ","version":"Next","tagName":"h3"},{"title":"Implementation Guide​","type":1,"pageTitle":"Autonomous Trading System","url":"/eliza/docs/advanced/autonomous-trading/#implementation-guide","content":" ","version":"Next","tagName":"h2"},{"title":"1. Setting Up Market Monitoring​","type":1,"pageTitle":"Autonomous Trading System","url":"/eliza/docs/advanced/autonomous-trading/#1-setting-up-market-monitoring","content":" async monitorMarket(token: string) { const provider = new TokenProvider(token); const marketData = await provider.getProcessedTokenData(); return { price: marketData.tradeData.price, volume: marketData.tradeData.volume_24h, liquidity: marketData.tradeData.liquidity, holderMetrics: marketData.security }; }   ","version":"Next","tagName":"h3"},{"title":"2. Implementing Trading Logic​","type":1,"pageTitle":"Autonomous Trading System","url":"/eliza/docs/advanced/autonomous-trading/#2-implementing-trading-logic","content":" async evaluateTradeOpportunity(token: string) { const analysis = await this.getProcessedTokenData(); const signals = { priceSignal: analysis.tradeData.price_change_24h &gt; 0, volumeSignal: analysis.tradeData.volume_24h_change_percent &gt; 20, liquiditySignal: analysis.tradeData.liquidity &gt; MIN_LIQUIDITY, holderSignal: analysis.holderDistributionTrend === &quot;increasing&quot; }; return signals.priceSignal &amp;&amp; signals.volumeSignal &amp;&amp; signals.liquiditySignal &amp;&amp; signals.holderSignal; }   ","version":"Next","tagName":"h3"},{"title":"3. Risk Management Implementation​","type":1,"pageTitle":"Autonomous Trading System","url":"/eliza/docs/advanced/autonomous-trading/#3-risk-management-implementation","content":" async checkTradeRisks(token: string): Promise&lt;boolean&gt; { const security = await this.fetchTokenSecurity(); const tradeData = await this.fetchTokenTradeData(); return { isRugPull: security.ownerPercentage &gt; 50, isPumpAndDump: tradeData.price_change_24h &gt; 100, isLowLiquidity: tradeData.liquidity &lt; MIN_LIQUIDITY, isSuspiciousVolume: tradeData.suspiciousVolume }; }   ","version":"Next","tagName":"h3"},{"title":"Performance Monitoring​","type":1,"pageTitle":"Autonomous Trading System","url":"/eliza/docs/advanced/autonomous-trading/#performance-monitoring","content":" ","version":"Next","tagName":"h2"},{"title":"1. Trade Tracking​","type":1,"pageTitle":"Autonomous Trading System","url":"/eliza/docs/advanced/autonomous-trading/#1-trade-tracking","content":" async trackTradePerformance(trade: TradePerformance): Promise&lt;void&gt; { const performance = { entryPrice: trade.buy_price, exitPrice: trade.sell_price, profitLoss: trade.profit_percent, holdingPeriod: calculateHoldingPeriod( trade.buy_timeStamp, trade.sell_timeStamp ), marketImpact: trade.market_cap_change }; await this.logTradePerformance(performance); }   ","version":"Next","tagName":"h3"},{"title":"2. Portfolio Analytics​","type":1,"pageTitle":"Autonomous Trading System","url":"/eliza/docs/advanced/autonomous-trading/#2-portfolio-analytics","content":" async analyzePortfolioPerformance(userId: string) { const trades = await this.getTradeHistory(userId); return { totalTrades: trades.length, winRate: calculateWinRate(trades), averageReturn: calculateAverageReturn(trades), maxDrawdown: calculateMaxDrawdown(trades), sharpeRatio: calculateSharpeRatio(trades) }; }   ","version":"Next","tagName":"h3"},{"title":"Best Practices​","type":1,"pageTitle":"Autonomous Trading System","url":"/eliza/docs/advanced/autonomous-trading/#best-practices","content":" Risk Management Always implement stop-loss ordersDiversify trading positionsMonitor liquidity levels continuouslySet maximum position sizes Trade Execution Use slippage protectionImplement rate limitingMonitor gas costsVerify transaction success Market Analysis Cross-reference multiple data sourcesImplement data validationMonitor market manipulation indicatorsTrack historical patterns System Maintenance Regular performance reviewsStrategy backtestingRisk parameter adjustmentsSystem health monitoring  ","version":"Next","tagName":"h2"},{"title":"Security Considerations​","type":1,"pageTitle":"Autonomous Trading System","url":"/eliza/docs/advanced/autonomous-trading/#security-considerations","content":" Transaction Security Implement transaction signingVerify contract addressesMonitor for malicious tokensImplement rate limiting Data Validation Verify data sourcesImplement error handlingMonitor for anomaliesCross-validate market data  ","version":"Next","tagName":"h2"},{"title":"Additional Resources​","type":1,"pageTitle":"Autonomous Trading System","url":"/eliza/docs/advanced/autonomous-trading/#additional-resources","content":" Trust Engine DocumentationInfrastructure Setup  Remember to thoroughly test all trading strategies in a sandbox environment before deploying to production. ","version":"Next","tagName":"h2"},{"title":"Infrastructure","type":0,"sectionRef":"#","url":"/eliza/docs/advanced/infrastructure/","content":"","keywords":"","version":"Next"},{"title":"Overview​","type":1,"pageTitle":"Infrastructure","url":"/eliza/docs/advanced/infrastructure/#overview","content":" Eliza uses a flexible, multi-database architecture that supports different storage backends through a unified adapter interface. The system supports PostgreSQL (with Supabase), SQLite, and SQL.js, allowing for both cloud and local deployments.  ","version":"Next","tagName":"h2"},{"title":"Database Architecture​","type":1,"pageTitle":"Infrastructure","url":"/eliza/docs/advanced/infrastructure/#database-architecture","content":" ","version":"Next","tagName":"h2"},{"title":"Adapter Pattern​","type":1,"pageTitle":"Infrastructure","url":"/eliza/docs/advanced/infrastructure/#adapter-pattern","content":" Eliza implements a database adapter pattern that provides a consistent interface across different database backends:  // Core adapter interface implemented by all database providers class DatabaseAdapter { async getRoom(roomId: UUID): Promise&lt;UUID | null&gt;; async getParticipantsForAccount(userId: UUID): Promise&lt;Participant[]&gt;; async getMemories(params: {...}): Promise&lt;Memory[]&gt;; // ... other interface methods }   ","version":"Next","tagName":"h3"},{"title":"Supported Databases​","type":1,"pageTitle":"Infrastructure","url":"/eliza/docs/advanced/infrastructure/#supported-databases","content":" PostgreSQL/Supabase (PostgresDatabaseAdapter) Full-featured cloud database with vector search capabilitiesSupports real-time subscriptionsBuilt-in user authenticationRow-level security policies SQLite (SqliteDatabaseAdapter) Local filesystem storageVector similarity search via SQLite extensionsSuitable for edge deploymentsEmbedded database operations SQL.js (SqlJsDatabaseAdapter) In-memory database operationsBrowser-compatibleNo filesystem dependenciesIdeal for testing and development  ","version":"Next","tagName":"h3"},{"title":"Core Components​","type":1,"pageTitle":"Infrastructure","url":"/eliza/docs/advanced/infrastructure/#core-components","content":" ","version":"Next","tagName":"h2"},{"title":"1. Memory Storage System​","type":1,"pageTitle":"Infrastructure","url":"/eliza/docs/advanced/infrastructure/#1-memory-storage-system","content":" The memory system uses a sophisticated schema that supports:  CREATE TABLE memories ( &quot;id&quot; UUID PRIMARY KEY, &quot;type&quot; TEXT NOT NULL, &quot;createdAt&quot; TIMESTAMP DEFAULT CURRENT_TIMESTAMP, &quot;content&quot; JSONB NOT NULL, &quot;embedding&quot; vector(1536), -- Vector storage for embeddings &quot;userId&quot; UUID, &quot;roomId&quot; UUID, &quot;unique&quot; BOOLEAN DEFAULT true );   Key features:  Vector embeddings for semantic searchContent deduplication via the unique flagJSON storage for flexible content typesRelationship tracking through foreign keys  ","version":"Next","tagName":"h3"},{"title":"2. User Management​","type":1,"pageTitle":"Infrastructure","url":"/eliza/docs/advanced/infrastructure/#2-user-management","content":" CREATE TABLE accounts ( &quot;id&quot; UUID PRIMARY KEY, &quot;createdAt&quot; TIMESTAMP DEFAULT CURRENT_TIMESTAMP, &quot;name&quot; TEXT, &quot;username&quot; TEXT, &quot;email&quot; TEXT NOT NULL, &quot;avatarUrl&quot; TEXT, &quot;details&quot; JSONB DEFAULT '{}', &quot;is_agent&quot; BOOLEAN DEFAULT false );   Features:  Flexible user details storage using JSONBAgent/user differentiationIntegration with auth systems  ","version":"Next","tagName":"h3"},{"title":"3. Relationship System​","type":1,"pageTitle":"Infrastructure","url":"/eliza/docs/advanced/infrastructure/#3-relationship-system","content":" CREATE TABLE relationships ( &quot;id&quot; UUID PRIMARY KEY, &quot;createdAt&quot; TIMESTAMP DEFAULT CURRENT_TIMESTAMP, &quot;userA&quot; UUID NOT NULL, &quot;userB&quot; UUID NOT NULL, &quot;status&quot; TEXT, &quot;userId&quot; UUID NOT NULL );   Supports:  Bi-directional relationshipsRelationship status trackingFriend recommendations  ","version":"Next","tagName":"h3"},{"title":"Security Features​","type":1,"pageTitle":"Infrastructure","url":"/eliza/docs/advanced/infrastructure/#security-features","content":" ","version":"Next","tagName":"h2"},{"title":"Row Level Security (RLS)​","type":1,"pageTitle":"Infrastructure","url":"/eliza/docs/advanced/infrastructure/#row-level-security-rls","content":" PostgreSQL deployment includes comprehensive RLS policies:  -- Example RLS policies CREATE POLICY &quot;Enable read access for all users&quot; ON &quot;public&quot;.&quot;accounts&quot; FOR SELECT USING (true); CREATE POLICY &quot;Can select and update all data&quot; ON &quot;public&quot;.&quot;accounts&quot; USING ((&quot;auth&quot;.&quot;uid&quot;() = &quot;id&quot;)) WITH CHECK ((&quot;auth&quot;.&quot;uid&quot;() = &quot;id&quot;));   ","version":"Next","tagName":"h3"},{"title":"Authentication Integration​","type":1,"pageTitle":"Infrastructure","url":"/eliza/docs/advanced/infrastructure/#authentication-integration","content":" Built-in support for Supabase AuthJWT validationRole-based access control  ","version":"Next","tagName":"h3"},{"title":"Deployment Options​","type":1,"pageTitle":"Infrastructure","url":"/eliza/docs/advanced/infrastructure/#deployment-options","content":" ","version":"Next","tagName":"h2"},{"title":"1. Cloud Deployment (Supabase)​","type":1,"pageTitle":"Infrastructure","url":"/eliza/docs/advanced/infrastructure/#1-cloud-deployment-supabase","content":" // Initialize cloud database const supabaseAdapter = new SupabaseDatabaseAdapter( &quot;https://your-project.supabase.co&quot;, &quot;your-supabase-key&quot;, );   Features:  Automated backupsScalable vector operationsReal-time capabilitiesBuilt-in monitoring  ","version":"Next","tagName":"h3"},{"title":"2. Local Deployment (SQLite)​","type":1,"pageTitle":"Infrastructure","url":"/eliza/docs/advanced/infrastructure/#2-local-deployment-sqlite","content":" // Initialize local database const sqliteAdapter = new SqliteDatabaseAdapter( new Database(&quot;path/to/database.db&quot;), );   Features:  File-based storagePortable deploymentLow resource requirementsEmbedded vector operations  ","version":"Next","tagName":"h3"},{"title":"3. In-Memory Deployment (SQL.js)​","type":1,"pageTitle":"Infrastructure","url":"/eliza/docs/advanced/infrastructure/#3-in-memory-deployment-sqljs","content":" // Initialize in-memory database const sqljsAdapter = new SqlJsDatabaseAdapter(new Database());   Features:  No persistence requirementsFast operationsPerfect for testingBrowser compatibility  ","version":"Next","tagName":"h3"},{"title":"Vector Search Capabilities​","type":1,"pageTitle":"Infrastructure","url":"/eliza/docs/advanced/infrastructure/#vector-search-capabilities","content":" All database adapters support vector operations for semantic search:  async searchMemoriesByEmbedding( embedding: number[], params: { match_threshold?: number; count?: number; roomId?: UUID; unique?: boolean; tableName: string; } ): Promise&lt;Memory[]&gt;   ","version":"Next","tagName":"h2"},{"title":"Implementation Details:​","type":1,"pageTitle":"Infrastructure","url":"/eliza/docs/advanced/infrastructure/#implementation-details","content":" PostgreSQL: Uses pgvector extensionSQLite: Uses sqlite-vss extensionSQL.js: Uses custom vector similarity functions  ","version":"Next","tagName":"h3"},{"title":"Best Practices​","type":1,"pageTitle":"Infrastructure","url":"/eliza/docs/advanced/infrastructure/#best-practices","content":" Database Selection Use Supabase for production deploymentsUse SQLite for edge computing/local deploymentsUse SQL.js for testing and browser-based applications Memory Management // Example of proper memory handling async function withConnection(fn: (client: PoolClient) =&gt; Promise&lt;T&gt;) { const client = await pool.connect(); try { return await fn(client); } finally { client.release(); } } Error Handling try { await adapter.createMemory(memory, tableName); } catch (error) { console.error(&quot;Database error:&quot;, error); // Implement proper error recovery } Connection Pooling const pool = new Pool({ max: 20, idleTimeoutMillis: 30000, connectionTimeoutMillis: 2000, });   ","version":"Next","tagName":"h2"},{"title":"Performance Optimization​","type":1,"pageTitle":"Infrastructure","url":"/eliza/docs/advanced/infrastructure/#performance-optimization","content":" Indexing Strategy -- Essential indexes for performance CREATE INDEX idx_memories_embedding ON memories USING hnsw (&quot;embedding&quot; vector_cosine_ops); CREATE INDEX idx_memories_type_room ON memories(&quot;type&quot;, &quot;roomId&quot;); Query Optimization // Use parameterized queries const stmt = db.prepare( &quot;SELECT * FROM memories WHERE type = ? AND roomId = ?&quot;, ); Caching Implement memory caching for frequently accessed dataUse embedding caching for similar queries  ","version":"Next","tagName":"h2"},{"title":"Monitoring and Maintenance​","type":1,"pageTitle":"Infrastructure","url":"/eliza/docs/advanced/infrastructure/#monitoring-and-maintenance","content":" Health Checks async testConnection(): Promise&lt;boolean&gt; { const result = await client.query(&quot;SELECT NOW()&quot;); return !!result.rows[0]; } Logging // Implement comprehensive logging const loggingAdapter = createLoggingDatabaseAdapter(baseAdapter);   ","version":"Next","tagName":"h2"},{"title":"Additional Resources​","type":1,"pageTitle":"Infrastructure","url":"/eliza/docs/advanced/infrastructure/#additional-resources","content":" PostgreSQL DocumentationSQLite DocumentationSupabase DocumentationVector Search Guide  For deployment-specific configurations and advanced setup options, refer to the respective database documentation. ","version":"Next","tagName":"h2"},{"title":"Trust Engine System","type":0,"sectionRef":"#","url":"/eliza/docs/advanced/trust-engine/","content":"","keywords":"","version":"Next"},{"title":"Overview​","type":1,"pageTitle":"Trust Engine System","url":"/eliza/docs/advanced/trust-engine/#overview","content":" The Trust Engine is a sophisticated system for tracking, evaluating, and managing trust scores in decentralized recommendation networks. It provides a comprehensive framework for monitoring recommender performance, token metrics, and trading outcomes.  ","version":"Next","tagName":"h2"},{"title":"Core Components​","type":1,"pageTitle":"Trust Engine System","url":"/eliza/docs/advanced/trust-engine/#core-components","content":" ","version":"Next","tagName":"h2"},{"title":"1. Recommender Management​","type":1,"pageTitle":"Trust Engine System","url":"/eliza/docs/advanced/trust-engine/#1-recommender-management","content":" interface Recommender { id: string; // Unique identifier address: string; // Blockchain address solanaPubkey?: string; telegramId?: string; discordId?: string; twitterId?: string; ip?: string; }   The system tracks recommenders across multiple platforms and identifiers, enabling:  Cross-platform identity verificationMulti-channel recommendation trackingUnified reputation management  ","version":"Next","tagName":"h3"},{"title":"2. Trust Metrics​","type":1,"pageTitle":"Trust Engine System","url":"/eliza/docs/advanced/trust-engine/#2-trust-metrics","content":" interface RecommenderMetrics { recommenderId: string; trustScore: number; // Overall trust rating totalRecommendations: number; successfulRecs: number; avgTokenPerformance: number; riskScore: number; consistencyScore: number; virtualConfidence: number; lastUpdated: Date; }   Key metrics tracked:  Trust Score: Overall reliability ratingSuccess Rate: Ratio of successful recommendationsRisk Assessment: Evaluation of risk-taking behaviorConsistency: Pattern analysis of recommendations  ","version":"Next","tagName":"h3"},{"title":"3. Token Performance Tracking​","type":1,"pageTitle":"Trust Engine System","url":"/eliza/docs/advanced/trust-engine/#3-token-performance-tracking","content":" interface TokenPerformance { tokenAddress: string; priceChange24h: number; volumeChange24h: number; trade_24h_change: number; liquidity: number; liquidityChange24h: number; holderChange24h: number; rugPull: boolean; isScam: boolean; marketCapChange24h: number; sustainedGrowth: boolean; rapidDump: boolean; suspiciousVolume: boolean; lastUpdated: Date; }   ","version":"Next","tagName":"h3"},{"title":"Usage Guide​","type":1,"pageTitle":"Trust Engine System","url":"/eliza/docs/advanced/trust-engine/#usage-guide","content":" ","version":"Next","tagName":"h2"},{"title":"1. Initializing Trust Tracking​","type":1,"pageTitle":"Trust Engine System","url":"/eliza/docs/advanced/trust-engine/#1-initializing-trust-tracking","content":" const trustDB = new TrustScoreDatabase(sqliteDb); // Add a new recommender const recommender = { id: &quot;uuid&quot;, address: &quot;0x...&quot;, telegramId: &quot;@username&quot;, }; trustDB.addRecommender(recommender); // Initialize metrics trustDB.initializeRecommenderMetrics(recommender.id);   ","version":"Next","tagName":"h3"},{"title":"2. Tracking Recommendations​","type":1,"pageTitle":"Trust Engine System","url":"/eliza/docs/advanced/trust-engine/#2-tracking-recommendations","content":" // Record a new token recommendation const recommendation = { id: &quot;uuid&quot;, recommenderId: recommender.id, tokenAddress: &quot;0x...&quot;, timestamp: new Date(), initialMarketCap: 1000000, initialLiquidity: 500000, initialPrice: 0.001, }; trustDB.addTokenRecommendation(recommendation);   ","version":"Next","tagName":"h3"},{"title":"3. Performance Monitoring​","type":1,"pageTitle":"Trust Engine System","url":"/eliza/docs/advanced/trust-engine/#3-performance-monitoring","content":" // Update token performance metrics const performance = { tokenAddress: &quot;0x...&quot;, priceChange24h: 15.5, volumeChange24h: 25.0, liquidity: 1000000, holderChange24h: 5.2, rugPull: false, isScam: false, // ... other metrics }; trustDB.upsertTokenPerformance(performance);   ","version":"Next","tagName":"h3"},{"title":"4. Trade Tracking​","type":1,"pageTitle":"Trust Engine System","url":"/eliza/docs/advanced/trust-engine/#4-trade-tracking","content":" // Record a trade based on recommendation const trade = { token_address: &quot;0x...&quot;, recommender_id: &quot;uuid&quot;, buy_price: 0.001, buy_timeStamp: new Date().toISOString(), buy_amount: 1000, buy_sol: 1.5, buy_value_usd: 1500, buy_market_cap: 1000000, buy_liquidity: 500000, }; trustDB.addTradePerformance(trade, false);   ","version":"Next","tagName":"h3"},{"title":"Trust Score Calculation​","type":1,"pageTitle":"Trust Engine System","url":"/eliza/docs/advanced/trust-engine/#trust-score-calculation","content":" The system calculates trust scores based on multiple factors:  Performance Metrics Success rate of recommendationsAverage token performanceRisk-adjusted returns Risk Factors const riskFactors = { rugPull: -1.0, // Maximum penalty scam: -0.8, // Severe penalty rapidDump: -0.4, // Moderate penalty suspicious: -0.2, // Minor penalty }; Historical Analysis Performance consistencyLong-term success rateRisk pattern analysis  ","version":"Next","tagName":"h2"},{"title":"Best Practices​","type":1,"pageTitle":"Trust Engine System","url":"/eliza/docs/advanced/trust-engine/#best-practices","content":" ","version":"Next","tagName":"h2"},{"title":"1. Regular Updates​","type":1,"pageTitle":"Trust Engine System","url":"/eliza/docs/advanced/trust-engine/#1-regular-updates","content":" // Update metrics regularly function updateRecommenderMetrics(recommenderId: string) { const metrics = calculateUpdatedMetrics(recommenderId); trustDB.updateRecommenderMetrics(metrics); trustDB.logRecommenderMetricsHistory(recommenderId); }   ","version":"Next","tagName":"h3"},{"title":"2. Risk Management​","type":1,"pageTitle":"Trust Engine System","url":"/eliza/docs/advanced/trust-engine/#2-risk-management","content":" Monitor suspicious patterns: const riskFlags = { rapidPriceChange: price24h &gt; 100, lowLiquidity: liquidity &lt; minLiquidityThreshold, suspiciousVolume: volume24h &gt; marketCap, }; Implement automatic warnings: if (metrics.riskScore &gt; riskThreshold) { triggerRiskAlert(recommenderId); }   ","version":"Next","tagName":"h3"},{"title":"3. Performance Tracking​","type":1,"pageTitle":"Trust Engine System","url":"/eliza/docs/advanced/trust-engine/#3-performance-tracking","content":" // Track historical performance const history = trustDB.getRecommenderMetricsHistory(recommenderId); const performanceTrend = analyzePerformanceTrend(history);   ","version":"Next","tagName":"h3"},{"title":"Advanced Features​","type":1,"pageTitle":"Trust Engine System","url":"/eliza/docs/advanced/trust-engine/#advanced-features","content":" ","version":"Next","tagName":"h2"},{"title":"1. Simulation Support​","type":1,"pageTitle":"Trust Engine System","url":"/eliza/docs/advanced/trust-engine/#1-simulation-support","content":" // Test strategies without affecting real metrics trustDB.addTradePerformance(trade, true); // Simulation mode   ","version":"Next","tagName":"h3"},{"title":"2. Cross-Platform Verification​","type":1,"pageTitle":"Trust Engine System","url":"/eliza/docs/advanced/trust-engine/#2-cross-platform-verification","content":" const verifyIdentity = async (recommender: Recommender) =&gt; { const telegramVerified = await verifyTelegram(recommender.telegramId); const walletVerified = await verifyWallet(recommender.address); return telegramVerified &amp;&amp; walletVerified; };   ","version":"Next","tagName":"h3"},{"title":"3. Historical Analysis​","type":1,"pageTitle":"Trust Engine System","url":"/eliza/docs/advanced/trust-engine/#3-historical-analysis","content":" const analyzeRecommenderHistory = (recommenderId: string) =&gt; { const recommendations = trustDB.getRecommendationsByRecommender(recommenderId); const metrics = trustDB.getRecommenderMetrics(recommenderId); const history = trustDB.getRecommenderMetricsHistory(recommenderId); return { successRate: metrics.successfulRecs / metrics.totalRecommendations, averagePerformance: metrics.avgTokenPerformance, riskProfile: calculateRiskProfile(history), consistencyScore: metrics.consistencyScore, }; };   ","version":"Next","tagName":"h3"},{"title":"Security Considerations​","type":1,"pageTitle":"Trust Engine System","url":"/eliza/docs/advanced/trust-engine/#security-considerations","content":" Data Integrity Use foreign key constraintsImplement transaction managementRegular backup of metrics history Fraud Prevention // Implement rate limiting const checkRateLimit = (recommenderId: string) =&gt; { const recentRecs = getRecentRecommendations(recommenderId, timeWindow); return recentRecs.length &lt; maxRecommendations; }; Identity Verification Cross-reference multiple identifiersImplement progressive trust buildingRegular verification checks  ","version":"Next","tagName":"h2"},{"title":"Future Enhancements​","type":1,"pageTitle":"Trust Engine System","url":"/eliza/docs/advanced/trust-engine/#future-enhancements","content":" Machine Learning Integration Pattern recognition for fraud detectionAutomated risk assessmentPredictive analytics for recommendation quality Decentralized Validation Peer verification systemConsensus-based trust scoringDistributed reputation management Enhanced Metrics Market sentiment analysisSocial signal integrationNetwork effect measurement  ","version":"Next","tagName":"h2"},{"title":"Additional Resources​","type":1,"pageTitle":"Trust Engine System","url":"/eliza/docs/advanced/trust-engine/#additional-resources","content":" Database Schema Documentation  Remember to regularly monitor and adjust trust parameters based on market conditions and system performance. ","version":"Next","tagName":"h2"}],"options":{"id":"default"}}