"use strict";(self.webpackChunkeliza_docs=self.webpackChunkeliza_docs||[]).push([[42979],{92895:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"functions/composeContext","title":"composeContext","description":"@elizaos/core v0.25.9 / composeContext","source":"@site/api/functions/composeContext.md","sourceDirName":"functions","slug":"/functions/composeContext","permalink":"/eliza/api/functions/composeContext","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"defaultSidebar","previous":{"title":"composeActionExamples","permalink":"/eliza/api/functions/composeActionExamples"},"next":{"title":"composeRandomUser","permalink":"/eliza/api/functions/composeRandomUser"}}');var o=n(74848),a=n(28453);const i={},r="Function: composeContext()",c={},l=[{value:"Parameters",id:"parameters",level:2},{value:"Returns",id:"returns",level:2},{value:"Example",id:"example",level:2},{value:"Defined in",id:"defined-in",level:2}];function p(e){const t={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.a,{href:"/eliza/api/",children:"@elizaos/core v0.25.9"})," / composeContext"]}),"\n",(0,o.jsx)(t.header,{children:(0,o.jsx)(t.h1,{id:"function-composecontext",children:"Function: composeContext()"})}),"\n",(0,o.jsxs)(t.blockquote,{children:["\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.strong,{children:"composeContext"}),"(",(0,o.jsx)(t.code,{children:"params"}),"): ",(0,o.jsx)(t.code,{children:"string"})]}),"\n"]}),"\n",(0,o.jsx)(t.p,{children:"Composes a context string by replacing placeholders in a template with corresponding values from the state."}),"\n",(0,o.jsxs)(t.p,{children:["This function takes a template string with placeholders in the format ",(0,o.jsx)(t.code,{children:"{{placeholder}}"})," and a state object.\nIt replaces each placeholder with the value from the state object that matches the placeholder's name.\nIf a matching key is not found in the state object for a given placeholder, the placeholder is replaced with an empty string."]}),"\n",(0,o.jsxs)(t.p,{children:["By default, this function uses a simple string replacement approach. However, when ",(0,o.jsx)(t.code,{children:"templatingEngine"})," is set to ",(0,o.jsx)(t.code,{children:"'handlebars'"}),", it uses Handlebars templating engine instead, compiling the template into a reusable function and evaluating it with the provided state object."]}),"\n",(0,o.jsx)(t.h2,{id:"parameters",children:"Parameters"}),"\n",(0,o.jsxs)(t.p,{children:["\u2022 ",(0,o.jsx)(t.strong,{children:"params"})]}),"\n",(0,o.jsx)(t.p,{children:"The parameters for composing the context."}),"\n",(0,o.jsxs)(t.p,{children:["\u2022 ",(0,o.jsx)(t.strong,{children:"params.state"}),": ",(0,o.jsx)(t.a,{href:"/eliza/api/interfaces/State",children:(0,o.jsx)(t.code,{children:"State"})})]}),"\n",(0,o.jsx)(t.p,{children:"The state object containing values to replace the placeholders in the template."}),"\n",(0,o.jsxs)(t.p,{children:["\u2022 ",(0,o.jsx)(t.strong,{children:"params.template"}),": ",(0,o.jsx)(t.a,{href:"/eliza/api/type-aliases/TemplateType",children:(0,o.jsx)(t.code,{children:"TemplateType"})})]}),"\n",(0,o.jsx)(t.p,{children:"The template string or function containing placeholders to be replaced with state values."}),"\n",(0,o.jsxs)(t.p,{children:["\u2022 ",(0,o.jsx)(t.strong,{children:"params.templatingEngine?"}),": ",(0,o.jsx)(t.code,{children:'"handlebars"'})]}),"\n",(0,o.jsxs)(t.p,{children:["The templating engine to use for compiling and evaluating the template (optional, default: ",(0,o.jsx)(t.code,{children:"undefined"}),")."]}),"\n",(0,o.jsx)(t.h2,{id:"returns",children:"Returns"}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.code,{children:"string"})}),"\n",(0,o.jsx)(t.p,{children:"The composed context string with placeholders replaced by corresponding state values."}),"\n",(0,o.jsx)(t.h2,{id:"example",children:"Example"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-ts",children:'// Given a state object and a template\nconst state = { userName: "Alice", userAge: 30 };\nconst template = "Hello, {{userName}}! You are {{userAge}} years old";\n\n// Composing the context with simple string replacement will result in:\n// "Hello, Alice! You are 30 years old."\nconst contextSimple = composeContext({ state, template });\n\n// Using composeContext with a template function for dynamic template\nconst template = ({ state }) => {\nconst tone = Math.random() > 0.5 ? "kind" : "rude";\n  return `Hello, {{userName}}! You are {{userAge}} years old. Be ${tone}`;\n};\nconst contextSimple = composeContext({ state, template });\n'})}),"\n",(0,o.jsx)(t.h2,{id:"defined-in",children:"Defined in"}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.a,{href:"https://github.com/elizaOS/eliza/blob/main/packages/core/src/context.ts#L37",children:"packages/core/src/context.ts:37"})})]})}function d(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(p,{...e})}):p(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>r});var s=n(96540);const o={},a=s.createContext(o);function i(e){const t=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),s.createElement(a.Provider,{value:t},e.children)}}}]);