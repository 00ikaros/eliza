"use strict";(self.webpackChunk_elizaos_docs=self.webpackChunk_elizaos_docs||[]).push([[33194],{71184:(e,n,a)=>{a.d(n,{R:()=>r,x:()=>i});var t=a(14041);const s={},o=t.createContext(s);function r(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),t.createElement(o.Provider,{value:n},e.children)}},85098:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>h,frontMatter:()=>r,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"variables/messageHandlerTemplate","title":"messageHandlerTemplate","description":"@elizaos/core v1.0.0-alpha.67 / messageHandlerTemplate","source":"@site/api/variables/messageHandlerTemplate.md","sourceDirName":"variables","slug":"/variables/messageHandlerTemplate","permalink":"/api/variables/messageHandlerTemplate","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"defaultSidebar","previous":{"title":"logger","permalink":"/api/variables/logger"},"next":{"title":"postActionResponseFooter","permalink":"/api/variables/postActionResponseFooter"}}');var s=a(31085),o=a(71184);const r={},i="Variable: messageHandlerTemplate",l={},d=[{value:"Defined in",id:"defined-in",level:2}];function c(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",strong:"strong",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"/api/",children:"@elizaos/core v1.0.0-alpha.67"})," / messageHandlerTemplate"]}),"\n",(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"variable-messagehandlertemplate",children:"Variable: messageHandlerTemplate"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"const"})," ",(0,s.jsx)(n.strong,{children:"messageHandlerTemplate"}),': "# Task: Generate dialog and actions for the character {{agentName}}.\\n{{providers}}\\n# Instructions: Write a thought and plan for {{agentName}} and decide what actions to take. Also include the providers that {{agentName}} will use to have the right context for responding and acting, if any.\\nFirst, think about what you want to do next and plan your actions. Then, write the next message and include the actions you plan to take.\\n"thought" should be a short description of what the agent is thinking about and planning.\\n"actions" should be an array of the actions {{agentName}} plans to take based on the thought (if none, use IGNORE, if simply responding with text, use REPLY)\\n"providers" should be an optional array of the providers that {{agentName}} will use to have the right context for responding and acting\\n"evaluators" should be an optional array of the evaluators that {{agentName}} will use to evaluate the conversation after responding\\nThese are the available valid actions: {{actionNames}}\\n\\nResponse format should be formatted in a valid JSON block like this:\\n```json\\n{\\n    "thought": "<string>",\\n    "actions": ["<string>", "<string>", ...],\\n    "providers": ["<string>", "<string>", ...]\\n}\\n```\\n\\nYour response should include the valid JSON block and nothing else."']}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"defined-in",children:"Defined in"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://github.com/elizaOS/eliza/blob/main/packages/core/src/prompts.ts#L307",children:"packages/core/src/prompts.ts:307"})})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}}}]);