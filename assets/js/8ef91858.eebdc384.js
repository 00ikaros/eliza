"use strict";(self.webpackChunkeliza_docs=self.webpackChunkeliza_docs||[]).push([[91765],{11762:(e,s,r)=>{r.r(s),r.d(s,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"core/database","title":"\ud83d\udcbe Database Adapters","description":"Database adapters provide persistent storage capabilities for ElizaOS agents. They handle memory storage, relationship tracking, and knowledge management across different database backends.","source":"@site/docs/core/database.md","sourceDirName":"core","slug":"/core/database","permalink":"/eliza/docs/core/database","draft":false,"unlisted":false,"editUrl":"https://github.com/elizaos/eliza/tree/main/docs/docs/core/database.md","tags":[],"version":"current","lastUpdatedBy":"jin","lastUpdatedAt":1740015364000,"sidebarPosition":7,"frontMatter":{"sidebar_position":7},"sidebar":"tutorialSidebar","previous":{"title":"Evaluators","permalink":"/eliza/docs/core/evaluators"},"next":{"title":"Configuration","permalink":"/eliza/docs/guides/configuration"}}');var n=r(74848),d=r(28453);const i={sidebar_position:7},a="\ud83d\udcbe Database Adapters",o={},c=[{value:"Overview",id:"overview",level:2},{value:"Core Functionality",id:"core-functionality",level:2},{value:"Implementation Notes",id:"implementation-notes",level:3},{value:"Adapter Implementations",id:"adapter-implementations",level:2},{value:"Quick Start",id:"quick-start",level:3},{value:"Adapter Comparison",id:"adapter-comparison",level:2},{value:"Implementation Details",id:"implementation-details",level:2},{value:"PostgreSQL Requirements",id:"postgresql-requirements",level:3},{value:"SQLite Schema",id:"sqlite-schema",level:3},{value:"Supabase Vector Tables",id:"supabase-vector-tables",level:3},{value:"Embedding Support",id:"embedding-support",level:2},{value:"Transaction &amp; Error Handling",id:"transaction--error-handling",level:2},{value:"FAQ",id:"faq",level:2},{value:"How do I choose the right adapter?",id:"how-do-i-choose-the-right-adapter",level:3},{value:"Can I switch adapters later?",id:"can-i-switch-adapters-later",level:3},{value:"How are vector embeddings handled?",id:"how-are-vector-embeddings-handled",level:3},{value:"What about data migration?",id:"what-about-data-migration",level:3},{value:"How do I handle schema updates?",id:"how-do-i-handle-schema-updates",level:3},{value:"How do I fix database connection issues?",id:"how-do-i-fix-database-connection-issues",level:3},{value:"How do I resolve embedding dimension mismatch errors?",id:"how-do-i-resolve-embedding-dimension-mismatch-errors",level:3},{value:"How do I clear/reset my database?",id:"how-do-i-clearreset-my-database",level:3},{value:"Which database should I use in production?",id:"which-database-should-i-use-in-production",level:3},{value:"How do I migrate between different database adapters?",id:"how-do-i-migrate-between-different-database-adapters",level:3},{value:"Further Reading",id:"further-reading",level:2}];function l(e){const s={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,d.R)(),...e.components},{Details:r}=s;return r||function(e,s){throw new Error("Expected "+(s?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(s.header,{children:(0,n.jsx)(s.h1,{id:"-database-adapters",children:"\ud83d\udcbe Database Adapters"})}),"\n",(0,n.jsx)(s.p,{children:"Database adapters provide persistent storage capabilities for ElizaOS agents. They handle memory storage, relationship tracking, and knowledge management across different database backends."}),"\n",(0,n.jsx)(s.h2,{id:"overview",children:"Overview"}),"\n",(0,n.jsxs)(s.p,{children:["Database adapters implement the ",(0,n.jsx)(s.a,{href:"/api/interfaces/IDatabaseAdapter",children:(0,n.jsx)(s.code,{children:"IDatabaseAdapter"})})," interface to provide consistent data access across different storage solutions. Each adapter optimizes for specific use cases:"]}),"\n",(0,n.jsxs)(s.table,{children:[(0,n.jsx)(s.thead,{children:(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.th,{children:"Adapter"}),(0,n.jsx)(s.th,{children:"Best For"}),(0,n.jsx)(s.th,{children:"Key Features"})]})}),(0,n.jsxs)(s.tbody,{children:[(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:(0,n.jsx)(s.a,{href:"https://github.com/elizaos-plugins/adapter-mongodb",children:"MongoDB"})}),(0,n.jsx)(s.td,{children:"Production deployments"}),(0,n.jsx)(s.td,{children:"Sharding, vector search, real-time participant management"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:(0,n.jsx)(s.a,{href:"https://github.com/elizaos-plugins/adapter-postgres",children:"PostgreSQL"})}),(0,n.jsx)(s.td,{children:"Enterprise & vector search"}),(0,n.jsx)(s.td,{children:"Dynamic vector dimensions, fuzzy matching, comprehensive logging"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:(0,n.jsx)(s.a,{href:"https://github.com/elizaos-plugins/adapter-sqlite",children:"SQLite"})}),(0,n.jsx)(s.td,{children:"Development & embedded"}),(0,n.jsx)(s.td,{children:"Lightweight, file-based, vector BLOB support"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:(0,n.jsx)(s.a,{href:"https://github.com/elizaos-plugins/adapter-supabase",children:"Supabase"})}),(0,n.jsx)(s.td,{children:"Cloud-hosted vector DB"}),(0,n.jsx)(s.td,{children:"Multiple embedding sizes, real-time subscriptions, row-level security"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:(0,n.jsx)(s.a,{href:"https://github.com/elizaos-plugins/adapter-pglite",children:"PGLite"})}),(0,n.jsx)(s.td,{children:"Browser environments"}),(0,n.jsx)(s.td,{children:"Lightweight PostgreSQL implementation, HNSW indexing"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:(0,n.jsx)(s.a,{href:"https://github.com/elizaos-plugins/adapter-qdrant",children:"Qdrant"})}),(0,n.jsx)(s.td,{children:"Vector-focused deployments"}),(0,n.jsx)(s.td,{children:"Optimized for RAG applications, sophisticated preprocessing"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:(0,n.jsx)(s.a,{href:"https://github.com/elizaos-plugins/adapter-sqljs",children:"SQL.js"})}),(0,n.jsx)(s.td,{children:"Browser environments"}),(0,n.jsx)(s.td,{children:"Full SQLite functionality in browser, complex queries"})]})]})]}),"\n",(0,n.jsx)(s.h2,{id:"core-functionality",children:"Core Functionality"}),"\n",(0,n.jsxs)(s.p,{children:["All adapters extend the ",(0,n.jsx)(s.a,{href:"/api/classes/DatabaseAdapter",children:(0,n.jsx)(s.code,{children:"DatabaseAdapter"})})," base class and implement the ",(0,n.jsx)(s.a,{href:"/api/interfaces/IDatabaseAdapter",children:(0,n.jsx)(s.code,{children:"IDatabaseAdapter"})})," interface. Here's a comprehensive overview of available methods:"]}),"\n",(0,n.jsxs)(s.table,{children:[(0,n.jsx)(s.thead,{children:(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.th,{children:"Category"}),(0,n.jsx)(s.th,{children:"Method"}),(0,n.jsx)(s.th,{children:"Description"}),(0,n.jsx)(s.th,{children:"Parameters"})]})}),(0,n.jsxs)(s.tbody,{children:[(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:(0,n.jsx)(s.strong,{children:"Database Lifecycle"})}),(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"init()"})}),(0,n.jsx)(s.td,{children:"Initialize database connection"}),(0,n.jsx)(s.td,{children:"-"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"close()"})}),(0,n.jsx)(s.td,{children:"Close database connection"}),(0,n.jsx)(s.td,{children:"-"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:(0,n.jsx)(s.strong,{children:"Memory Management"})}),(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"createMemory()"})}),(0,n.jsx)(s.td,{children:"Store new memory"}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"memory: Memory, tableName: string, unique?: boolean"})})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"getMemoryById()"})}),(0,n.jsx)(s.td,{children:"Retrieve specific memory"}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"id: UUID"})})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"getMemories()"})}),(0,n.jsx)(s.td,{children:"Get memories matching criteria"}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"{ roomId: UUID, count?: number, unique?: boolean, tableName: string, agentId: UUID, start?: number, end?: number }"})})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"getMemoriesByIds()"})}),(0,n.jsx)(s.td,{children:"Get multiple memories by IDs"}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"memoryIds: UUID[], tableName?: string"})})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"getMemoriesByRoomIds()"})}),(0,n.jsx)(s.td,{children:"Get memories from multiple rooms"}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"{ agentId: UUID, roomIds: UUID[], tableName: string, limit?: number }"})})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"searchMemories()"})}),(0,n.jsx)(s.td,{children:"Search with vector similarity"}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"{ tableName: string, agentId: UUID, roomId: UUID, embedding: number[], match_threshold: number, match_count: number, unique: boolean }"})})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"searchMemoriesByEmbedding()"})}),(0,n.jsx)(s.td,{children:"Search memories by embedding vector"}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"embedding: number[], { match_threshold?: number, count?: number, roomId?: UUID, agentId?: UUID, unique?: boolean, tableName: string }"})})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"removeMemory()"})}),(0,n.jsx)(s.td,{children:"Remove specific memory"}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"memoryId: UUID, tableName: string"})})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"removeAllMemories()"})}),(0,n.jsx)(s.td,{children:"Remove all memories in room"}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"roomId: UUID, tableName: string"})})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"countMemories()"})}),(0,n.jsx)(s.td,{children:"Count memories in room"}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"roomId: UUID, unique?: boolean, tableName?: string"})})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:(0,n.jsx)(s.strong,{children:"Knowledge Management"})}),(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"createKnowledge()"})}),(0,n.jsx)(s.td,{children:"Store new knowledge item"}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"knowledge: RAGKnowledgeItem"})})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"getKnowledge()"})}),(0,n.jsx)(s.td,{children:"Retrieve knowledge"}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"{ id?: UUID, agentId: UUID, limit?: number, query?: string, conversationContext?: string }"})})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"searchKnowledge()"})}),(0,n.jsx)(s.td,{children:"Semantic knowledge search"}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"{ agentId: UUID, embedding: Float32Array, match_threshold: number, match_count: number, searchText?: string }"})})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"removeKnowledge()"})}),(0,n.jsx)(s.td,{children:"Remove knowledge item"}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"id: UUID"})})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"clearKnowledge()"})}),(0,n.jsx)(s.td,{children:"Remove all knowledge"}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"agentId: UUID, shared?: boolean"})})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:(0,n.jsx)(s.strong,{children:"Room & Participants"})}),(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"createRoom()"})}),(0,n.jsx)(s.td,{children:"Create new conversation room"}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"roomId?: UUID"})})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"getRoom()"})}),(0,n.jsx)(s.td,{children:"Get room by ID"}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"roomId: UUID"})})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"removeRoom()"})}),(0,n.jsx)(s.td,{children:"Remove room"}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"roomId: UUID"})})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"addParticipant()"})}),(0,n.jsx)(s.td,{children:"Add user to room"}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"userId: UUID, roomId: UUID"})})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"removeParticipant()"})}),(0,n.jsx)(s.td,{children:"Remove user from room"}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"userId: UUID, roomId: UUID"})})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"getParticipantsForRoom()"})}),(0,n.jsx)(s.td,{children:"List room participants"}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"roomId: UUID"})})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"getParticipantsForAccount()"})}),(0,n.jsx)(s.td,{children:"Get user's room participations"}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"userId: UUID"})})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"getRoomsForParticipant()"})}),(0,n.jsx)(s.td,{children:"Get rooms for user"}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"userId: UUID"})})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"getRoomsForParticipants()"})}),(0,n.jsx)(s.td,{children:"Get shared rooms for users"}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"userIds: UUID[]"})})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"getParticipantUserState()"})}),(0,n.jsx)(s.td,{children:"Get participant's state"}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"roomId: UUID, userId: UUID"})})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"setParticipantUserState()"})}),(0,n.jsx)(s.td,{children:"Update participant state"}),(0,n.jsx)(s.td,{children:'`roomId: UUID, userId: UUID, state: "FOLLOWED"'})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:(0,n.jsx)(s.strong,{children:"Account Management"})}),(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"createAccount()"})}),(0,n.jsx)(s.td,{children:"Create new user account"}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"account: Account"})})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"getAccountById()"})}),(0,n.jsx)(s.td,{children:"Retrieve user account"}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"userId: UUID"})})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"getActorDetails()"})}),(0,n.jsx)(s.td,{children:"Get actor information"}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"{ roomId: UUID }"})})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:(0,n.jsx)(s.strong,{children:"Relationships"})}),(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"createRelationship()"})}),(0,n.jsx)(s.td,{children:"Create user connection"}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"{ userA: UUID, userB: UUID }"})})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"getRelationship()"})}),(0,n.jsx)(s.td,{children:"Get relationship details"}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"{ userA: UUID, userB: UUID }"})})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"getRelationships()"})}),(0,n.jsx)(s.td,{children:"Get all relationships"}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"{ userId: UUID }"})})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:(0,n.jsx)(s.strong,{children:"Goals"})}),(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"createGoal()"})}),(0,n.jsx)(s.td,{children:"Create new goal"}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"goal: Goal"})})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"updateGoal()"})}),(0,n.jsx)(s.td,{children:"Update goal"}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"goal: Goal"})})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"updateGoalStatus()"})}),(0,n.jsx)(s.td,{children:"Update goal status"}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"{ goalId: UUID, status: GoalStatus }"})})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"getGoals()"})}),(0,n.jsx)(s.td,{children:"Get goals matching criteria"}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"{ agentId: UUID, roomId: UUID, userId?: UUID, onlyInProgress?: boolean, count?: number }"})})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"removeGoal()"})}),(0,n.jsx)(s.td,{children:"Remove specific goal"}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"goalId: UUID"})})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"removeAllGoals()"})}),(0,n.jsx)(s.td,{children:"Remove all goals in room"}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"roomId: UUID"})})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:(0,n.jsx)(s.strong,{children:"Caching & Embedding"})}),(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"getCachedEmbeddings()"})}),(0,n.jsx)(s.td,{children:"Retrieve cached embeddings"}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"{ query_table_name: string, query_threshold: number, query_input: string, query_field_name: string, query_field_sub_name: string, query_match_count: number }"})})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:(0,n.jsx)(s.strong,{children:"Logging"})}),(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"log()"})}),(0,n.jsx)(s.td,{children:"Log event or action"}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"{ body: { [key: string]: unknown }, userId: UUID, roomId: UUID, type: string }"})})]})]})]}),"\n",(0,n.jsx)(s.h3,{id:"implementation-notes",children:"Implementation Notes"}),"\n",(0,n.jsx)(s.p,{children:"Each adapter optimizes these methods for their specific database backend:"}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.strong,{children:"MongoDB"}),": Uses aggregation pipelines for vector operations"]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.strong,{children:"PostgreSQL"}),": Leverages pgvector extension"]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.strong,{children:"SQLite"}),": Implements BLOB storage for vectors"]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.strong,{children:"Qdrant"}),": Optimizes with HNSW indexing"]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.strong,{children:"Supabase"}),": Adds real-time capabilities"]}),"\n"]}),"\n",(0,n.jsxs)(s.blockquote,{children:["\n",(0,n.jsxs)(s.p,{children:["Note: For detailed implementation examples, see each adapter's source repository (",(0,n.jsx)(s.a,{href:"https://github.com/elizaos-plugins",children:"https://github.com/elizaos-plugins"}),")"]}),"\n"]}),"\n",(0,n.jsx)(s.p,{children:"All adapters provide:"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-typescript",children:"interface IDatabaseAdapter {\n    // Memory Management\n    createMemory(memory: Memory, tableName: string): Promise<void>;\n    getMemories(params: { roomId: UUID; count?: number }): Promise<Memory[]>;\n    searchMemories(params: SearchParams): Promise<Memory[]>;\n    removeMemory(memoryId: UUID): Promise<void>;\n    \n    // Account & Room Management\n    createAccount(account: Account): Promise<boolean>;\n    getAccountById(userId: UUID): Promise<Account>;\n    createRoom(roomId?: UUID): Promise<UUID>;\n    getRoom(roomId: UUID): Promise<UUID>;\n    \n    // Participant Management\n    addParticipant(userId: UUID, roomId: UUID): Promise<boolean>;\n    getParticipantsForRoom(roomId: UUID): Promise<UUID[]>;\n    \n    // Knowledge Management\n    createKnowledge(knowledge: RAGKnowledgeItem): Promise<void>;\n    searchKnowledge(params: SearchParams): Promise<RAGKnowledgeItem[]>;\n    \n    // Goal Management\n    createGoal(goal: Goal): Promise<void>;\n    updateGoalStatus(params: { goalId: UUID; status: GoalStatus }): Promise<void>;\n}\n"})}),"\n",(0,n.jsxs)(r,{children:[(0,n.jsx)("summary",{children:"Relationship Management"}),(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-typescript",children:'interface IDatabaseAdapter {\n    // Room Management\n    createRoom(roomId?: UUID): Promise<UUID>;\n    getRoom(roomId: UUID): Promise<UUID | null>;\n    getRoomsForParticipant(userId: UUID): Promise<UUID[]>;\n    \n    // Participant Management\n    addParticipant(userId: UUID, roomId: UUID): Promise<boolean>;\n    getParticipantsForRoom(roomId: UUID): Promise<UUID[]>;\n    getParticipantUserState(roomId: UUID, userId: UUID): Promise<"FOLLOWED" | "MUTED" | null>;\n    \n    // Relationship Tracking\n    createRelationship(params: { userA: UUID; userB: UUID }): Promise<boolean>;\n    getRelationship(params: { userA: UUID; userB: UUID }): Promise<Relationship | null>;\n}\n'})})]}),"\n",(0,n.jsxs)(r,{children:[(0,n.jsx)("summary",{children:"Cache & Goal Management"}),(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-typescript",children:"interface IDatabaseCacheAdapter {\n    getCache(params: {\n        agentId: UUID;\n        key: string;\n    }): Promise<string | undefined>;\n    \n    setCache(params: {\n        agentId: UUID;\n        key: string;\n        value: string;\n    }): Promise<boolean>;\n}\n\ninterface IDatabaseAdapter {\n    // Goal Management\n    createGoal(goal: Goal): Promise<void>;\n    updateGoal(goal: Goal): Promise<void>;\n    getGoals(params: {\n        agentId: UUID;\n        roomId: UUID;\n        userId?: UUID | null;\n        onlyInProgress?: boolean;\n        count?: number;\n    }): Promise<Goal[]>;\n}\n"})})]}),"\n",(0,n.jsx)(s.hr,{}),"\n",(0,n.jsx)(s.h2,{id:"adapter-implementations",children:"Adapter Implementations"}),"\n",(0,n.jsx)(s.h3,{id:"quick-start",children:"Quick Start"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-typescript",children:"// MongoDB\nimport { MongoDBAdapter } from '@elizaos/adapter-mongodb';\nconst mongoAdapter = new MongoDBAdapter({\n    uri: process.env.MONGODB_URI,\n    dbName: process.env.MONGODB_DB_NAME\n});\n\n// PostgreSQL\nimport { PostgresAdapter } from '@elizaos/adapter-postgres';\nconst pgAdapter = new PostgresAdapter({\n    connectionString: process.env.POSTGRES_URI\n});\n\n// SQLite\nimport { SqliteDatabaseAdapter } from '@elizaos/adapter-sqlite';\nconst sqliteAdapter = new SqliteDatabaseAdapter('path/to/database.db');\n\n// Supabase\nimport { SupabaseAdapter } from '@elizaos/adapter-supabase';\nconst supabaseAdapter = new SupabaseAdapter({\n    url: process.env.SUPABASE_URL,\n    apiKey: process.env.SUPABASE_API_KEY\n});\n"})}),"\n",(0,n.jsx)(s.h2,{id:"adapter-comparison",children:"Adapter Comparison"}),"\n",(0,n.jsxs)(s.table,{children:[(0,n.jsx)(s.thead,{children:(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.th,{children:"Feature"}),(0,n.jsx)(s.th,{children:"MongoDB"}),(0,n.jsx)(s.th,{children:"PostgreSQL"}),(0,n.jsx)(s.th,{children:"SQLite"}),(0,n.jsx)(s.th,{children:"Supabase"})]})}),(0,n.jsxs)(s.tbody,{children:[(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:(0,n.jsx)(s.strong,{children:"Best For"})}),(0,n.jsx)(s.td,{children:"Production deployments"}),(0,n.jsx)(s.td,{children:"Enterprise & vector search"}),(0,n.jsx)(s.td,{children:"Development & embedded"}),(0,n.jsx)(s.td,{children:"Cloud-hosted vector DB"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:(0,n.jsx)(s.strong,{children:"Vector Support"})}),(0,n.jsx)(s.td,{children:"Native sharding"}),(0,n.jsx)(s.td,{children:"Multiple dimensions (384d-1536d)"}),(0,n.jsx)(s.td,{children:"BLOB storage"}),(0,n.jsx)(s.td,{children:"Multi-dimension tables"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:(0,n.jsx)(s.strong,{children:"Key Features"})}),(0,n.jsx)(s.td,{children:"Auto-sharding, Real-time tracking, Auto-reconnection"}),(0,n.jsx)(s.td,{children:"Fuzzy matching, UUID keys, Comprehensive logging"}),(0,n.jsx)(s.td,{children:"JSON validation, FK constraints, Built-in caching"}),(0,n.jsx)(s.td,{children:"Real-time subs, Row-level security, Type-safe queries"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:(0,n.jsx)(s.strong,{children:"Setup Requirements"})}),(0,n.jsx)(s.td,{children:"None"}),(0,n.jsx)(s.td,{children:"pgvector extension"}),(0,n.jsx)(s.td,{children:"None"}),(0,n.jsx)(s.td,{children:"None"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:(0,n.jsx)(s.strong,{children:"Collections/Tables"})}),(0,n.jsx)(s.td,{children:"rooms, participants, accounts, memories, knowledge"}),(0,n.jsx)(s.td,{children:"Same as MongoDB + vector extensions"}),(0,n.jsx)(s.td,{children:"Same as MongoDB + metadata JSON"}),(0,n.jsx)(s.td,{children:"Same as PostgreSQL + dimension-specific tables"})]})]})]}),"\n",(0,n.jsx)(s.h2,{id:"implementation-details",children:"Implementation Details"}),"\n",(0,n.jsx)(s.h3,{id:"postgresql-requirements",children:"PostgreSQL Requirements"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-sql",children:"CREATE EXTENSION IF NOT EXISTS vector;\nCREATE EXTENSION IF NOT EXISTS fuzzystrmatch;\n"})}),"\n",(0,n.jsx)(s.h3,{id:"sqlite-schema",children:"SQLite Schema"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-sql",children:"CREATE TABLE memories (\n    id TEXT PRIMARY KEY,\n    type TEXT,\n    content TEXT,\n    embedding BLOB,\n    userId TEXT FK,\n    roomId TEXT FK,\n    agentId TEXT FK\n);\n\nCREATE TABLE knowledge (\n    id TEXT PRIMARY KEY,\n    content TEXT NOT NULL,\n    embedding BLOB,\n    metadata JSON\n);\n"})}),"\n",(0,n.jsx)(s.h3,{id:"supabase-vector-tables",children:"Supabase Vector Tables"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-sql",children:"CREATE TABLE memories_1536 (id UUID PRIMARY KEY, embedding vector(1536));\nCREATE TABLE memories_1024 (id UUID PRIMARY KEY, embedding vector(1024));\n"})}),"\n",(0,n.jsx)(s.h2,{id:"embedding-support",children:"Embedding Support"}),"\n",(0,n.jsxs)(s.table,{children:[(0,n.jsx)(s.thead,{children:(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.th,{children:"Adapter"}),(0,n.jsx)(s.th,{children:"Supported Dimensions"})]})}),(0,n.jsxs)(s.tbody,{children:[(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"MongoDB"}),(0,n.jsx)(s.td,{children:"All (as arrays)"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"PostgreSQL"}),(0,n.jsx)(s.td,{children:"OpenAI (1536d), Ollama (1024d), GAIANET (768d), BGE (384d)"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"SQLite"}),(0,n.jsx)(s.td,{children:"All (as BLOB)"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"Supabase"}),(0,n.jsx)(s.td,{children:"Configurable (384d-1536d)"})]})]})]}),"\n",(0,n.jsxs)(s.p,{children:["Source code: ",(0,n.jsx)(s.a,{href:"https://github.com/elizaos-plugins",children:"elizaos-plugins"})]}),"\n",(0,n.jsx)(s.hr,{}),"\n",(0,n.jsx)(s.h2,{id:"transaction--error-handling",children:"Transaction & Error Handling"}),"\n",(0,n.jsxs)(s.p,{children:["All adapters extend the ",(0,n.jsx)(s.a,{href:"/api/classes/DatabaseAdapter",children:(0,n.jsx)(s.code,{children:"DatabaseAdapter"})})," base class which provides built-in transaction support and error handling through the ",(0,n.jsx)(s.a,{href:"/api/classes/CircuitBreaker",children:(0,n.jsx)(s.code,{children:"CircuitBreaker"})})," pattern. See ",(0,n.jsx)(s.a,{href:"https://github.com/elizaos-plugins/core/blob/main/src/database.ts",children:"database.ts"})," for implementation details, as well as the ",(0,n.jsx)(s.a,{href:"https://github.com/elizaos-plugins/adapter-postgres/blob/main/src/index.ts",children:"PostgreSQL Adapter Implementation"})," or ",(0,n.jsx)(s.a,{href:"https://github.com/elizaos-plugins/adapter-sqlite/blob/main/src/index.ts",children:"SQLite Adapter Implementation"})," for detailed examples."]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-typescript",children:'// Transaction handling\nconst result = await adapter.withTransaction(async (client) => {\n    await client.query("BEGIN");\n    // Perform multiple operations\n    await client.query("COMMIT");\n    return result;\n});\n\n// Error handling with circuit breaker\nprotected async withCircuitBreaker<T>(\n    operation: () => Promise<T>,\n    context: string\n): Promise<T> {\n    try {\n        return await this.circuitBreaker.execute(operation);\n    } catch (error) {\n        // Circuit breaker prevents cascading failures\n        elizaLogger.error(`Circuit breaker error in ${context}:`, error);\n        throw error;\n    }\n}\n'})}),"\n",(0,n.jsx)(s.p,{children:"Implemented features include:"}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsx)(s.li,{children:"Automatic rollback on errors"}),"\n",(0,n.jsxs)(s.li,{children:["Circuit breaker pattern to prevent cascading failures (",(0,n.jsx)(s.a,{href:"https://github.com/elizaOS/eliza/blob/main/packages/core/src/database/CircuitBreaker.ts",children:"source"}),")"]}),"\n",(0,n.jsx)(s.li,{children:"Connection pool management"}),"\n",(0,n.jsx)(s.li,{children:"Error type classification"}),"\n"]}),"\n",(0,n.jsx)(s.hr,{}),"\n",(0,n.jsx)(s.h2,{id:"faq",children:"FAQ"}),"\n",(0,n.jsx)(s.h3,{id:"how-do-i-choose-the-right-adapter",children:"How do I choose the right adapter?"}),"\n",(0,n.jsx)(s.p,{children:"Select based on your deployment needs. Use MongoDB/PostgreSQL for production, SQLite for development, SQL.js/PGLite for browser environments, and Qdrant/Supabase for vector-focused applications."}),"\n",(0,n.jsx)(s.h3,{id:"can-i-switch-adapters-later",children:"Can I switch adapters later?"}),"\n",(0,n.jsxs)(s.p,{children:["Yes, all adapters implement the ",(0,n.jsx)(s.a,{href:"/api/interfaces/IDatabaseAdapter",children:(0,n.jsx)(s.code,{children:"IDatabaseAdapter"})})," interface. Data migration between adapters is possible but requires additional steps."]}),"\n",(0,n.jsx)(s.h3,{id:"how-are-vector-embeddings-handled",children:"How are vector embeddings handled?"}),"\n",(0,n.jsx)(s.p,{children:"Each adapter implements vector storage based on its native capabilities - PostgreSQL/Supabase use native vector types, MongoDB uses array fields with indexes, SQLite uses BLOB storage, and Qdrant uses optimized vector stores."}),"\n",(0,n.jsx)(s.h3,{id:"what-about-data-migration",children:"What about data migration?"}),"\n",(0,n.jsxs)(s.p,{children:["Use the adapter's export/import methods defined in the ",(0,n.jsx)(s.a,{href:"/api/classes/DatabaseAdapter",children:(0,n.jsx)(s.code,{children:"DatabaseAdapter"})})," base class."]}),"\n",(0,n.jsx)(s.h3,{id:"how-do-i-handle-schema-updates",children:"How do I handle schema updates?"}),"\n",(0,n.jsxs)(s.p,{children:["Run migrations using the adapter-specific CLI tools. Each adapter provides its own migration system - check the adapter's README in the ",(0,n.jsx)(s.a,{href:"https://github.com/elizaos-plugins",children:"elizaos-plugins"})," repository."]}),"\n",(0,n.jsx)(s.h3,{id:"how-do-i-fix-database-connection-issues",children:"How do I fix database connection issues?"}),"\n",(0,n.jsx)(s.p,{children:"Check your connection string format, verify the database exists and is accessible, ensure proper adapter configuration, and consider using environment variables for credentials."}),"\n",(0,n.jsx)(s.h3,{id:"how-do-i-resolve-embedding-dimension-mismatch-errors",children:"How do I resolve embedding dimension mismatch errors?"}),"\n",(0,n.jsx)(s.p,{children:"Set USE_OPENAI_EMBEDDING=TRUE in your .env file. Different models use different vector dimensions (e.g., OpenAI uses 1536, some local models use 384). Clear your database when switching embedding models."}),"\n",(0,n.jsx)(s.h3,{id:"how-do-i-clearreset-my-database",children:"How do I clear/reset my database?"}),"\n",(0,n.jsx)(s.p,{children:"Delete the db.sqlite file in your data directory and restart the agent. For production databases, use proper database management tools for cleanup."}),"\n",(0,n.jsx)(s.h3,{id:"which-database-should-i-use-in-production",children:"Which database should I use in production?"}),"\n",(0,n.jsx)(s.p,{children:"PostgreSQL with vector extensions is recommended for production deployments. SQLite works well for development but may not scale as effectively for production loads."}),"\n",(0,n.jsx)(s.h3,{id:"how-do-i-migrate-between-different-database-adapters",children:"How do I migrate between different database adapters?"}),"\n",(0,n.jsx)(s.p,{children:"Use the export/import methods provided by the DatabaseAdapter base class. Each adapter implements these methods for data migration, though you may need to handle schema differences manually."}),"\n",(0,n.jsx)(s.h2,{id:"further-reading",children:"Further Reading"}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsx)(s.li,{children:(0,n.jsx)(s.a,{href:"/eliza/docs/guides/memory-management",children:"Memory Management"})}),"\n",(0,n.jsx)(s.li,{children:(0,n.jsx)(s.a,{href:"/eliza/docs/core/agents",children:"State Management"})}),"\n"]})]})}function h(e={}){const{wrapper:s}={...(0,d.R)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}},28453:(e,s,r)=>{r.d(s,{R:()=>i,x:()=>a});var t=r(96540);const n={},d=t.createContext(n);function i(e){const s=t.useContext(d);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function a(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:i(e.components),t.createElement(d.Provider,{value:s},e.children)}}}]);