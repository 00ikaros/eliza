"use strict";(self.webpackChunkeliza_docs=self.webpackChunkeliza_docs||[]).push([[68677],{11781:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>p,frontMatter:()=>i,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"functions/composeRandomUser","title":"composeRandomUser","description":"@elizaos/core v0.25.8 / composeRandomUser","source":"@site/api/functions/composeRandomUser.md","sourceDirName":"functions","slug":"/functions/composeRandomUser","permalink":"/eliza/api/functions/composeRandomUser","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"defaultSidebar","previous":{"title":"composeContext","permalink":"/eliza/api/functions/composeContext"},"next":{"title":"configureSettings","permalink":"/eliza/api/functions/configureSettings"}}');var o=s(74848),r=s(28453);const i={},c="Function: composeRandomUser()",a={},l=[{value:"Parameters",id:"parameters",level:2},{value:"Returns",id:"returns",level:2},{value:"Example",id:"example",level:2},{value:"Defined in",id:"defined-in",level:2}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.a,{href:"/eliza/api/",children:"@elizaos/core v0.25.8"})," / composeRandomUser"]}),"\n",(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"function-composerandomuser",children:"Function: composeRandomUser()"})}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"composeRandomUser"}),"(",(0,o.jsx)(n.code,{children:"template"}),", ",(0,o.jsx)(n.code,{children:"length"}),"): ",(0,o.jsx)(n.code,{children:"string"})]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"Generates a string with random user names populated in a template."}),"\n",(0,o.jsxs)(n.p,{children:["This function generates a specified number of random user names and populates placeholders\nin the provided template with these names. Placeholders in the template should follow the format ",(0,o.jsx)(n.code,{children:"{{userX}}"}),"\nwhere ",(0,o.jsx)(n.code,{children:"X"})," is the position of the user (e.g., ",(0,o.jsx)(n.code,{children:"{{user1}}"}),", ",(0,o.jsx)(n.code,{children:"{{user2}}"}),")."]}),"\n",(0,o.jsx)(n.h2,{id:"parameters",children:"Parameters"}),"\n",(0,o.jsxs)(n.p,{children:["\u2022 ",(0,o.jsx)(n.strong,{children:"template"}),": ",(0,o.jsx)(n.code,{children:"string"})]}),"\n",(0,o.jsxs)(n.p,{children:["\u2022 ",(0,o.jsx)(n.strong,{children:"length"}),": ",(0,o.jsx)(n.code,{children:"number"})]}),"\n",(0,o.jsx)(n.h2,{id:"returns",children:"Returns"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.code,{children:"string"})}),"\n",(0,o.jsx)(n.p,{children:"The template string with placeholders replaced by random user names."}),"\n",(0,o.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:'// Given a template and a length\nconst template = "Hello, {{user1}}! Meet {{user2}} and {{user3}}.";\nconst length = 3;\n\n// Composing the random user string will result in:\n// "Hello, John! Meet Alice and Bob."\nconst result = composeRandomUser({ template, length });\n'})}),"\n",(0,o.jsx)(n.h2,{id:"defined-in",children:"Defined in"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"https://github.com/elizaOS/eliza/blob/main/packages/core/src/context.ts#L105",children:"packages/core/src/context.ts:105"})})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>c});var t=s(96540);const o={},r=t.createContext(o);function i(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);