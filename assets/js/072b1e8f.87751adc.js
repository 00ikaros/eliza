"use strict";(self.webpackChunk_elizaos_docs=self.webpackChunk_elizaos_docs||[]).push([[87620],{22128:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"core/overview","title":"ElizaOS Documentation","description":"Welcome to ElizaOS - a comprehensive framework for building AI agents with persistent personalities across multiple platforms. ElizaOS provides the architecture, tools, and systems needed to create sophisticated agents that maintain consistent behavior, learn from interactions, and seamlessly integrate with a variety of services.","source":"@site/docs/core/overview.md","sourceDirName":"core","slug":"/","permalink":"/docs/","draft":false,"unlisted":false,"editUrl":"https://github.com/elizaos/eliza/tree/v2-develop/packages/docs/docs/core/overview.md","tags":[],"version":"current","lastUpdatedBy":"madjin","lastUpdatedAt":1742513001000,"sidebarPosition":1,"frontMatter":{"sidebar_position":1,"title":"ElizaOS Documentation","slug":"/"},"sidebar":"tutorialSidebar","previous":{"title":"\ud83d\udc65 Contributing","permalink":"/docs/contributing"},"next":{"title":"Overview","permalink":"/docs/"}}');var r=n(31085),t=n(71184);const o={sidebar_position:1,title:"ElizaOS Documentation",slug:"/"},a="ElizaOS Documentation",c={},l=[{value:"System Architecture",id:"system-architecture",level:2},{value:"How ElizaOS Works",id:"how-elizaos-works",level:3},{value:"Core Components",id:"core-components",level:2},{value:"Intelligence &amp; Behavior",id:"intelligence--behavior",level:2},{value:"Structure &amp; Organization",id:"structure--organization",level:2},{value:"Development &amp; Integration",id:"development--integration",level:2},{value:"Key Concepts",id:"key-concepts",level:2},{value:"Action-Provider-Evaluator Cycle",id:"action-provider-evaluator-cycle",level:3},{value:"Entity-Component Architecture",id:"entity-component-architecture",level:3},{value:"Memory System",id:"memory-system",level:3},{value:"Getting Started",id:"getting-started",level:2},{value:"FAQ",id:"faq",level:2},{value:"Additional Resources",id:"additional-resources",level:2}];function d(e){const s={a:"a",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",mermaid:"mermaid",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,t.R)(),...e.components},{Details:n}=s;return n||function(e,s){throw new Error("Expected "+(s?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.header,{children:(0,r.jsx)(s.h1,{id:"elizaos-documentation",children:"ElizaOS Documentation"})}),"\n",(0,r.jsx)(s.p,{children:"Welcome to ElizaOS - a comprehensive framework for building AI agents with persistent personalities across multiple platforms. ElizaOS provides the architecture, tools, and systems needed to create sophisticated agents that maintain consistent behavior, learn from interactions, and seamlessly integrate with a variety of services."}),"\n",(0,r.jsx)(s.h2,{id:"system-architecture",children:"System Architecture"}),"\n",(0,r.jsx)(s.p,{children:"ElizaOS uses a modular architecture that separates concerns while providing a cohesive framework for AI agent development:"}),"\n",(0,r.jsx)(s.mermaid,{value:'graph TB\n    %% Main Components with vertical orientation\n    User((User)):::user\n\n    %% First Level - Services\n    PlatformServices[Services]:::services\n\n    %% Second Level - Runtime\n    AgentRuntime[Agent Runtime]:::core\n\n    %% Core Processing Components - Side by side\n    subgraph "Core Processing"\n        direction LR\n        Providers[Providers]:::int\n        Actions[Actions]:::int\n        Evaluators[Evaluators]:::int\n    end\n\n    %% Knowledge and DB - Side by side\n    subgraph "Knowledge & Storage"\n        direction LR\n        Knowledge[Knowledge]:::int\n        DB[(Database)]:::db\n    end\n\n    %% Organization Components - Vertical layout\n    subgraph "Organization"\n        direction TB\n        Worlds[Worlds]:::struct\n        Rooms[Rooms]:::struct\n        Entities[Entities]:::struct\n    end\n\n    %% Development Components - Side by side\n    subgraph "Development & Integration"\n        direction LR\n        Plugins[Plugins]:::dev\n        Projects[Projects]:::dev\n        Tasks[Tasks]:::dev\n    end\n\n    %% Main Flow - Vertical emphasis\n    User <--\x3e|Interaction| PlatformServices\n    PlatformServices --\x3e|Process| AgentRuntime\n\n    %% Runtime connections - Simplified\n    AgentRuntime ---|Context| Providers\n    AgentRuntime ---|Behavior| Actions\n    AgentRuntime ---|Analysis| Evaluators\n\n    %% Data connections\n    AgentRuntime <--\x3e|Storage| DB\n    Knowledge --\x3e|Informs| Providers\n\n    %% Structure connections - Clean vertical hierarchy\n    AgentRuntime --\x3e|Manages| Worlds\n    Worlds --\x3e|Contains| Rooms\n    Rooms --\x3e|Has| Entities\n\n    %% Development connections\n    Projects --\x3e|Configure| AgentRuntime\n    Plugins --\x3e|Extend| AgentRuntime\n    Tasks --\x3e|Scheduled by| AgentRuntime\n\n    %% Clickable nodes with links to docs\n    click AgentRuntime "/docs/core/agents" "Learn about Agent Runtime"\n    click PlatformServices "/docs/core/services" "Learn about Services"\n    click DB "/docs/core/database" "Learn about Database Systems"\n    click Actions "/docs/core/actions" "Learn about Actions"\n    click Providers "/docs/core/providers" "Learn about Providers"\n    click Evaluators "/docs/core/evaluators" "Learn about Evaluators"\n    click Knowledge "/docs/core/knowledge" "Learn about Knowledge System"\n    click Worlds "/docs/core/worlds" "Learn about Worlds"\n    click Rooms "/docs/core/rooms" "Learn about Rooms"\n    click Entities "/docs/core/entities" "Learn about Entities"\n    click Plugins "/docs/core/plugins" "Learn about Plugins"\n    click Projects "/docs/core/project" "Learn about Projects"\n    click Tasks "/docs/core/tasks" "Learn about Tasks"\n\n    %% Styling\n    classDef core fill:#3498db,stroke:#2c3e50,stroke-width:1px,color:#fff,font-weight:bold\n    classDef services fill:#9b59b6,stroke:#2c3e50,stroke-width:1px,color:#fff,font-weight:bold\n    classDef db fill:#27ae60,stroke:#2c3e50,stroke-width:1px,color:#fff,font-weight:bold\n    classDef int fill:#e74c3c,stroke:#2c3e50,stroke-width:1px,color:#fff,font-weight:bold\n    classDef struct fill:#f39c12,stroke:#2c3e50,stroke-width:1px,color:#fff,font-weight:bold\n    classDef dev fill:#1abc9c,stroke:#2c3e50,stroke-width:1px,color:#fff,font-weight:bold\n    classDef user fill:#ecf0f1,stroke:#2c3e50,stroke-width:2px,color:#2c3e50,font-weight:bold,border-radius:50%'}),"\n",(0,r.jsx)(s.h3,{id:"how-elizaos-works",children:"How ElizaOS Works"}),"\n",(0,r.jsx)(s.p,{children:"When a user message is received:"}),"\n",(0,r.jsxs)(s.ol,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Service Reception"}),": Platform service (Discord, Telegram, etc.) receives the message"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Runtime Processing"}),": Agent runtime coordinates the response generation"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Context Building"}),": Providers supply relevant context (time, recent messages, knowledge)"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Action Selection"}),": The agent evaluates and selects appropriate actions"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Response Generation"}),": The chosen action generates a response"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Learning & Reflection"}),": Evaluators analyze the conversation for insights and learning"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Memory Storage"}),": New information is stored in the database"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Response Delivery"}),": The response is sent back through the service"]}),"\n"]}),"\n",(0,r.jsx)(s.p,{children:"This creates a continuous cycle of interaction, reflection, and improvement that allows agents to maintain consistent personalities while adapting to new information."}),"\n",(0,r.jsx)(s.h2,{id:"core-components",children:"Core Components"}),"\n",(0,r.jsx)("div",{className:"container",children:(0,r.jsxs)("div",{className:"row",children:[(0,r.jsx)("div",{className:"col col--4 margin-bottom--lg",children:(0,r.jsxs)("div",{className:"card",children:[(0,r.jsx)("div",{className:"card__image",children:(0,r.jsx)("img",{src:"/img/agentruntime.jpg?text=\ud83d\udd0d",alt:"Overview"})}),(0,r.jsxs)("div",{className:"card__body",children:[(0,r.jsx)("h3",{children:"\ud83e\udd16 Agent Runtime"}),(0,r.jsx)("p",{children:"The central system that orchestrates agent behavior, processes messages, manages state, and coordinates all other components."})]}),(0,r.jsx)("div",{className:"card__footer",children:(0,r.jsx)("a",{className:"button button--primary button--block",href:"/docs/core/agents",children:"Agent Runtime"})})]})}),(0,r.jsx)("div",{className:"col col--4 margin-bottom--lg",children:(0,r.jsxs)("div",{className:"card",children:[(0,r.jsx)("div",{className:"card__image",children:(0,r.jsx)("img",{src:"/img/services.jpg?text=\ud83d\udd0d",alt:"Overview"})}),(0,r.jsxs)("div",{className:"card__body",children:[(0,r.jsx)("h3",{children:"\ud83d\udcda Services"}),(0,r.jsx)("p",{children:"Platform-specific integrations that enable agents to communicate across Discord, Twitter, Telegram, and other channels."})]}),(0,r.jsx)("div",{className:"card__footer",children:(0,r.jsx)("a",{className:"button button--primary button--block",href:"/docs/core/services",children:"Services"})})]})}),(0,r.jsx)("div",{className:"col col--4 margin-bottom--lg",children:(0,r.jsxs)("div",{className:"card",children:[(0,r.jsx)("div",{className:"card__image",children:(0,r.jsx)("img",{src:"/img/database.jpg?text=\ud83d\udd0d",alt:"Overview"})}),(0,r.jsxs)("div",{className:"card__body",children:[(0,r.jsx)("h3",{children:"\ud83d\udcbe Database"}),(0,r.jsx)("p",{children:"Persistent storage for memories, entity data, relationships, and configuration using vector search capabilities."})]}),(0,r.jsx)("div",{className:"card__footer",children:(0,r.jsx)("a",{className:"button button--primary button--block",href:"/docs/core/database",children:"Database"})})]})})]})}),"\n",(0,r.jsx)(s.h2,{id:"intelligence--behavior",children:"Intelligence & Behavior"}),"\n",(0,r.jsx)("div",{className:"container",children:(0,r.jsxs)("div",{className:"row",children:[(0,r.jsx)("div",{className:"col col--3 margin-bottom--lg",children:(0,r.jsxs)("div",{className:"card",children:[(0,r.jsx)("div",{className:"card__image",children:(0,r.jsx)("img",{src:"/img/actions.jpg?text=\ud83d\udd0d",alt:"Overview"})}),(0,r.jsxs)("div",{className:"card__body",children:[(0,r.jsx)("h3",{children:"\u26a1 Actions"}),(0,r.jsx)("p",{children:"Executable capabilities that define how agents respond to messages and interact with external systems."})]}),(0,r.jsx)("div",{className:"card__footer",children:(0,r.jsx)("a",{className:"button button--primary button--block",href:"/docs/core/actions",children:"Actions"})})]})}),(0,r.jsx)("div",{className:"col col--3 margin-bottom--lg",children:(0,r.jsxs)("div",{className:"card",children:[(0,r.jsx)("div",{className:"card__image",children:(0,r.jsx)("img",{src:"/img/providers.jpg?text=\ud83d\udd0d",alt:"Overview"})}),(0,r.jsxs)("div",{className:"card__body",children:[(0,r.jsx)("h3",{children:"\ud83d\udd0c Providers"}),(0,r.jsx)("p",{children:"Data sources that supply contextual information to inform agent decision-making in real-time."})]}),(0,r.jsx)("div",{className:"card__footer",children:(0,r.jsx)("a",{className:"button button--primary button--block",href:"/docs/core/providers",children:"Providers"})})]})}),(0,r.jsx)("div",{className:"col col--3 margin-bottom--lg",children:(0,r.jsxs)("div",{className:"card",children:[(0,r.jsx)("div",{className:"card__image",children:(0,r.jsx)("img",{src:"/img/evaluators.jpg?text=\ud83d\udd0d",alt:"Overview"})}),(0,r.jsxs)("div",{className:"card__body",children:[(0,r.jsx)("h3",{children:"\ud83d\udcca Evaluators"}),(0,r.jsx)("p",{children:"Analytical systems that process conversations to extract insights, learn facts, and improve future responses."})]}),(0,r.jsx)("div",{className:"card__footer",children:(0,r.jsx)("a",{className:"button button--primary button--block",href:"/docs/core/evaluators",children:"Evaluators"})})]})}),(0,r.jsx)("div",{className:"col col--3 margin-bottom--lg",children:(0,r.jsxs)("div",{className:"card",children:[(0,r.jsx)("div",{className:"card__image",children:(0,r.jsx)("img",{src:"/img/knowledge.jpg?text=\ud83d\udd0d",alt:"Overview"})}),(0,r.jsxs)("div",{className:"card__body",children:[(0,r.jsx)("h3",{children:"\ud83e\udde0 Knowledge"}),(0,r.jsx)("p",{children:"RAG system for document processing, semantic search, and context-aware memory retrieval."})]}),(0,r.jsx)("div",{className:"card__footer",children:(0,r.jsx)("a",{className:"button button--primary button--block",href:"/docs/core/knowledge",children:"Knowledge"})})]})})]})}),"\n",(0,r.jsx)(s.h2,{id:"structure--organization",children:"Structure & Organization"}),"\n",(0,r.jsx)("div",{className:"container",children:(0,r.jsxs)("div",{className:"row",children:[(0,r.jsx)("div",{className:"col col--4 margin-bottom--lg",children:(0,r.jsxs)("div",{className:"card",children:[(0,r.jsx)("div",{className:"card__image",children:(0,r.jsx)("img",{src:"/img/worlds.jpg?text=\ud83d\udd0d",alt:"Overview"})}),(0,r.jsxs)("div",{className:"card__body",children:[(0,r.jsx)("h3",{children:"\ud83c\udf10 Worlds"}),(0,r.jsx)("p",{children:"Collection spaces that organize entities and rooms into coherent environments (like a Discord server)."})]}),(0,r.jsx)("div",{className:"card__footer",children:(0,r.jsx)("a",{className:"button button--primary button--block",href:"/docs/core/worlds",children:"Worlds"})})]})}),(0,r.jsx)("div",{className:"col col--4 margin-bottom--lg",children:(0,r.jsxs)("div",{className:"card",children:[(0,r.jsx)("div",{className:"card__image",children:(0,r.jsx)("img",{src:"/img/rooms.jpg?text=\ud83d\udd0d",alt:"Overview"})}),(0,r.jsxs)("div",{className:"card__body",children:[(0,r.jsx)("h3",{children:"\ud83d\udcac Rooms"}),(0,r.jsx)("p",{children:"Conversation spaces where entities interact through messages (channels, DMs, threads)."})]}),(0,r.jsx)("div",{className:"card__footer",children:(0,r.jsx)("a",{className:"button button--primary button--block",href:"/docs/core/rooms",children:"Rooms"})})]})}),(0,r.jsx)("div",{className:"col col--4 margin-bottom--lg",children:(0,r.jsxs)("div",{className:"card",children:[(0,r.jsx)("div",{className:"card__image",children:(0,r.jsx)("img",{src:"/img/entities.jpg?text=\ud83d\udd0d",alt:"Overview"})}),(0,r.jsxs)("div",{className:"card__body",children:[(0,r.jsx)("h3",{children:"\ud83d\udc64 Entities"}),(0,r.jsx)("p",{children:"Representation of users, agents, and other participants using a flexible entity-component architecture."})]}),(0,r.jsx)("div",{className:"card__footer",children:(0,r.jsx)("a",{className:"button button--primary button--block",href:"/docs/core/entities",children:"Entities"})})]})})]})}),"\n",(0,r.jsx)(s.h2,{id:"development--integration",children:"Development & Integration"}),"\n",(0,r.jsx)("div",{className:"container",children:(0,r.jsxs)("div",{className:"row",children:[(0,r.jsx)("div",{className:"col col--4 margin-bottom--lg",children:(0,r.jsxs)("div",{className:"card",children:[(0,r.jsx)("div",{className:"card__image",children:(0,r.jsx)("img",{src:"/img/plugins.jpg?text=\ud83d\udd0d",alt:"Overview"})}),(0,r.jsxs)("div",{className:"card__body",children:[(0,r.jsx)("h3",{children:"\ud83e\udde9 Plugins"}),(0,r.jsx)("p",{children:"Modular extensions that add new capabilities, integrations, and behaviors to agents."})]}),(0,r.jsx)("div",{className:"card__footer",children:(0,r.jsx)("a",{className:"button button--primary button--block",href:"/docs/core/plugins",children:"Plugins"})})]})}),(0,r.jsx)("div",{className:"col col--4 margin-bottom--lg",children:(0,r.jsxs)("div",{className:"card",children:[(0,r.jsx)("div",{className:"card__image",children:(0,r.jsx)("img",{src:"/img/project.jpg?text=\ud83d\udd0d",alt:"Overview"})}),(0,r.jsxs)("div",{className:"card__body",children:[(0,r.jsx)("h3",{children:"\ud83d\udcdd Projects"}),(0,r.jsx)("p",{children:"Organizational structure for defining and deploying one or more agents with their configuration."})]}),(0,r.jsx)("div",{className:"card__footer",children:(0,r.jsx)("a",{className:"button button--primary button--block",href:"/docs/core/project",children:"Projects"})})]})}),(0,r.jsx)("div",{className:"col col--4 margin-bottom--lg",children:(0,r.jsxs)("div",{className:"card",children:[(0,r.jsx)("div",{className:"card__image",children:(0,r.jsx)("img",{src:"/img/tasks.jpg?text=\ud83d\udd0d",alt:"Overview"})}),(0,r.jsxs)("div",{className:"card__body",children:[(0,r.jsx)("h3",{children:"\ud83d\udccb Tasks"}),(0,r.jsx)("p",{children:"System for managing deferred, scheduled, and repeating operations across conversations."})]}),(0,r.jsx)("div",{className:"card__footer",children:(0,r.jsx)("a",{className:"button button--primary button--block",href:"/docs/core/tasks",children:"Tasks"})})]})})]})}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"key-concepts",children:"Key Concepts"}),"\n",(0,r.jsx)(s.h3,{id:"action-provider-evaluator-cycle",children:"Action-Provider-Evaluator Cycle"}),"\n",(0,r.jsx)(s.p,{children:"The core of the ElizaOS system operates as a continuous cycle:"}),"\n",(0,r.jsxs)(s.ol,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Providers"})," gather context before response generation"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Actions"})," determine what the agent can do and are executed to generate responses"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Evaluators"})," analyze conversations after responses to extract insights"]}),"\n",(0,r.jsx)(s.li,{children:"These insights become part of the agent's memory"}),"\n",(0,r.jsxs)(s.li,{children:["Future ",(0,r.jsx)(s.strong,{children:"Providers"})," access this memory to inform new responses"]}),"\n"]}),"\n",(0,r.jsx)(s.p,{children:"This creates a virtuous cycle where agents continuously learn and improve from interactions."}),"\n",(0,r.jsx)(s.h3,{id:"entity-component-architecture",children:"Entity-Component Architecture"}),"\n",(0,r.jsx)(s.p,{children:"ElizaOS uses an entity-component architecture for flexible data modeling:"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Entities"})," are base objects with unique IDs (users, agents, etc.)"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Components"})," are pieces of data attached to entities (profiles, settings, etc.)"]}),"\n",(0,r.jsx)(s.li,{children:"This approach allows for dynamic composition without complex inheritance hierarchies"}),"\n"]}),"\n",(0,r.jsx)(s.h3,{id:"memory-system",children:"Memory System"}),"\n",(0,r.jsx)(s.p,{children:"The memory system in ElizaOS provides:"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Vector-based semantic search"})," for finding relevant memories"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Multi-level memory types"})," (messages, facts, knowledge)"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Temporal awareness"})," through timestamped memories"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Cross-platform continuity"})," while maintaining appropriate context boundaries"]}),"\n"]}),"\n",(0,r.jsx)(s.h2,{id:"getting-started",children:"Getting Started"}),"\n",(0,r.jsx)(s.p,{children:"If you're new to ElizaOS, we recommend this learning path:"}),"\n",(0,r.jsxs)(s.ol,{children:["\n",(0,r.jsx)(s.li,{children:"Start with this overview to understand the system architecture"}),"\n",(0,r.jsxs)(s.li,{children:["Explore the ",(0,r.jsx)(s.a,{href:"/docs/core/agents",children:"Agent Runtime"})," to understand the core system"]}),"\n",(0,r.jsxs)(s.li,{children:["Learn about ",(0,r.jsx)(s.a,{href:"/docs/core/project",children:"Projects"})," to set up your development environment"]}),"\n",(0,r.jsxs)(s.li,{children:["Understand how ",(0,r.jsx)(s.a,{href:"/docs/core/actions",children:"Actions"})," and ",(0,r.jsx)(s.a,{href:"/docs/core/providers",children:"Providers"})," work together"]}),"\n",(0,r.jsxs)(s.li,{children:["Explore ",(0,r.jsx)(s.a,{href:"/docs/core/services",children:"Services"})," to connect with external platforms"]}),"\n",(0,r.jsxs)(s.li,{children:["Dive into ",(0,r.jsx)(s.a,{href:"/docs/core/plugins",children:"Plugins"})," to extend functionality"]}),"\n"]}),"\n",(0,r.jsx)(s.h2,{id:"faq",children:"FAQ"}),"\n",(0,r.jsxs)(n,{children:[(0,r.jsx)("summary",{children:(0,r.jsx)("b",{children:"What's the difference between Actions, Evaluators, and Providers?"})}),(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Actions"})," define what an agent can do and are executed during response generation. ",(0,r.jsx)(s.strong,{children:"Evaluators"})," analyze conversations after they happen to extract insights and improve future responses. ",(0,r.jsx)(s.strong,{children:"Providers"})," supply contextual information before the agent decides how to respond."]})]}),"\n",(0,r.jsxs)(n,{children:[(0,r.jsx)("summary",{children:(0,r.jsx)("b",{children:"How does ElizaOS handle cross-platform conversation context?"})}),(0,r.jsx)(s.p,{children:"ElizaOS maintains separate conversation contexts for different platforms by default, but shares entity relationships and learned facts across platforms. This ensures agents maintain a consistent understanding of users while respecting platform-specific conversation boundaries."})]}),"\n",(0,r.jsxs)(n,{children:[(0,r.jsx)("summary",{children:(0,r.jsx)("b",{children:"How does the memory system work?"})}),(0,r.jsx)(s.p,{children:"Memory is organized into different types (messages, facts, knowledge) and stored with vector embeddings for semantic search. This allows agents to retrieve relevant memories based on context rather than just recency, creating more natural conversations."})]}),"\n",(0,r.jsxs)(n,{children:[(0,r.jsx)("summary",{children:(0,r.jsx)("b",{children:"What's the relationship between Worlds, Rooms, and Entities?"})}),(0,r.jsx)(s.p,{children:"Worlds are container spaces (like a Discord server) that can have multiple Rooms (channels, DMs). Entities (users, agents) participate in Rooms within Worlds. This hierarchical structure mirrors real-world platforms while providing a consistent abstraction."})]}),"\n",(0,r.jsxs)(n,{children:[(0,r.jsx)("summary",{children:(0,r.jsx)("b",{children:"How extensible is ElizaOS?"})}),(0,r.jsx)(s.p,{children:"ElizaOS is highly extensible through its plugin system. You can create custom actions, providers, evaluators, services, and more to extend functionality. The architecture is designed to be modular and composable at every level."})]}),"\n",(0,r.jsx)(s.h2,{id:"additional-resources",children:"Additional Resources"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.a,{href:"/api",children:"API Reference"})," - Detailed API documentation for developers"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.a,{href:"https://github.com/elizaos/eliza",children:"GitHub Repository"})," - Source code and contributions"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.a,{href:"/packages",children:"Package Showcase"})," - Explore available plugins and extensions"]}),"\n"]})]})}function h(e={}){const{wrapper:s}={...(0,t.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},71184:(e,s,n)=>{n.d(s,{R:()=>o,x:()=>a});var i=n(14041);const r={},t=i.createContext(r);function o(e){const s=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function a(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(t.Provider,{value:s},e.children)}}}]);