"use strict";(self.webpackChunkeliza_docs=self.webpackChunkeliza_docs||[]).push([[51149],{20556:e=>{e.exports=JSON.parse('{"version":{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"link","label":"\ud83d\ude80 Introduction","href":"/eliza/docs/intro","docId":"intro","unlisted":false},{"type":"category","label":"\ud83c\udfc1 Getting Started","items":[{"type":"link","label":"\u2b50 Quick Start","href":"/eliza/docs/quickstart","docId":"quickstart","unlisted":false},{"type":"link","label":"Start Script","href":"/eliza/docs/guides/start-script","docId":"guides/start-script","unlisted":false},{"type":"link","label":"\u2753 FAQ","href":"/eliza/docs/faq","docId":"faq","unlisted":false},{"type":"category","label":"Tutorials","items":[{"type":"category","label":"AI Agent Dev School","items":[{"type":"link","label":"Overview","href":"/eliza/docs/","docId":"tutorials/index","unlisted":false},{"type":"link","label":"Part 1","href":"/eliza/docs/tutorials/part1","docId":"tutorials/part1","unlisted":false},{"type":"link","label":"Part 2","href":"/eliza/docs/tutorials/part2","docId":"tutorials/part2","unlisted":false},{"type":"link","label":"Part 3","href":"/eliza/docs/tutorials/part3","docId":"tutorials/part3","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"link","label":"Clone Yourself in 10min","href":"/eliza/docs/tutorials/nader_tutorial_10min","docId":"tutorials/nader_tutorial_10min","unlisted":false},{"type":"link","label":"Build Social Agents in 15min","href":"/eliza/docs/tutorials/nader_tutorial_15min","docId":"tutorials/nader_tutorial_15min","unlisted":false},{"type":"link","label":"Build a Plugin in 35min","href":"/eliza/docs/tutorials/nader_tutorial_35min","docId":"tutorials/nader_tutorial_35min","unlisted":false}],"collapsed":true,"collapsible":true}],"collapsed":false,"collapsible":true},{"type":"category","label":"\ud83e\udde0 Core Concepts","collapsed":false,"items":[{"type":"link","label":"Overview","href":"/eliza/docs/core/overview","docId":"core/overview","unlisted":false},{"type":"link","label":"Character Files","href":"/eliza/docs/core/characterfile","docId":"core/characterfile","unlisted":false},{"type":"link","label":"Agents","href":"/eliza/docs/core/agents","docId":"core/agents","unlisted":false},{"type":"link","label":"Providers","href":"/eliza/docs/core/providers","docId":"core/providers","unlisted":false},{"type":"link","label":"Actions","href":"/eliza/docs/core/actions","docId":"core/actions","unlisted":false},{"type":"link","label":"Evaluators","href":"/eliza/docs/core/evaluators","docId":"core/evaluators","unlisted":false}],"collapsible":true},{"type":"category","label":"\ud83d\udcd8 Guides","collapsed":false,"items":[{"type":"link","label":"Configuration","href":"/eliza/docs/guides/configuration","docId":"guides/configuration","unlisted":false},{"type":"link","label":"Docker Setup","href":"/eliza/docs/guides/docker-setup","docId":"guides/docker-setup","unlisted":false},{"type":"link","label":"Deployment","href":"/eliza/docs/guides/remote-deployment","docId":"guides/remote-deployment","unlisted":false},{"type":"link","label":"Fine-tuning","href":"/eliza/docs/guides/fine-tuning","docId":"guides/fine-tuning","unlisted":false},{"type":"link","label":"Advanced Usage","href":"/eliza/docs/guides/advanced","docId":"guides/advanced","unlisted":false},{"type":"link","label":"Secrets Management","href":"/eliza/docs/guides/secrets-management","docId":"guides/secrets-management","unlisted":false},{"type":"link","label":"Memory Management","href":"/eliza/docs/guides/memory-management","docId":"guides/memory-management","unlisted":false},{"type":"link","label":"Local Development","href":"/eliza/docs/guides/local-development","docId":"guides/local-development","unlisted":false},{"type":"link","label":"WSL Setup","href":"/eliza/docs/guides/wsl","docId":"guides/wsl","unlisted":false}],"collapsible":true},{"type":"category","label":"\ud83c\udf93 Advanced Topics","collapsed":false,"items":[{"type":"link","label":"Infrastructure","href":"/eliza/docs/advanced/infrastructure","docId":"advanced/infrastructure","unlisted":false},{"type":"link","label":"Trust Engine","href":"/eliza/docs/advanced/trust-engine","docId":"advanced/trust-engine","unlisted":false},{"type":"link","label":"Autonomous Trading","href":"/eliza/docs/advanced/autonomous-trading","docId":"advanced/autonomous-trading","unlisted":false},{"type":"link","label":"Eliza in TEE","href":"/eliza/docs/advanced/eliza-in-tee","docId":"advanced/eliza-in-tee","unlisted":false},{"type":"link","label":"Verified Inference","href":"/eliza/docs/advanced/verified-inference","docId":"advanced/verified-inference","unlisted":false}],"collapsible":true},{"type":"category","label":"\ud83d\udce6 Packages","collapsed":false,"items":[{"type":"link","label":"Core Package","href":"/eliza/docs/packages/core","docId":"packages/core","unlisted":false},{"type":"link","label":"Database Adapters","href":"/eliza/docs/packages/adapters","docId":"packages/adapters","unlisted":false},{"type":"link","label":"Client Packages","href":"/eliza/docs/packages/clients","docId":"packages/clients","unlisted":false},{"type":"link","label":"Agent Package","href":"/eliza/docs/packages/agent","docId":"packages/agent","unlisted":false},{"type":"link","label":"Plugin System","href":"/eliza/docs/packages/plugins","docId":"packages/plugins","unlisted":false}],"collapsible":true}]},"docs":{"advanced/autonomous-trading":{"id":"advanced/autonomous-trading","title":"\ud83d\udcc8 Autonomous Trading","description":"Overview","sidebar":"tutorialSidebar"},"advanced/eliza-in-tee":{"id":"advanced/eliza-in-tee","title":"\ud83e\uded6 Eliza in TEE","description":"Overview","sidebar":"tutorialSidebar"},"advanced/infrastructure":{"id":"advanced/infrastructure","title":"\ud83c\udfd7\ufe0f Infrastructure Guide","description":"Overview","sidebar":"tutorialSidebar"},"advanced/trust-engine":{"id":"advanced/trust-engine","title":"\ud83e\udd1d Trust Engine","description":"Overview","sidebar":"tutorialSidebar"},"advanced/verified-inference":{"id":"advanced/verified-inference","title":"\ud83e\udeaa Verified Inference","description":"Overview","sidebar":"tutorialSidebar"},"api/classes/AgentRuntime":{"id":"api/classes/AgentRuntime","title":"Class: AgentRuntime","description":"Represents the runtime environment for an agent, handling message processing,"},"api/classes/DatabaseAdapter":{"id":"api/classes/DatabaseAdapter","title":"Class: abstract DatabaseAdapter","description":"An abstract class representing a database adapter for managing various entities"},"api/classes/MemoryManager":{"id":"api/classes/MemoryManager","title":"Class: MemoryManager","description":"Manage memories in the database."},"api/classes/Service":{"id":"api/classes/Service","title":"Class: abstract Service","description":"Extended by"},"api/enumerations/Clients":{"id":"api/enumerations/Clients","title":"Enumeration: Clients","description":"Enumeration Members"},"api/enumerations/GoalStatus":{"id":"api/enumerations/GoalStatus","title":"Enumeration: GoalStatus","description":"Enumeration Members"},"api/enumerations/ModelClass":{"id":"api/enumerations/ModelClass","title":"Enumeration: ModelClass","description":"Enumeration Members"},"api/enumerations/ModelProviderName":{"id":"api/enumerations/ModelProviderName","title":"Enumeration: ModelProviderName","description":"Enumeration Members"},"api/enumerations/ServiceType":{"id":"api/enumerations/ServiceType","title":"Enumeration: ServiceType","description":"Enumeration Members"},"api/functions/addHeader":{"id":"api/functions/addHeader","title":"Function: addHeader()","description":"addHeader(header, body): string"},"api/functions/composeActionExamples":{"id":"api/functions/composeActionExamples","title":"Function: composeActionExamples()","description":"composeActionExamples(actionsData, count): string"},"api/functions/composeContext":{"id":"api/functions/composeContext","title":"Function: composeContext()","description":"composeContext(params): string"},"api/functions/createGoal":{"id":"api/functions/createGoal","title":"Function: createGoal()","description":"createGoal(namedParameters): Promise\\\\"},"api/functions/createRelationship":{"id":"api/functions/createRelationship","title":"Function: createRelationship()","description":"createRelationship(namedParameters): Promise\\\\"},"api/functions/embed":{"id":"api/functions/embed","title":"Function: embed()","description":"embed(runtime, input): Promise\\\\"},"api/functions/findNearestEnvFile":{"id":"api/functions/findNearestEnvFile","title":"Function: findNearestEnvFile()","description":"findNearestEnvFile(startDir?): string"},"api/functions/formatActionNames":{"id":"api/functions/formatActionNames","title":"Function: formatActionNames()","description":"formatActionNames(actions): string"},"api/functions/formatActions":{"id":"api/functions/formatActions","title":"Function: formatActions()","description":"formatActions(actions): string"},"api/functions/formatActors":{"id":"api/functions/formatActors","title":"Function: formatActors()","description":"formatActors(actors): string"},"api/functions/formatEvaluatorExampleDescriptions":{"id":"api/functions/formatEvaluatorExampleDescriptions","title":"Function: formatEvaluatorExampleDescriptions()","description":"formatEvaluatorExampleDescriptions(evaluators): string"},"api/functions/formatEvaluatorExamples":{"id":"api/functions/formatEvaluatorExamples","title":"Function: formatEvaluatorExamples()","description":"formatEvaluatorExamples(evaluators): string"},"api/functions/formatEvaluatorNames":{"id":"api/functions/formatEvaluatorNames","title":"Function: formatEvaluatorNames()","description":"formatEvaluatorNames(evaluators): string"},"api/functions/formatEvaluators":{"id":"api/functions/formatEvaluators","title":"Function: formatEvaluators()","description":"formatEvaluators(evaluators): string"},"api/functions/formatGoalsAsString":{"id":"api/functions/formatGoalsAsString","title":"Function: formatGoalsAsString()","description":"formatGoalsAsString(namedParameters): string"},"api/functions/formatMessages":{"id":"api/functions/formatMessages","title":"Function: formatMessages()","description":"formatMessages(namedParameters): string"},"api/functions/formatPosts":{"id":"api/functions/formatPosts","title":"Function: formatPosts()","description":"formatPosts(namedParameters): string"},"api/functions/formatRelationships":{"id":"api/functions/formatRelationships","title":"Function: formatRelationships()","description":"formatRelationships(namedParameters): Promise\\\\"},"api/functions/formatTimestamp":{"id":"api/functions/formatTimestamp","title":"Function: formatTimestamp()","description":"formatTimestamp(messageDate): string"},"api/functions/generateCaption":{"id":"api/functions/generateCaption","title":"Function: generateCaption()","description":"generateCaption(data, runtime): Promise\\\\"},"api/functions/generateImage":{"id":"api/functions/generateImage","title":"Function: generateImage()","description":"generateImage(data, runtime): Promise\\\\"},"api/functions/generateMessageResponse":{"id":"api/functions/generateMessageResponse","title":"Function: generateMessageResponse()","description":"generateMessageResponse(opts): Promise\\\\"},"api/functions/generateObject":{"id":"api/functions/generateObject","title":"Function: generateObject()","description":"generateObject(namedParameters): Promise\\\\"},"api/functions/generateObjectArray":{"id":"api/functions/generateObjectArray","title":"Function: generateObjectArray()","description":"generateObjectArray(namedParameters): Promise\\\\"},"api/functions/generateShouldRespond":{"id":"api/functions/generateShouldRespond","title":"Function: generateShouldRespond()","description":"generateShouldRespond(opts): Promise\\\\"},"api/functions/generateText":{"id":"api/functions/generateText","title":"Function: generateText()","description":"generateText(opts): Promise\\\\"},"api/functions/generateTextArray":{"id":"api/functions/generateTextArray","title":"Function: generateTextArray()","description":"generateTextArray(opts): Promise\\\\"},"api/functions/generateTrueOrFalse":{"id":"api/functions/generateTrueOrFalse","title":"Function: generateTrueOrFalse()","description":"generateTrueOrFalse(opts): Promise\\\\"},"api/functions/getActorDetails":{"id":"api/functions/getActorDetails","title":"Function: getActorDetails()","description":"getActorDetails(namedParameters): Promise\\\\"},"api/functions/getEndpoint":{"id":"api/functions/getEndpoint","title":"Function: getEndpoint()","description":"getEndpoint(provider): string"},"api/functions/getGoals":{"id":"api/functions/getGoals","title":"Function: getGoals()","description":"getGoals(namedParameters): Promise\\\\"},"api/functions/getModel":{"id":"api/functions/getModel","title":"Function: getModel()","description":"getModel(provider, type): string"},"api/functions/getProviders":{"id":"api/functions/getProviders","title":"Function: getProviders()","description":"getProviders(runtime, message, state?): Promise\\\\"},"api/functions/getRelationship":{"id":"api/functions/getRelationship","title":"Function: getRelationship()","description":"getRelationship(namedParameters): Promise\\\\"},"api/functions/getRelationships":{"id":"api/functions/getRelationships","title":"Function: getRelationships()","description":"getRelationships(namedParameters): Promise\\\\"},"api/functions/loadEnvConfig":{"id":"api/functions/loadEnvConfig","title":"Function: loadEnvConfig()","description":"loadEnvConfig(): ProcessEnv"},"api/functions/retrieveCachedEmbedding":{"id":"api/functions/retrieveCachedEmbedding","title":"Function: retrieveCachedEmbedding()","description":"retrieveCachedEmbedding(runtime, input): Promise\\\\"},"api/functions/splitChunks":{"id":"api/functions/splitChunks","title":"Function: splitChunks()","description":"splitChunks(content, chunkSize, bleed): Promise\\\\"},"api/functions/trimTokens":{"id":"api/functions/trimTokens","title":"Function: trimTokens()","description":"trimTokens(context, maxTokens, model): any"},"api/functions/updateGoal":{"id":"api/functions/updateGoal","title":"Function: updateGoal()","description":"updateGoal(namedParameters): Promise\\\\"},"api/globals":{"id":"api/globals","title":"@elizaos/core","description":"Enumerations"},"api/index":{"id":"api/index","title":"Eliza","description":"For Chinese Version: \u4e2d\u6587\u8bf4\u660e"},"api/interfaces/Account":{"id":"api/interfaces/Account","title":"Interface: Account","description":"Represents a user, including their name, details, and a unique identifier."},"api/interfaces/Action":{"id":"api/interfaces/Action","title":"Interface: Action","description":"Represents an action that the agent can perform, including conditions for its use, a description, examples, a handler function, and a validation function."},"api/interfaces/ActionExample":{"id":"api/interfaces/ActionExample","title":"Interface: ActionExample","description":"Represents an example of content, typically used for demonstrating or testing purposes. Includes user, content, optional action, and optional source."},"api/interfaces/Actor":{"id":"api/interfaces/Actor","title":"Interface: Actor","description":"Represents an actor in the conversation, which could be a user or the agent itself, including their name, details (such as tagline, summary, and quote), and a unique identifier."},"api/interfaces/Content":{"id":"api/interfaces/Content","title":"Interface: Content","description":"Represents the content of a message, including its main text (content), any associated action (action), and the source of the content (source), if applicable."},"api/interfaces/ConversationExample":{"id":"api/interfaces/ConversationExample","title":"Interface: ConversationExample","description":"Represents an example of content, typically used for demonstrating or testing purposes. Includes user, content, optional action, and optional source."},"api/interfaces/EvaluationExample":{"id":"api/interfaces/EvaluationExample","title":"Interface: EvaluationExample","description":"Represents an example for evaluation, including the context, an array of message examples, and the expected outcome."},"api/interfaces/Evaluator":{"id":"api/interfaces/Evaluator","title":"Interface: Evaluator","description":"Represents an evaluator, which is used to assess and guide the agent\'s responses based on the current context and state."},"api/interfaces/Goal":{"id":"api/interfaces/Goal","title":"Interface: Goal","description":"Represents a goal, which is a higher-level aim composed of one or more objectives. Goals are tracked to measure progress or achievements within the conversation or system."},"api/interfaces/IAgentRuntime":{"id":"api/interfaces/IAgentRuntime","title":"Interface: IAgentRuntime","description":"Properties"},"api/interfaces/IBrowserService":{"id":"api/interfaces/IBrowserService","title":"Interface: IBrowserService","description":"Extends"},"api/interfaces/IDatabaseAdapter":{"id":"api/interfaces/IDatabaseAdapter","title":"Interface: IDatabaseAdapter","description":"Properties"},"api/interfaces/IImageDescriptionService":{"id":"api/interfaces/IImageDescriptionService","title":"Interface: IImageDescriptionService","description":"Extends"},"api/interfaces/IMemoryManager":{"id":"api/interfaces/IMemoryManager","title":"Interface: IMemoryManager","description":"Properties"},"api/interfaces/IPdfService":{"id":"api/interfaces/IPdfService","title":"Interface: IPdfService","description":"Extends"},"api/interfaces/ISpeechService":{"id":"api/interfaces/ISpeechService","title":"Interface: ISpeechService","description":"Extends"},"api/interfaces/ITextGenerationService":{"id":"api/interfaces/ITextGenerationService","title":"Interface: ITextGenerationService","description":"Extends"},"api/interfaces/ITranscriptionService":{"id":"api/interfaces/ITranscriptionService","title":"Interface: ITranscriptionService","description":"Extends"},"api/interfaces/IVideoService":{"id":"api/interfaces/IVideoService","title":"Interface: IVideoService","description":"Extends"},"api/interfaces/Memory":{"id":"api/interfaces/Memory","title":"Interface: Memory","description":"Represents a memory record, which could be a message or any other piece of information remembered by the system, including its content, associated user IDs, and optionally, its embedding vector for similarity comparisons."},"api/interfaces/MessageExample":{"id":"api/interfaces/MessageExample","title":"Interface: MessageExample","description":"Represents an example of a message, typically used for demonstrating or testing purposes, including optional content and action."},"api/interfaces/Objective":{"id":"api/interfaces/Objective","title":"Interface: Objective","description":"Represents an objective within a goal, detailing what needs to be achieved and whether it has been completed."},"api/interfaces/Participant":{"id":"api/interfaces/Participant","title":"Interface: Participant","description":"Represents a participant in a room, including their ID and account details."},"api/interfaces/Provider":{"id":"api/interfaces/Provider","title":"Interface: Provider","description":"Represents a provider, which is used to retrieve information or perform actions on behalf of the agent, such as fetching data from an external API or service."},"api/interfaces/Relationship":{"id":"api/interfaces/Relationship","title":"Interface: Relationship","description":"Represents a relationship between two users, including their IDs, the status of the relationship, and the room ID in which the relationship is established."},"api/interfaces/Room":{"id":"api/interfaces/Room","title":"Interface: Room","description":"Represents a room or conversation context, including its ID and a list of participants."},"api/interfaces/State":{"id":"api/interfaces/State","title":"Interface: State","description":"Represents the state of the conversation or context in which the agent is operating, including information about users, messages, goals, and other relevant data."},"api/type-aliases/Character":{"id":"api/type-aliases/Character","title":"Type Alias: Character","description":"Character: object"},"api/type-aliases/Client":{"id":"api/type-aliases/Client","title":"Type Alias: Client","description":"Client: object"},"api/type-aliases/Handler":{"id":"api/type-aliases/Handler","title":"Type Alias: Handler()","description":"Handler: (runtime, message, state?, options?, callback?) => Promise\\\\"},"api/type-aliases/HandlerCallback":{"id":"api/type-aliases/HandlerCallback","title":"Type Alias: HandlerCallback()","description":"HandlerCallback: (response, files?) => Promise\\\\"},"api/type-aliases/Media":{"id":"api/type-aliases/Media","title":"Type Alias: Media","description":"Media: object"},"api/type-aliases/Model":{"id":"api/type-aliases/Model","title":"Type Alias: Model","description":"Model: object"},"api/type-aliases/Models":{"id":"api/type-aliases/Models","title":"Type Alias: Models","description":"Models: object"},"api/type-aliases/Plugin":{"id":"api/type-aliases/Plugin","title":"Type Alias: Plugin","description":"Plugin: object"},"api/type-aliases/UUID":{"id":"api/type-aliases/UUID","title":"Type Alias: UUID","description":"UUID: \\\\$\\\\{string\\\\}-$\\\\{string\\\\}-$\\\\{string\\\\}-$\\\\{string\\\\}-$\\\\{string\\\\}\\\\"},"api/type-aliases/Validator":{"id":"api/type-aliases/Validator","title":"Type Alias: Validator()","description":"Validator: (runtime, message, state?) => Promise\\\\"},"api/variables/defaultCharacter":{"id":"api/variables/defaultCharacter","title":"Variable: defaultCharacter","description":"const defaultCharacter: Character"},"api/variables/elizaLogger":{"id":"api/variables/elizaLogger","title":"Variable: elizaLogger","description":"const elizaLogger: ElizaLogger"},"api/variables/embeddingDimension":{"id":"api/variables/embeddingDimension","title":"Variable: embeddingDimension","description":"const embeddingDimension: 1536 = 1536"},"api/variables/embeddingZeroVector":{"id":"api/variables/embeddingZeroVector","title":"Variable: embeddingZeroVector","description":"const embeddingZeroVector: any[]"},"api/variables/evaluationTemplate":{"id":"api/variables/evaluationTemplate","title":"Variable: evaluationTemplate","description":"const evaluationTemplate: string"},"api/variables/settings":{"id":"api/variables/settings","title":"Variable: settings","description":"const settings: ProcessEnv"},"contributing":{"id":"contributing","title":"Contributing to Eliza","description":"First off, thank you for considering contributing to elizaOS! We welcome improvements and contributions."},"core/actions":{"id":"core/actions","title":"\u26a1 Actions","description":"Actions define how agents respond to and interact with messages. They enable agents to perform tasks beyond simple message responses by integrating with external systems and modifying behavior.","sidebar":"tutorialSidebar"},"core/agents":{"id":"core/agents","title":"\ud83e\udd16 Agents","description":"Agents are the core components of the Eliza framework that handle autonomous interactions. Each agent runs in a runtime environment and can interact through various clients (Discord, Telegram, etc.) while maintaining consistent behavior and memory.","sidebar":"tutorialSidebar"},"core/characterfile":{"id":"core/characterfile","title":"\ud83d\udcdd Character Files","description":"Character files are JSON-formatted configurations that define AI agent personas, combining personality traits, knowledge bases, and interaction patterns to create consistent and effective AI agents. For a full list of capabilities check the character type API docs. You can also view and contribute to open sourced example characterfiles here//github.com/elizaos/characters.","sidebar":"tutorialSidebar"},"core/evaluators":{"id":"core/evaluators","title":"\ud83d\udcca Evaluators","description":"Evaluators are core components that assess and extract information from conversations. Agents use evaluators to automatically process conversations after they happen to help build up their knowledge and understanding over time.","sidebar":"tutorialSidebar"},"core/fact-evaluator":{"id":"core/fact-evaluator","title":"Fact Evaluator: Memory Formation System","description":"The Fact Evaluator serves as the agent\'s \\"episodic memory formation\\" system - similar to how humans process conversations and form memories. Just as you might reflect after a conversation \\"Oh, I learned something new about Sarah today\\", the Fact Evaluator systematically processes conversations to build up the agent\'s understanding of the world and the people in it."},"core/overview":{"id":"core/overview","title":"Overview","description":"Eliza is a framework for creating AI agents that can interact across multiple platforms. Let\'s break down how it all works, starting with the core components:","sidebar":"tutorialSidebar"},"core/providers":{"id":"core/providers","title":"\ud83d\udd0c Providers","description":"Providers are the sources of information for the agent. They provide data or state while acting as the agent\'s \\"senses\\", injecting real-time information into the agent\'s context. They serve as the eyes, ears, and other sensory inputs that allow the agent to perceive and interact with its environment, like a bridge between the agent and various external systems such as market data, wallet information, sentiment analysis, and temporal context. Anything that the agent knows is either coming from like the built-in context or from a provider. For more info, see the providers API page.","sidebar":"tutorialSidebar"},"faq":{"id":"faq","title":"Frequently Asked Questions","description":"What is Eliza?","sidebar":"tutorialSidebar"},"guides/advanced":{"id":"guides/advanced","title":"\ud83d\udd27 Advanced Usage Guide","description":"This guide covers advanced features and capabilities of Eliza, including complex integrations, custom services, and specialized plugins.","sidebar":"tutorialSidebar"},"guides/characters":{"id":"guides/characters","title":"\ud83d\udcdd Character Guide","description":"Character files are JSON-formatted configurations that define an AI character\'s personality, knowledge, and behavior patterns. This guide explains how to create effective character files for use with Eliza agents."},"guides/configuration":{"id":"guides/configuration","title":"\u2699\ufe0f Configuration Guide","description":"This guide covers how to configure Eliza for different use cases and environments. We\'ll walk through all available configuration options and best practices.","sidebar":"tutorialSidebar"},"guides/deployment":{"id":"guides/deployment","title":"Deployment","description":"---"},"guides/docker-setup":{"id":"guides/docker-setup","title":"Eliza Docker Setup Guide","description":"This guide provides instructions for installing and running the Eliza chatbot using either Docker or direct installation on a server.","sidebar":"tutorialSidebar"},"guides/fine-tuning":{"id":"guides/fine-tuning","title":"\ud83c\udfaf Fine-tuning Guide","description":"What is Fine-tuning?","sidebar":"tutorialSidebar"},"guides/local-development":{"id":"guides/local-development","title":"\ud83d\udcbb Local Development Guide","description":"This guide covers setting up and working with Eliza in a development environment.","sidebar":"tutorialSidebar"},"guides/memory-management":{"id":"guides/memory-management","title":"Memory Management","description":"Overview","sidebar":"tutorialSidebar"},"guides/remote-deployment":{"id":"guides/remote-deployment","title":"Deploying ElizaOS to Production","description":"A guide to deploying and maintaining an ElizaOS agent in a production environment.","sidebar":"tutorialSidebar"},"guides/secrets-management":{"id":"guides/secrets-management","title":"\ud83d\udd10 Secrets Management","description":"A comprehensive guide for managing secrets, API keys, and sensitive configuration in Eliza.","sidebar":"tutorialSidebar"},"guides/start-script":{"id":"guides/start-script","title":"\ud83e\udd16 Eliza Start Script","description":"A powerful, cross-platform launcher for your AI companion","sidebar":"tutorialSidebar"},"guides/template-configuration":{"id":"guides/template-configuration","title":"\ud83d\udd27 Template and Client Configuration","description":"This guide covers how to configure custom templates and client behaviors for your AI agent. We\'ll walk through all available template options and configuration settings."},"guides/wsl":{"id":"guides/wsl","title":"WSL Setup Guide","description":"Guide for setting up Eliza on Windows using WSL (Windows Subsystem for Linux)","sidebar":"tutorialSidebar"},"intro":{"id":"intro","title":"Introduction to Eliza","description":"As seen powering @DegenSpartanAI and @aixvcagent","sidebar":"tutorialSidebar"},"packages/adapters":{"id":"packages/adapters","title":"\ud83d\udd27 Database Adapters","description":"Overview","sidebar":"tutorialSidebar"},"packages/agent":{"id":"packages/agent","title":"\ud83e\udd16 Agent Package","description":"The Agent Package (@elizaos/agent) provides the high-level orchestration layer for Eliza, managing agent lifecycles, character loading, client initialization, and runtime coordination.","sidebar":"tutorialSidebar"},"packages/agents":{"id":"packages/agents","title":"\ud83e\udd16 Agent Package","description":"Overview"},"packages/clients":{"id":"packages/clients","title":"\ud83d\udd0c Client Packages","description":"Overview","sidebar":"tutorialSidebar"},"packages/core":{"id":"packages/core","title":"\ud83d\udce6 Core Package","description":"Overview","sidebar":"tutorialSidebar"},"packages/database-adapters":{"id":"packages/database-adapters","title":"\ud83d\udd27 Database Adapters","description":"Overview"},"packages/plugins":{"id":"packages/plugins","title":"\ud83e\udde9 Plugins","description":"Overview","sidebar":"tutorialSidebar"},"quickstart":{"id":"quickstart","title":"Quickstart Guide","description":"Prerequisites","sidebar":"tutorialSidebar"},"tutorials/index":{"id":"tutorials/index","title":"AI Agent Dev School","description":"Welcome to the AI Agent Dev School series, a comprehensive guide to building intelligent agents using the Eliza framework. Over the course of three in-depth sessions, we cover everything from the basics of TypeScript and plugins to advanced topics like providers, evaluators, and dynamic agent behaviors.","sidebar":"tutorialSidebar"},"tutorials/nader_tutorial_10min":{"id":"tutorials/nader_tutorial_10min","title":"Creating an AI Agent with Your Own Personality","description":"In this tutorial, we\'ll explore how to create an AI agent that embodies your own personality using data from your Twitter archive, videos, markdown files, and PDFs. We\'ll leverage the Characterfile repo and Eliza framework to generate and integrate the character data.","sidebar":"tutorialSidebar"},"tutorials/nader_tutorial_15min":{"id":"tutorials/nader_tutorial_15min","title":"Building a Social AI Agent in 15 Minutes","description":"In this tutorial, you\'ll learn how to quickly build your own social media AI agent that can autonomously post tweets, respond to interactions, and maintain its own unique personality. We\'ll be using the Eliza framework by a16z and TypeScript.","sidebar":"tutorialSidebar"},"tutorials/nader_tutorial_35min":{"id":"tutorials/nader_tutorial_35min","title":"How to Build an API Plugin","description":"This guide walks you through creating a custom plugin for the Eliza AI framework that integrates with NASA\'s API to fetch space photos. You\'ll learn how to set up the project structure, implement the required components, and test your plugin across different interfaces.","sidebar":"tutorialSidebar"},"tutorials/part1":{"id":"tutorials/part1","title":"Part 1: Introduction and Foundations","description":"Introduction and Foundations","sidebar":"tutorialSidebar"},"tutorials/part2":{"id":"tutorials/part2","title":"Part 2: Deep Dive into Actions, Providers, and Evaluators","description":"Deep Dive into Actions, Providers, and Evaluators","sidebar":"tutorialSidebar"},"tutorials/part3":{"id":"tutorials/part3","title":"Part 3: Building a User Data Extraction Agent","description":"Building a User Data Extraction Agent","sidebar":"tutorialSidebar"}}}}')}}]);