"use strict";(self.webpackChunk_elizaos_docs=self.webpackChunk_elizaos_docs||[]).push([[72755],{71184:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>a});var s=i(14041);const t={},l=s.createContext(t);function r(e){const n=s.useContext(l);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),s.createElement(l.Provider,{value:n},e.children)}},88011:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"core/plugins","title":"Plugins","description":"Plugins are modular extensions that enhance the capabilities of ElizaOS agents. They provide a flexible way to add new functionality, integrate external services, and customize agent behavior across different platforms.","source":"@site/docs/core/plugins.md","sourceDirName":"core","slug":"/core/plugins","permalink":"/eliza/docs/core/plugins","draft":false,"unlisted":false,"editUrl":"https://github.com/elizaos/eliza/tree/main/docs/docs/core/plugins.md","tags":[],"version":"current","lastUpdatedBy":"madjin","lastUpdatedAt":1742189092000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Agent Runtime","permalink":"/eliza/docs/core/agents"},"next":{"title":"Providers","permalink":"/eliza/docs/core/providers"}}');var t=i(31085),l=i(71184);const r={},a="Plugins",o={},c=[{value:"Quick Start",id:"quick-start",level:2},{value:"Creating a New Plugin",id:"creating-a-new-plugin",level:3},{value:"Managing Plugins",id:"managing-plugins",level:3},{value:"Plugin Configuration",id:"plugin-configuration",level:3},{value:"Publishing Plugins",id:"publishing-plugins",level:2},{value:"Plugin Architecture",id:"plugin-architecture",level:2},{value:"Plugin Components",id:"plugin-components",level:3},{value:"Plugin Interface",id:"plugin-interface",level:3},{value:"Service Implementation",id:"service-implementation",level:3},{value:"Plugin Structure",id:"plugin-structure",level:2},{value:"Plugin Entry Point",id:"plugin-entry-point",level:3},{value:"Plugin Configuration",id:"plugin-configuration-1",level:3},{value:"Environment Variables and Secrets",id:"environment-variables-and-secrets",level:2},{value:"Access Pattern",id:"access-pattern",level:3},{value:"Configuration in Character File",id:"configuration-in-character-file",level:3},{value:"Developing a Plugin",id:"developing-a-plugin",level:2},{value:"Testing Your Plugin",id:"testing-your-plugin",level:3},{value:"Distribution &amp; PR Requirements",id:"distribution--pr-requirements",level:2},{value:"FAQ",id:"faq",level:2},{value:"What exactly is a plugin in ElizaOS?",id:"what-exactly-is-a-plugin-in-elizaos",level:3},{value:"When should I create a plugin versus using existing ones?",id:"when-should-i-create-a-plugin-versus-using-existing-ones",level:3},{value:"How do I manage plugin dependencies?",id:"how-do-i-manage-plugin-dependencies",level:3},{value:"Can I use a plugin in development before publishing?",id:"can-i-use-a-plugin-in-development-before-publishing",level:3},{value:"What&#39;s the difference between Actions and Services?",id:"whats-the-difference-between-actions-and-services",level:3},{value:"How do I handle rate limits with external APIs?",id:"how-do-i-handle-rate-limits-with-external-apis",level:3},{value:"Additional Resources",id:"additional-resources",level:2}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",img:"img",input:"input",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,l.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"plugins",children:"Plugins"})}),"\n",(0,t.jsx)(n.p,{children:"Plugins are modular extensions that enhance the capabilities of ElizaOS agents. They provide a flexible way to add new functionality, integrate external services, and customize agent behavior across different platforms."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsxs)(n.strong,{children:["Browse the various plugins the eliza dev community made here: ",(0,t.jsx)(n.a,{href:"/packages",children:"Package Showcase"})]})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"/packages",children:(0,t.jsx)(n.img,{src:i(89587).A+"",width:"1662",height:"1205"})})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["elizaOS maintains an official package registry at ",(0,t.jsx)(n.a,{href:"https://github.com/elizaos-plugins/registry",children:"github.com/elizaos-plugins/registry"}),"."]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"quick-start",children:"Quick Start"}),"\n",(0,t.jsx)(n.h3,{id:"creating-a-new-plugin",children:"Creating a New Plugin"}),"\n",(0,t.jsx)(n.p,{children:"You can create a new ElizaOS plugin using the CLI:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Using npm\nnpm create eliza@alpha\n\n# Or using npx\nnpx @elizaos/cli create\n"})}),"\n",(0,t.jsx)(n.p,{children:'When prompted, select "Plugin" as the type to create. The CLI will guide you through the setup process, creating a plugin with the proper structure and dependencies.'}),"\n",(0,t.jsx)(n.h3,{id:"managing-plugins",children:"Managing Plugins"}),"\n",(0,t.jsx)(n.p,{children:"There are several ways to add plugins to your ElizaOS project:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["Add the plugin to your project's dependencies (",(0,t.jsx)(n.code,{children:"package.json"}),"):"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "dependencies": {\n    "@elizaos/plugin-solana": "github:elizaos-plugins/plugin-solana",\n    "@elizaos/plugin-twitter": "github:elizaos-plugins/plugin-twitter"\n  }\n}\n'})}),"\n",(0,t.jsxs)(n.ol,{start:"2",children:["\n",(0,t.jsx)(n.li,{children:"Configure the plugin in your project's character definition:"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// In src/index.ts\nexport const character: Character = {\n  name: 'MyAgent',\n  plugins: ['@elizaos/plugin-twitter', '@elizaos/plugin-example'],\n  // ...\n};\n"})}),"\n",(0,t.jsxs)(n.ol,{start:"3",children:["\n",(0,t.jsx)(n.li,{children:"Use the CLI tool to add or remove plugins:"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Add a plugin\nnpx @elizaos/cli plugins add @elizaos/plugin-twitter\n\n# Remove a plugin\nnpx @elizaos/cli plugins remove @elizaos/plugin-twitter\n\n# List available plugins\nnpx @elizaos/cli plugins list\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Full CLI options\nUsage: elizaos plugins [options] [command]\n\nmanage elizaOS plugins\n\nOptions:\n  -h, --help              display help for command\n\nCommands:\n  list|l [options]        list available plugins\n  add|install <plugin>    add a plugin\n  remove|delete <plugin>  remove a plugin\n  help [command]          display help for command\n"})}),"\n",(0,t.jsx)(n.h3,{id:"plugin-configuration",children:"Plugin Configuration"}),"\n",(0,t.jsx)(n.p,{children:"Configure plugin settings in your character definition:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'{\n  "settings": {\n    "twitter": {\n      "shouldRespondToMentions": true\n      // Plugin-specific configuration\n    }\n  }\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"publishing-plugins",children:"Publishing Plugins"}),"\n",(0,t.jsx)(n.p,{children:"If you're a plugin developer, you can publish your plugin to make it available to others:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Navigate to your plugin directory\ncd my-eliza-plugin\n\n# Build your plugin\nnpm run build\n\n# Publish to the registry\nnpx @elizaos/cli publish\n"})}),"\n",(0,t.jsx)(n.p,{children:"The publish command supports several options:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Publish to npm instead of GitHub\nnpx @elizaos/cli publish --npm\n\n# Test the publish process without making changes\nnpx @elizaos/cli publish --test\n\n# Specify platform compatibility\nnpx @elizaos/cli publish --platform node\n"})}),"\n",(0,t.jsx)(n.p,{children:"When publishing, your plugin will be:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Built and packaged"}),"\n",(0,t.jsx)(n.li,{children:"Published to GitHub (or npm if specified)"}),"\n",(0,t.jsx)(n.li,{children:"Added to the elizaOS registry (if you're a maintainer)"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"For first-time publishers, the CLI will guide you through setting up GitHub credentials for publishing."}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"plugin-architecture",children:"Plugin Architecture"}),"\n",(0,t.jsx)(n.p,{children:"Eliza uses a unified plugin architecture where everything is a plugin - including services, adapters, actions, evaluators, and providers. This approach ensures consistent behavior and better extensibility."}),"\n",(0,t.jsx)(n.h3,{id:"plugin-components",children:"Plugin Components"}),"\n",(0,t.jsx)(n.p,{children:"Each plugin can provide one or more of the following components:"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Component"}),(0,t.jsx)(n.th,{children:"Purpose"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"Services"})}),(0,t.jsx)(n.td,{children:"Platform integrations (Discord, Twitter, etc.) or specialized capabilities"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"Actions"})}),(0,t.jsx)(n.td,{children:"Executable functions triggered by the agent"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"Providers"})}),(0,t.jsx)(n.td,{children:"Context providers that supply information to the agent"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"Evaluators"})}),(0,t.jsx)(n.td,{children:"Response analyzers for quality and compliance"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"Adapters"})}),(0,t.jsx)(n.td,{children:"Database or storage system integrations"})]})]})]}),"\n",(0,t.jsx)(n.h3,{id:"plugin-interface",children:"Plugin Interface"}),"\n",(0,t.jsx)(n.p,{children:"All plugins implement the core Plugin interface:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"interface Plugin {\n  name: string;\n  description: string;\n  config?: { [key: string]: any };\n\n  // Optional initialization method\n  init?: (config: Record<string, string>, runtime: IAgentRuntime) => Promise<void>;\n\n  // Components\n  services?: (typeof Service)[];\n  actions?: Action[];\n  providers?: Provider[];\n  evaluators?: Evaluator[];\n  adapters?: Adapter[];\n\n  // Additional features\n  routes?: Route[];\n  tests?: TestSuite[];\n  events?: { [key: string]: ((params: any) => Promise<any>)[] };\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"service-implementation",children:"Service Implementation"}),"\n",(0,t.jsx)(n.p,{children:"Services are the core integration points for external platforms. A properly implemented service:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import { Service, IAgentRuntime } from '@elizaos/core';\n\nexport class ExampleService extends Service {\n  // Required: Define the service type (used for runtime registration)\n  static serviceType = 'example';\n\n  // Required: Describe what this service enables the agent to do\n  capabilityDescription = 'Enables the agent to interact with the Example platform';\n\n  // Store runtime for service operations\n  constructor(protected runtime: IAgentRuntime) {\n    super();\n    // Initialize connections, setup event handlers, etc.\n  }\n\n  // Required: Static method to create and initialize service instance\n  static async start(runtime: IAgentRuntime): Promise<ExampleService> {\n    const service = new ExampleService(runtime);\n    // Additional initialization if needed\n    return service;\n  }\n\n  // Required: Clean up resources when service is stopped\n  async stop(): Promise<void> {\n    // Close connections, release resources\n  }\n\n  // Optional: Custom methods for your service functionality\n  async sendMessage(content: string, channelId: string): Promise<void> {\n    // Implementation\n  }\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"plugin-structure",children:"Plugin Structure"}),"\n",(0,t.jsx)(n.p,{children:"Each plugin repository should follow this structure:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"plugin-name/\n\u251c\u2500\u2500 images/                # Branding assets\n\u2502   \u251c\u2500\u2500 logo.png           # Square logo (400x400px)\n\u2502   \u251c\u2500\u2500 banner.png         # Banner image (1280x640px)\n\u2502   \u2514\u2500\u2500 screenshots/       # Feature screenshots\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 index.ts           # Main plugin entry point\n\u2502   \u251c\u2500\u2500 service.ts         # Service implementation\n\u2502   \u251c\u2500\u2500 actions/           # Plugin-specific actions\n\u2502   \u251c\u2500\u2500 providers/         # Data providers\n\u2502   \u251c\u2500\u2500 types.ts           # Type definitions\n\u2502   \u2514\u2500\u2500 environment.ts     # Configuration validation\n\u251c\u2500\u2500 tests/                 # Test suite\n\u251c\u2500\u2500 package.json           # Plugin configuration and dependencies\n\u2514\u2500\u2500 README.md              # Plugin documentation\n"})}),"\n",(0,t.jsx)(n.h3,{id:"plugin-entry-point",children:"Plugin Entry Point"}),"\n",(0,t.jsxs)(n.p,{children:["Your plugin's ",(0,t.jsx)(n.code,{children:"index.ts"})," should export a Plugin object:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// Example plugin implementation\nimport { type Plugin } from '@elizaos/core';\nimport { ExampleService } from './service';\nimport { searchAction } from './actions/search';\nimport { statusProvider } from './providers/status';\n\nconst examplePlugin: Plugin = {\n  name: 'example',\n  description: 'Example platform integration for ElizaOS',\n  services: [ExampleService],\n  actions: [searchAction],\n  providers: [statusProvider],\n  init: async (config, runtime) => {\n    // Perform any necessary initialization\n    const apiKey = runtime.getSetting('EXAMPLE_API_KEY');\n    if (!apiKey) {\n      console.warn('EXAMPLE_API_KEY not provided');\n    }\n  },\n};\n\nexport default examplePlugin;\n"})}),"\n",(0,t.jsx)(n.h3,{id:"plugin-configuration-1",children:"Plugin Configuration"}),"\n",(0,t.jsxs)(n.p,{children:["Your plugin's ",(0,t.jsx)(n.code,{children:"package.json"})," should include an ",(0,t.jsx)(n.code,{children:"agentConfig"})," section:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "name": "@elizaos/plugin-example",\n  "version": "1.0.0",\n  "agentConfig": {\n    "pluginType": "elizaos:plugin:1.0.0",\n    "pluginParameters": {\n      "API_KEY": {\n        "type": "string",\n        "description": "API key for the Example service"\n      }\n    }\n  }\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"environment-variables-and-secrets",children:"Environment Variables and Secrets"}),"\n",(0,t.jsx)(n.p,{children:"Plugins access configuration through the runtime with the following precedence:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Character settings secrets (highest priority)"}),"\n",(0,t.jsx)(n.li,{children:"Character settings"}),"\n",(0,t.jsx)(n.li,{children:"Global environment settings"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"access-pattern",children:"Access Pattern"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// In your service implementation\nconst apiKey = runtime.getSetting('EXAMPLE_API_KEY');\nconst debugMode = runtime.getSetting('EXAMPLE_DEBUG_MODE'); // Returns boolean for \"true\"/\"false\" strings\n"})}),"\n",(0,t.jsx)(n.h3,{id:"configuration-in-character-file",children:"Configuration in Character File"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "name": "MyAgent",\n  "plugins": ["@elizaos/plugin-example"],\n  "settings": {\n    "example": {\n      "enableFeatureX": true\n    },\n    "secrets": {\n      "EXAMPLE_API_KEY": "your-api-key-here"\n    }\n  }\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"developing-a-plugin",children:"Developing a Plugin"}),"\n",(0,t.jsx)(n.p,{children:"When developing a new plugin, focus on these key aspects:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Service Implementation"}),": Create a solid service class following the pattern above"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Proper Error Handling"}),": Handle API failures gracefully"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Type Definitions"}),": Define clear interfaces and types"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Documentation"}),": Include detailed setup instructions"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Tests"}),": Add test cases for your functionality"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"testing-your-plugin",children:"Testing Your Plugin"}),"\n",(0,t.jsx)(n.p,{children:"During development, you can test your plugin locally:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Start with your plugin\nnpx @elizaos/cli start --plugin=./path/to/plugin\n\n# Or with a specific character\nnpx @elizaos/cli start --character=./characters/test.character.json --plugin=./path/to/plugin\n"})}),"\n",(0,t.jsx)(n.h2,{id:"distribution--pr-requirements",children:"Distribution & PR Requirements"}),"\n",(0,t.jsxs)(n.p,{children:["When submitting a plugin to the ",(0,t.jsx)(n.a,{href:"https://github.com/elizaos-plugins/registry",children:"elizaOS Registry"}),", include:"]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Working Demo"}),": Screenshots or video of your plugin in action"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Test Results"}),": Evidence of successful integration and error handling"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Configuration Example"}),": Show how to properly configure your plugin"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Quality Checklist"}),":","\n",(0,t.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Plugin follows the standard structure"]}),"\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Required branding assets are included"]}),"\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Documentation is complete"]}),"\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ","GitHub topics properly set"]}),"\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Tests are passing"]}),"\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Includes error handling"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"faq",children:"FAQ"}),"\n",(0,t.jsx)(n.h3,{id:"what-exactly-is-a-plugin-in-elizaos",children:"What exactly is a plugin in ElizaOS?"}),"\n",(0,t.jsx)(n.p,{children:"A plugin is a modular extension that adds new capabilities to ElizaOS agents, such as API integrations, custom actions, or platform connections. Plugins allow you to expand agent functionality and share reusable components with other developers."}),"\n",(0,t.jsx)(n.h3,{id:"when-should-i-create-a-plugin-versus-using-existing-ones",children:"When should I create a plugin versus using existing ones?"}),"\n",(0,t.jsx)(n.p,{children:"Create a plugin when you need custom functionality not available in existing plugins, want to integrate with external services, or plan to share reusable agent capabilities with the community."}),"\n",(0,t.jsx)(n.h3,{id:"how-do-i-manage-plugin-dependencies",children:"How do I manage plugin dependencies?"}),"\n",(0,t.jsxs)(n.p,{children:["Plugin dependencies are managed through your project's ",(0,t.jsx)(n.code,{children:"package.json"}),". You can add plugins directly using npm or the ElizaOS CLI, and they will be automatically loaded when your project starts."]}),"\n",(0,t.jsx)(n.h3,{id:"can-i-use-a-plugin-in-development-before-publishing",children:"Can I use a plugin in development before publishing?"}),"\n",(0,t.jsxs)(n.p,{children:["Yes, you can use the ",(0,t.jsx)(n.code,{children:"--plugin"})," flag with the ",(0,t.jsx)(n.code,{children:"start"})," command to include local plugins during development:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"npx @elizaos/cli start --plugin=./path/to/plugin\n"})}),"\n",(0,t.jsx)(n.h3,{id:"whats-the-difference-between-actions-and-services",children:"What's the difference between Actions and Services?"}),"\n",(0,t.jsx)(n.p,{children:"Actions handle specific agent responses or behaviors, while Services provide platform integrations (like Discord or Twitter) or ongoing background functionality that multiple actions might use."}),"\n",(0,t.jsx)(n.h3,{id:"how-do-i-handle-rate-limits-with-external-apis",children:"How do I handle rate limits with external APIs?"}),"\n",(0,t.jsx)(n.p,{children:"Implement proper backoff strategies in your service implementation and consider using a queue system for message handling to respect platform rate limits."}),"\n",(0,t.jsx)(n.h2,{id:"additional-resources",children:"Additional Resources"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://github.com/elizaos-plugins/registry",children:"ElizaOS Registry"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://github.com/elizaos-plugins",children:"Example Plugins"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://discord.gg/elizaos",children:"Discord Community"})}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},89587:(e,n,i)=>{i.d(n,{A:()=>s});const s=i.p+"assets/images/plugins-7fab2676046855656e3033b9dad264c2.png"}}]);