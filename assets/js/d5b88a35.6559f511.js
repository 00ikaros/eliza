"use strict";(self.webpackChunk_elizaos_docs=self.webpackChunk_elizaos_docs||[]).push([[25389],{71184:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var i=t(14041);const s={},r=i.createContext(s);function a(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(r.Provider,{value:n},e.children)}},96431:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"core/entities","title":"Entities","description":"Entities in ElizaOS represent users, agents, or any participant that can interact within the system. They form the basis of the entity-component architecture, allowing for flexible data modeling and relationships across the platform.","source":"@site/docs/core/entities.md","sourceDirName":"core","slug":"/core/entities","permalink":"/docs/core/entities","draft":false,"unlisted":false,"editUrl":"https://github.com/elizaos/eliza/tree/main/docs/docs/core/entities.md","tags":[],"version":"current","lastUpdatedBy":"Shaw","lastUpdatedAt":1742108548000,"sidebarPosition":9,"frontMatter":{"sidebar_position":9},"sidebar":"tutorialSidebar","previous":{"title":"Evaluators","permalink":"/docs/core/evaluators"},"next":{"title":"Project","permalink":"/docs/core/project"}}');var s=t(31085),r=t(71184);const a={sidebar_position:9},o="Entities",d={},c=[{value:"Entity Structure",id:"entity-structure",level:2},{value:"Components",id:"components",level:2},{value:"Entity Creation and Management",id:"entity-creation-and-management",level:2},{value:"Creating an Entity",id:"creating-an-entity",level:3},{value:"Retrieving an Entity",id:"retrieving-an-entity",level:3},{value:"Updating an Entity",id:"updating-an-entity",level:3},{value:"Component Management",id:"component-management",level:2},{value:"Creating a Component",id:"creating-a-component",level:3},{value:"Retrieving Components",id:"retrieving-components",level:3},{value:"Updating Components",id:"updating-components",level:3},{value:"Deleting Components",id:"deleting-components",level:3},{value:"Entity Relationships",id:"entity-relationships",level:2},{value:"Entity Resolution",id:"entity-resolution",level:2},{value:"Entity Details",id:"entity-details",level:2},{value:"Relationship with Rooms and Worlds",id:"relationship-with-rooms-and-worlds",level:2},{value:"Creating Unique Entity IDs",id:"creating-unique-entity-ids",level:2},{value:"Best Practices",id:"best-practices",level:2}];function l(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"entities",children:"Entities"})}),"\n",(0,s.jsx)(n.p,{children:"Entities in ElizaOS represent users, agents, or any participant that can interact within the system. They form the basis of the entity-component architecture, allowing for flexible data modeling and relationships across the platform."}),"\n",(0,s.jsx)(n.h2,{id:"entity-structure",children:"Entity Structure"}),"\n",(0,s.jsx)(n.p,{children:"An entity in ElizaOS has the following properties:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"interface Entity {\n  /** Unique identifier, optional on creation */\n  id?: UUID;\n\n  /** Names of the entity */\n  names: string[];\n\n  /** Optional additional metadata */\n  metadata?: { [key: string]: any };\n\n  /** Agent ID this account is related to, for agents should be themselves */\n  agentId: UUID;\n\n  /** Optional array of components */\n  components?: Component[];\n}\n"})}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Property"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"id"})}),(0,s.jsx)(n.td,{children:"Unique identifier for the entity (optional on creation)"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"names"})}),(0,s.jsx)(n.td,{children:"Array of names the entity is known by"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"metadata"})}),(0,s.jsx)(n.td,{children:"Additional information about the entity"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"agentId"})}),(0,s.jsx)(n.td,{children:"ID of the agent related to this entity"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"components"})}),(0,s.jsx)(n.td,{children:"Array of modular data components attached to this entity"})]})]})]}),"\n",(0,s.jsx)(n.h2,{id:"components",children:"Components"}),"\n",(0,s.jsx)(n.p,{children:"Components are modular pieces of data attached to entities with the following structure:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"interface Component {\n  id: UUID;\n  entityId: UUID;\n  agentId: UUID;\n  roomId: UUID;\n  worldId: UUID;\n  sourceEntityId: UUID;\n  type: string;\n  data: {\n    [key: string]: any;\n  };\n}\n"})}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Property"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"id"})}),(0,s.jsx)(n.td,{children:"Unique identifier for the component"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"entityId"})}),(0,s.jsx)(n.td,{children:"ID of the entity this component belongs to"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"agentId"})}),(0,s.jsx)(n.td,{children:"ID of the agent managing this component"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"roomId"})}),(0,s.jsx)(n.td,{children:"ID of the room this component is associated with"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"worldId"})}),(0,s.jsx)(n.td,{children:"ID of the world this component is associated with"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"sourceEntityId"})}),(0,s.jsx)(n.td,{children:"ID of the entity that created this component"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"type"})}),(0,s.jsx)(n.td,{children:'Type of component (e.g., "profile", "settings")'})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"data"})}),(0,s.jsx)(n.td,{children:"Additional data specific to this component type"})]})]})]}),"\n",(0,s.jsx)(n.h2,{id:"entity-creation-and-management",children:"Entity Creation and Management"}),"\n",(0,s.jsx)(n.h3,{id:"creating-an-entity",children:"Creating an Entity"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"const entityId = await runtime.createEntity({\n  names: ['John Doe', 'JohnD'],\n  agentId: runtime.agentId,\n  metadata: {\n    discord: {\n      username: 'john_doe',\n      name: 'John Doe',\n    },\n  },\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"retrieving-an-entity",children:"Retrieving an Entity"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Get an entity by ID\nconst entity = await runtime.getEntityById(entityId);\n\n// Get all entities in a room\nconst entitiesInRoom = await runtime.getEntitiesForRoom(roomId, true); // true to include components\n"})}),"\n",(0,s.jsx)(n.h3,{id:"updating-an-entity",children:"Updating an Entity"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"await runtime.updateEntity({\n  id: entityId,\n  names: [...entity.names, 'Johnny'],\n  metadata: {\n    ...entity.metadata,\n    customProperty: 'value',\n  },\n});\n"})}),"\n",(0,s.jsx)(n.h2,{id:"component-management",children:"Component Management"}),"\n",(0,s.jsx)(n.p,{children:"Components allow for flexible data modeling by attaching different types of data to entities."}),"\n",(0,s.jsx)(n.h3,{id:"creating-a-component",children:"Creating a Component"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"await runtime.createComponent({\n  id: componentId,\n  entityId: entityId,\n  agentId: runtime.agentId,\n  roomId: roomId,\n  worldId: worldId,\n  sourceEntityId: creatorEntityId,\n  type: 'profile',\n  data: {\n    bio: 'Software developer interested in AI',\n    location: 'San Francisco',\n    website: 'https://example.com',\n  },\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"retrieving-components",children:"Retrieving Components"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Get a specific component type\nconst profileComponent = await runtime.getComponent(\n  entityId,\n  'profile',\n  worldId, // optional filter by world\n  sourceEntityId // optional filter by source\n);\n\n// Get all components for an entity\nconst allComponents = await runtime.getComponents(entityId, worldId, sourceEntityId);\n"})}),"\n",(0,s.jsx)(n.h3,{id:"updating-components",children:"Updating Components"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"await runtime.updateComponent({\n  id: profileComponent.id,\n  data: {\n    ...profileComponent.data,\n    bio: 'Updated bio information',\n  },\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"deleting-components",children:"Deleting Components"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"await runtime.deleteComponent(componentId);\n"})}),"\n",(0,s.jsx)(n.h2,{id:"entity-relationships",children:"Entity Relationships"}),"\n",(0,s.jsx)(n.p,{children:"Entities can have relationships with other entities, stored in the database:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Create a relationship between entities\nawait runtime.createRelationship({\n  sourceEntityId: entityId1,\n  targetEntityId: entityId2,\n  tags: ['friend', 'collaborator'],\n  metadata: {\n    interactions: 5,\n    lastInteraction: Date.now(),\n  },\n});\n\n// Get relationships for an entity\nconst relationships = await runtime.getRelationships({\n  entityId: entityId1,\n  tags: ['friend'], // optional filter by tags\n});\n\n// Get a specific relationship\nconst relationship = await runtime.getRelationship({\n  sourceEntityId: entityId1,\n  targetEntityId: entityId2,\n});\n\n// Update a relationship\nawait runtime.updateRelationship({\n  ...relationship,\n  metadata: {\n    ...relationship.metadata,\n    interactions: relationship.metadata.interactions + 1,\n    lastInteraction: Date.now(),\n  },\n});\n"})}),"\n",(0,s.jsx)(n.h2,{id:"entity-resolution",children:"Entity Resolution"}),"\n",(0,s.jsx)(n.p,{children:"ElizaOS includes a system for resolving entity references from messages and context. This is particularly useful for determining which entity is being referenced in a conversation."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Find an entity by name or reference\nconst entity = await findEntityByName(runtime, message, state);\n"})}),"\n",(0,s.jsx)(n.p,{children:"The entity resolution system considers:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Exact matches by ID or username"}),"\n",(0,s.jsx)(n.li,{children:"Contextual matches from recent conversations"}),"\n",(0,s.jsx)(n.li,{children:"Relationship strength between entities"}),"\n",(0,s.jsx)(n.li,{children:"Role-based permissions in worlds"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"entity-details",children:"Entity Details"}),"\n",(0,s.jsx)(n.p,{children:"To get formatted information about entities in a room:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Get detailed information about entities in a room\nconst entityDetails = await getEntityDetails({\n  runtime,\n  roomId,\n});\n\n// Format entities into a string representation\nconst formattedEntities = formatEntities({ entities: entitiesInRoom });\n"})}),"\n",(0,s.jsx)(n.h2,{id:"relationship-with-rooms-and-worlds",children:"Relationship with Rooms and Worlds"}),"\n",(0,s.jsx)(n.p,{children:"Entities participate in rooms and, by extension, in worlds:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Add an entity as a participant in a room\nawait runtime.addParticipant(entityId, roomId);\n\n// Get all rooms where an entity is a participant\nconst entityRooms = await runtime.getRoomsForParticipant(entityId);\n\n// Get all participants in a room\nconst participants = await runtime.getParticipantsForRoom(roomId);\n"})}),"\n",(0,s.jsx)(n.p,{children:"When an entity is a participant in a room that belongs to a world, the entity has an implicit relationship with that world."}),"\n",(0,s.jsx)(n.h2,{id:"creating-unique-entity-ids",children:"Creating Unique Entity IDs"}),"\n",(0,s.jsx)(n.p,{children:"For situations where you need to create deterministic, unique IDs for entity-agent pairs:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"const uniqueId = createUniqueUuid(runtime, baseUserId);\n"})}),"\n",(0,s.jsx)(n.p,{children:"This ensures that each user-agent interaction has a consistent, unique identifier."}),"\n",(0,s.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Use meaningful names"}),": Provide descriptive names in the ",(0,s.jsx)(n.code,{children:"names"})," array to make entity identification easier"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Structure metadata carefully"}),": Organize metadata by source (e.g., ",(0,s.jsx)(n.code,{children:"discord"}),", ",(0,s.jsx)(n.code,{children:"telegram"}),") for clarity"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Component segregation"}),": Use components to separate different aspects of entity data rather than storing everything in metadata"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Permission checking"}),": Always verify permissions before accessing components created by other entities"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Relationship maintenance"}),": Update relationship metadata regularly to reflect recent interactions"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Entity resolution"}),": Use the entity resolution system to correctly identify entities in conversations"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Deterministic IDs"}),": Use ",(0,s.jsx)(n.code,{children:"createUniqueUuid"})," for consistent entity identification across sessions"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}}}]);