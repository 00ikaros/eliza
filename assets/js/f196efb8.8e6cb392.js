"use strict";(self.webpackChunkeliza_docs=self.webpackChunkeliza_docs||[]).push([[17590],{25279:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>h,frontMatter:()=>a,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"tokenomics/proposals/phase1/hybridpool","title":"**Hybrid Twin-Pool Structure for Launcher Pools**","description":"Abstract","source":"@site/community/tokenomics/proposals/phase1/hybridpool.md","sourceDirName":"tokenomics/proposals/phase1","slug":"/tokenomics/proposals/phase1/hybridpool","permalink":"/eliza/community/tokenomics/proposals/phase1/hybridpool","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"defaultSidebar","previous":{"title":"Discord Chats Compared to Proposal","permalink":"/eliza/community/tokenomics/proposals/feedback_discord"},"next":{"title":"\ud83d\udd25\ud83d\udd25\ud83d\udd25 Accrual Plan","permalink":"/eliza/community/tokenomics/proposals/phase1/valueaccrual"}}');var o=i(74848),n=i(28453);const a={},s="Hybrid Twin-Pool Structure for Launcher Pools",c={},l=[{value:"<strong>Abstract</strong>",id:"abstract",level:2},{value:"<strong>Motivation &amp; Background</strong>",id:"motivation--background",level:2},{value:"<strong>Prior Work and Foundation</strong>",id:"prior-work-and-foundation",level:2},{value:"<strong>System Architecture</strong>",id:"system-architecture",level:2},{value:"<strong>Base Layer: SOL/AT Constant Product Pools</strong>",id:"base-layer-solat-constant-product-pools",level:3},{value:"<strong>Evolution Layer: ai16z/AT DLMM Pools</strong>",id:"evolution-layer-ai16zat-dlmm-pools",level:3},{value:"<strong>Market Mechanics and Value Accrual</strong>",id:"market-mechanics-and-value-accrual",level:2},{value:"<strong>Price Discovery Process</strong>",id:"price-discovery-process",level:3},{value:"<strong>Value Capture Mechanisms</strong>",id:"value-capture-mechanisms",level:3},{value:"<strong>Risk Analysis and Mitigation</strong>",id:"risk-analysis-and-mitigation",level:2},{value:"<strong>Market Structure Risks</strong>",id:"market-structure-risks",level:3}];function d(e){const t={h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",strong:"strong",...(0,n.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.header,{children:(0,o.jsx)(t.h1,{id:"hybrid-twin-pool-structure-for-launcher-pools",children:(0,o.jsx)(t.strong,{children:"Hybrid Twin-Pool Structure for Launcher Pools"})})}),"\n",(0,o.jsx)(t.h2,{id:"abstract",children:(0,o.jsx)(t.strong,{children:"Abstract"})}),"\n",(0,o.jsx)(t.p,{children:"This document builds upon Esk3nder.eth's work on creating a sustainable value accrual framework for the $ai16z token through a venture-themed launchpad built on Solana, combining the dual-pool structure set forth by Tresflames. This paper expands this foundation by developing a comprehensive system that combines constant product (CP) and Dynamic Liquidity Market Maker (DLMM) pools to drive buy pressure towards $ai16z without requiring a SaaS-type model for ALM activities. This approach enables natural value accrual through market mechanics while maintaining efficient trading environments for projects at all stages of development."}),"\n",(0,o.jsx)(t.h2,{id:"motivation--background",children:(0,o.jsx)(t.strong,{children:"Motivation & Background"})}),"\n",(0,o.jsx)(t.p,{children:"Our goal is to create sustainable value accrual for $ai16z while maintaining low barriers to entry for new projects through a hybrid approach to liquidity provisioning. Rather than imposing token locks or LP requirements that create friction, we propose a market-driven twin pool structure that evolves with project maturity. By starting with CP pools and progressing to DLMM pools based on project success metrics, this system aims to capture value through natural market mechanics as projects grow while removing the complexities of concentrated liquidity management from most projects that do not reach sufficient traction."}),"\n",(0,o.jsx)(t.h2,{id:"prior-work-and-foundation",children:(0,o.jsx)(t.strong,{children:"Prior Work and Foundation"})}),"\n",(0,o.jsx)(t.p,{children:"This implementation builds upon several key contributions to DeFi market making and token launch frameworks. Tresflames introduced the concept of dual-pool structures for token launches, demonstrating how multiple pools can work together to create more efficient markets. Their work showed how different pool types could serve distinct purposes while maintaining overall market coherence, laying the groundwork for modern multi-pool architectures."}),"\n",(0,o.jsx)(t.p,{children:"Esk3nder.eth provided the ALM-based framework for token launches, showing how progressive stages of project development could align with evolving market making approaches. This work provided the foundation for thinking about token launches as a growth journey rather than a single event, introducing the concept of evolving liquidity needs as projects mature."}),"\n",(0,o.jsx)(t.h2,{id:"system-architecture",children:(0,o.jsx)(t.strong,{children:"System Architecture"})}),"\n",(0,o.jsx)(t.h3,{id:"base-layer-solat-constant-product-pools",children:(0,o.jsx)(t.strong,{children:"Base Layer: SOL/AT Constant Product Pools"})}),"\n",(0,o.jsx)(t.p,{children:"The foundation of our system uses constant product pools for initial SOL/Project Token (AT) pairs. These pools serve as the primary entry point for new projects after bonding, providing a robust and well-understood trading environment. The constant product formula, which maintains the relationship x*y=k, distributes liquidity across the entire price range from zero to infinity. This mathematical property ensures trading can continue even during extreme price movements, though with increased slippage as prices deviate further from the current market price."}),"\n",(0,o.jsx)(t.p,{children:"For new projects, the constant product model offers several advantages. First, it provides immediate market access without requiring complex setup or heavy capital commitments. The simple yet effective x*y=k formula creates a natural price discovery mechanism that responds to market forces while maintaining continuous liquidity. During periods of high volatility, which are common and often necessary for early-stage projects, the continuous liquidity curve ensures trades can always execute, albeit at varying price impacts."}),"\n",(0,o.jsx)(t.p,{children:"Furthermore, these pools require minimal management overhead. This characteristic is particularly important since many early-stage projects may not survive long-term, and the automated nature of constant product pools means they can continue functioning regardless of project trajectory or team involvement."}),"\n",(0,o.jsx)(t.h3,{id:"evolution-layer-ai16zat-dlmm-pools",children:(0,o.jsx)(t.strong,{children:"Evolution Layer: ai16z/AT DLMM Pools"})}),"\n",(0,o.jsx)(t.p,{children:"As projects reach maturity thresholds, measured either by market capitalization or cumulative trading fees, a secondary ai16z/AT DLMM pool is launched using the fees generated from the initial pool. These bin/tick style pools leverage Meteora's Dynamic Liquidity Market Maker technology to provide enhanced price stability and deeper liquidity for established projects."}),"\n",(0,o.jsx)(t.p,{children:"The DLMM structure introduces several advanced features that complement the base layer constant product pools:"}),"\n",(0,o.jsx)(t.p,{children:"The bin-based liquidity structure allows for precise placement of liquidity within specific price ranges. When large trades impact the SOL/AT pool's price, subsequent trades can automatically route through the ai16z/AT pool if it offers better prices within its configured bins. This creates an organic damping effect on volatility without requiring artificial constraints."}),"\n",(0,o.jsx)(t.p,{children:"Projects seeking greater price control must acquire $ai16z tokens to pair with their AT tokens for deeper liquidity provision, which allows the selected concentrated liquidity bins to handle more volume and exert a greater control mechanism for the overall price of the AT. This mechanism creates natural buy pressure for $ai16z that scales with project success. Larger projects wanting more influence via the DLMM pools must commit proportionally more capital through $ai16z acquisition, aligning their interests with the platform's long-term success. The DLMM pools also enable sophisticated liquidity management strategies, including dynamic fee adjustment and automated range management. These features help maintain optimal trading conditions while maximizing capital efficiency for liquidity providers."}),"\n",(0,o.jsx)(t.h2,{id:"market-mechanics-and-value-accrual",children:(0,o.jsx)(t.strong,{children:"Market Mechanics and Value Accrual"})}),"\n",(0,o.jsx)(t.h3,{id:"price-discovery-process",children:(0,o.jsx)(t.strong,{children:"Price Discovery Process"})}),"\n",(0,o.jsx)(t.p,{children:"Our system enables efficient price discovery while protecting against extreme volatility through a carefully designed progression. In the initial phase, the constant product pool allows rapid price discovery through its continuous liquidity curve. Market participants can freely trade and establish price levels based on their assessment of the project's value."}),"\n",(0,o.jsx)(t.p,{children:"As trading patterns stabilize and projects meet predetermined thresholds, DLMM pools are launched with the starting liquidity generated from the fees of the base pool to provide enhanced price control."}),"\n",(0,o.jsx)(t.p,{children:"The interaction between pools provides additional benefits beyond simple price discovery. The aggregators direct trades to the most efficient pool based on current prices and liquidity conditions. This creates arbitrage opportunities that help maintain price alignment between pools while also contributing to deeper overall liquidity for mature projects."}),"\n",(0,o.jsx)(t.h3,{id:"value-capture-mechanisms",children:(0,o.jsx)(t.strong,{children:"Value Capture Mechanisms"})}),"\n",(0,o.jsx)(t.p,{children:"The system creates sustainable value accrual for $ai16z through multiple market-driven mechanisms. First, natural buy pressure emerges as successful projects seek enhanced price stability through DLMM pools. This demand for $ai16z tokens scales with project success, creating a direct link between ecosystem growth and token value."}),"\n",(0,o.jsx)(t.h2,{id:"risk-analysis-and-mitigation",children:(0,o.jsx)(t.strong,{children:"Risk Analysis and Mitigation"})}),"\n",(0,o.jsx)(t.h3,{id:"market-structure-risks",children:(0,o.jsx)(t.strong,{children:"Market Structure Risks"})}),"\n",(0,o.jsx)(t.p,{children:"The dual-pool architecture introduces several potential risks that require careful consideration and mitigation strategies. Pool interaction risk arises from the possibility that sophisticated traders might exploit price differences between the constant product and DLMM pools. We address this through careful threshold calibration for DLMM pool activation and dynamic fee adjustment based on market conditions."}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.strong,{children:"ALM Risks"})}),"\n",(0,o.jsx)(t.p,{children:"The automated management of DLMM bin positions presents significant technical complexity and risk. While concentrated liquidity enables capital efficiency, determining optimal bin ranges and distributions requires sophisticated algorithms that must constantly adapt to changing market conditions. Current market making algorithms often struggle with these complex dynamics outside of stable/stable or bluechip/stable pairs, particularly during periods of high volatility or when dealing with tokens that have unique trading patterns."})]})}function h(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},28453:(e,t,i)=>{i.d(t,{R:()=>a,x:()=>s});var r=i(96540);const o={},n=r.createContext(o);function a(e){const t=r.useContext(n);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),r.createElement(n.Provider,{value:t},e.children)}}}]);